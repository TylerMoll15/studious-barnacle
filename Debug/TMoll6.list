
TMoll6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001324  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d0  080089d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d8  080089d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080089e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00025bc0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c40  20025c40  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eff6  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f3f  00000000  00000000  0002f0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  00032028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b3f  00000000  00000000  00032f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262fc  00000000  00000000  00033a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e01  00000000  00000000  00059d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9260  00000000  00000000  0006eb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046b8  00000000  00000000  00147dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007694 	.word	0x08007694

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08007694 	.word	0x08007694

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005a0:	f006 f86a 	bl	8006678 <initialise_monitor_handles>
    LTCD__Init();
 80005a4:	f000 fe66 	bl	8001274 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fe23 	bl	80011f4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 ff02 	bl	80013bc <LCD_Clear>
	RNG_Init();
 80005b8:	f001 f9ec 	bl	8001994 <RNG_Init>
	init_button_application();
 80005bc:	f000 fcb4 	bl	8000f28 <init_button_application>
	init_button_interrupt_application();
 80005c0:	f000 fcb8 	bl	8000f34 <init_button_interrupt_application>
	LED_TIMER5_init();
 80005c4:	f001 fbc0 	bl	8001d48 <LED_TIMER5_init>

	hexti.Line = 0;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <ApplicationInit+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]

   #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ce:	f000 ffcc 	bl	800156a <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <ApplicationInit+0x44>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000a4 	.word	0x200000a4
 80005e0:	2000009c 	.word	0x2000009c

080005e4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo()
{
 80005e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e8:	b0e3      	sub	sp, #396	; 0x18c
 80005ea:	af02      	add	r7, sp, #8
	struct Box_Boundaries p1_bounds;
	struct Box_Boundaries p2_bounds;
	struct Box_Boundaries player_select[2];
	uint16_t move_count = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
	uint32_t game_board[BOARD_DIMENSION][BOARD_DIMENSION]; //player x
	int screen_state = SCREEN_MENU;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	int player_turn = false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	p1_bounds.left_x = 63;
 80005fe:	233f      	movs	r3, #63	; 0x3f
 8000600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p1_bounds.top_y = 224;
 8000604:	23e0      	movs	r3, #224	; 0xe0
 8000606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	p1_bounds.right_x = 190;
 800060a:	23be      	movs	r3, #190	; 0xbe
 800060c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	p1_bounds.bottom_y = 180;
 8000610:	23b4      	movs	r3, #180	; 0xb4
 8000612:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	p2_bounds.left_x = 63;
 8000616:	233f      	movs	r3, #63	; 0x3f
 8000618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	p2_bounds.top_y = 155;
 800061c:	239b      	movs	r3, #155	; 0x9b
 800061e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	p2_bounds.right_x = 190;
 8000622:	23be      	movs	r3, #190	; 0xbe
 8000624:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	p2_bounds.bottom_y = 111;
 8000628:	236f      	movs	r3, #111	; 0x6f
 800062a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	player_select[0] = p1_bounds;
 800062e:	f107 06d4 	add.w	r6, r7, #212	; 0xd4
 8000632:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000638:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	player_select[1] = p2_bounds;
 800063c:	f107 06e4 	add.w	r6, r7, #228	; 0xe4
 8000640:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000646:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

	struct Box_Boundaries game_grid[3][3];
//	calc all box boundaries
	for(int x = 1; x < 4; x++){
 800064a:	2301      	movs	r3, #1
 800064c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8000650:	e063      	b.n	800071a <LCD_Touch_Polling_Demo+0x136>
		for(int y = 1; y < 4; y++){
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000658:	e056      	b.n	8000708 <LCD_Touch_Polling_Demo+0x124>
			struct Box_Boundaries curr_grid;
			curr_grid.right_x = x * TOUCH_SCREEN_WIDTH/3;
 800065a:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	461a      	mov	r2, r3
 8000668:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800066c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000670:	609a      	str	r2, [r3, #8]
			curr_grid.left_x = (x - 1) * TOUCH_SCREEN_WIDTH/3;
 8000672:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	461a      	mov	r2, r3
 8000682:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000686:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800068a:	601a      	str	r2, [r3, #0]
			curr_grid.top_y = y * TOUCH_SCREEN_HEIGHT/3;
 800068c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	019b      	lsls	r3, r3, #6
 8000698:	4ab7      	ldr	r2, [pc, #732]	; (8000978 <LCD_Touch_Polling_Demo+0x394>)
 800069a:	fb82 1203 	smull	r1, r2, r2, r3
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80006aa:	605a      	str	r2, [r3, #4]
			curr_grid.bottom_y = (y - 1) * TOUCH_SCREEN_HEIGHT/3;
 80006ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	019b      	lsls	r3, r3, #6
 80006ba:	4aaf      	ldr	r2, [pc, #700]	; (8000978 <LCD_Touch_Polling_Demo+0x394>)
 80006bc:	fb82 1203 	smull	r1, r2, r2, r3
 80006c0:	17db      	asrs	r3, r3, #31
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006c8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80006cc:	60da      	str	r2, [r3, #12]

			game_grid[x - 1][y - 1] = curr_grid;
 80006ce:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80006d8:	1e58      	subs	r0, r3, #1
 80006da:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006de:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	4403      	add	r3, r0
 80006ea:	011b      	lsls	r3, r3, #4
 80006ec:	18ca      	adds	r2, r1, r3
 80006ee:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80006f6:	4616      	mov	r6, r2
 80006f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		for(int y = 1; y < 4; y++){
 80006fe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000702:	3301      	adds	r3, #1
 8000704:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8000708:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800070c:	2b03      	cmp	r3, #3
 800070e:	dda4      	ble.n	800065a <LCD_Touch_Polling_Demo+0x76>
	for(int x = 1; x < 4; x++){
 8000710:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000714:	3301      	adds	r3, #1
 8000716:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800071a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800071e:	2b03      	cmp	r3, #3
 8000720:	dd97      	ble.n	8000652 <LCD_Touch_Polling_Demo+0x6e>
		}
	}

//	clear game_board
	for(int x = 0; x < BOARD_DIMENSION; x++){
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8000728:	e020      	b.n	800076c <LCD_Touch_Polling_Demo+0x188>
		for(int y = 0; y < BOARD_DIMENSION; y++){
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000730:	e013      	b.n	800075a <LCD_Touch_Polling_Demo+0x176>
			game_board[x][y] = 0;
 8000732:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000748:	443b      	add	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	f843 2cd0 	str.w	r2, [r3, #-208]
		for(int y = 0; y < BOARD_DIMENSION; y++){
 8000750:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000754:	3301      	adds	r3, #1
 8000756:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800075a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800075e:	2b02      	cmp	r3, #2
 8000760:	dde7      	ble.n	8000732 <LCD_Touch_Polling_Demo+0x14e>
	for(int x = 0; x < BOARD_DIMENSION; x++){
 8000762:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000766:	3301      	adds	r3, #1
 8000768:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800076c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000770:	2b02      	cmp	r3, #2
 8000772:	ddda      	ble.n	800072a <LCD_Touch_Polling_Demo+0x146>
	}


	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000774:	4881      	ldr	r0, [pc, #516]	; (800097c <LCD_Touch_Polling_Demo+0x398>)
 8000776:	f000 ff02 	bl	800157e <returnTouchStateAndLocation>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	f040 837e 	bne.w	8000e7e <LCD_Touch_Polling_Demo+0x89a>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8000782:	4b7e      	ldr	r3, [pc, #504]	; (800097c <LCD_Touch_Polling_Demo+0x398>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4b7c      	ldr	r3, [pc, #496]	; (800097c <LCD_Touch_Polling_Demo+0x398>)
 800078a:	885b      	ldrh	r3, [r3, #2]
 800078c:	461a      	mov	r2, r3
 800078e:	487c      	ldr	r0, [pc, #496]	; (8000980 <LCD_Touch_Polling_Demo+0x39c>)
 8000790:	f006 f8b0 	bl	80068f4 <iprintf>


			struct Point touch_loc;
			touch_loc.x = StaticTouchData.x;
 8000794:	4b79      	ldr	r3, [pc, #484]	; (800097c <LCD_Touch_Polling_Demo+0x398>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800079e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80007a2:	601a      	str	r2, [r3, #0]
			touch_loc.y = StaticTouchData.y;
 80007a4:	4b75      	ldr	r3, [pc, #468]	; (800097c <LCD_Touch_Polling_Demo+0x398>)
 80007a6:	885b      	ldrh	r3, [r3, #2]
 80007a8:	461a      	mov	r2, r3
 80007aa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80007ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80007b2:	605a      	str	r2, [r3, #4]

//			bool for if the player should switch
			bool changePlayer = false;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163


			if(screen_state == SCREEN_MENU){
 80007ba:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d13e      	bne.n	8000840 <LCD_Touch_Polling_Demo+0x25c>
				for(int i = 0; i < 2; i++){
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80007c8:	e035      	b.n	8000836 <LCD_Touch_Polling_Demo+0x252>
					if(checkTouchBounds(&touch_loc, player_select[i])){
 80007ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80007d4:	443b      	add	r3, r7
 80007d6:	3bac      	subs	r3, #172	; 0xac
 80007d8:	f107 0008 	add.w	r0, r7, #8
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	9200      	str	r2, [sp, #0]
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	f002 fbf3 	bl	8002fcc <checkTouchBounds>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01f      	beq.n	800082c <LCD_Touch_Polling_Demo+0x248>
						printf("Player %d box pressed!", i+1);
 80007ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80007f0:	3301      	adds	r3, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4863      	ldr	r0, [pc, #396]	; (8000984 <LCD_Touch_Polling_Demo+0x3a0>)
 80007f6:	f006 f87d 	bl	80068f4 <iprintf>
						LCD_Clear(0, LCD_COLOR_WHITE);
 80007fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fddc 	bl	80013bc <LCD_Clear>
						Draw_Game();
 8000804:	f000 fff5 	bl	80017f2 <Draw_Game>

						if(i == 0){ //1P
 8000808:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <LCD_Touch_Polling_Demo+0x234>
							screen_state = SCREEN_1P;
 8000810:	2301      	movs	r3, #1
 8000812:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000816:	e006      	b.n	8000826 <LCD_Touch_Polling_Demo+0x242>
						}
						else if(i == 1){ //2P
 8000818:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800081c:	2b01      	cmp	r3, #1
 800081e:	d102      	bne.n	8000826 <LCD_Touch_Polling_Demo+0x242>
							screen_state = SCREEN_2P;
 8000820:	2303      	movs	r3, #3
 8000822:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
						}
						TIMER_start(TIM5_);
 8000826:	4858      	ldr	r0, [pc, #352]	; (8000988 <LCD_Touch_Polling_Demo+0x3a4>)
 8000828:	f001 fa26 	bl	8001c78 <TIMER_start>
				for(int i = 0; i < 2; i++){
 800082c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8000836:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800083a:	2b01      	cmp	r3, #1
 800083c:	ddc5      	ble.n	80007ca <LCD_Touch_Polling_Demo+0x1e6>
 800083e:	e321      	b.n	8000e84 <LCD_Touch_Polling_Demo+0x8a0>
					}
				}
			}
			else if(screen_state == SCREEN_2P || screen_state == SCREEN_1P){
 8000840:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000844:	2b03      	cmp	r3, #3
 8000846:	d004      	beq.n	8000852 <LCD_Touch_Polling_Demo+0x26e>
 8000848:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800084c:	2b01      	cmp	r3, #1
 800084e:	f040 8306 	bne.w	8000e5e <LCD_Touch_Polling_Demo+0x87a>
				for(int x = 0; x < 3; x++){
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000858:	e2e4      	b.n	8000e24 <LCD_Touch_Polling_Demo+0x840>
					for(int y = 0; y < 3; y++){
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000860:	e2d6      	b.n	8000e10 <LCD_Touch_Polling_Demo+0x82c>
						if(checkTouchBounds(&touch_loc, game_grid[x][y])){
 8000862:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000866:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 800086a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000878:	4413      	add	r3, r2
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	440b      	add	r3, r1
 800087e:	f107 0008 	add.w	r0, r7, #8
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000888:	f002 fba0 	bl	8002fcc <checkTouchBounds>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 82b9 	beq.w	8000e06 <LCD_Touch_Polling_Demo+0x822>
 8000894:	466b      	mov	r3, sp
 8000896:	461e      	mov	r6, r3
							int winning_numb = NO_WINNER; //init to none
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
							printf("Grid Square x = %d y = %d pressed\n", x, y);
 80008a0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80008a4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80008a8:	4838      	ldr	r0, [pc, #224]	; (800098c <LCD_Touch_Polling_Demo+0x3a8>)
 80008aa:	f006 f823 	bl	80068f4 <iprintf>

							if(!game_board[x][y]){
 80008ae:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008c4:	443b      	add	r3, r7
 80008c6:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d144      	bne.n	8000958 <LCD_Touch_Polling_Demo+0x374>
								if(player_turn == PLAYER_O_BOOL){ //player O
 80008ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10f      	bne.n	80008f6 <LCD_Touch_Polling_Demo+0x312>
									game_board[x][y] = PLAYER_O;
 80008d6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008ec:	443b      	add	r3, r7
 80008ee:	2202      	movs	r2, #2
 80008f0:	f843 2cd0 	str.w	r2, [r3, #-208]
 80008f4:	e00e      	b.n	8000914 <LCD_Touch_Polling_Demo+0x330>

								}
								else{ //player X
									game_board[x][y] = PLAYER_X;
 80008f6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800090c:	443b      	add	r3, r7
 800090e:	2201      	movs	r2, #1
 8000910:	f843 2cd0 	str.w	r2, [r3, #-208]
								}
								move_count++;
 8000914:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8000918:	3301      	adds	r3, #1
 800091a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
								Draw_Move(player_turn, game_grid[x][y]);
 800091e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf14      	ite	ne
 8000926:	2301      	movne	r3, #1
 8000928:	2300      	moveq	r3, #0
 800092a:	b2d8      	uxtb	r0, r3
 800092c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000930:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 8000934:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000942:	4413      	add	r3, r2
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	440b      	add	r3, r1
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	9200      	str	r2, [sp, #0]
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	f000 ff6f 	bl	8001830 <Draw_Move>
								changePlayer = true;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
							}

						    if(move_count == FULL_BOARD){
 8000958:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 800095c:	2b09      	cmp	r3, #9
 800095e:	d102      	bne.n	8000966 <LCD_Touch_Polling_Demo+0x382>
						    	winning_numb = TIE;
 8000960:	2303      	movs	r3, #3
 8000962:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
						    }

							// if 1 player, automatically place 'O'
							int rand_x;
							int rand_y;
							if(screen_state == SCREEN_1P){
 8000966:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800096a:	2b01      	cmp	r3, #1
 800096c:	d14d      	bne.n	8000a0a <LCD_Touch_Polling_Demo+0x426>
								int ran_sel_placement = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

								// while rand indices not valid, re-call rand-int
								while(ran_sel_placement && move_count != FULL_BOARD && winning_numb == NO_WINNER){
 8000974:	e03c      	b.n	80009f0 <LCD_Touch_Polling_Demo+0x40c>
 8000976:	bf00      	nop
 8000978:	55555556 	.word	0x55555556
 800097c:	2000009c 	.word	0x2000009c
 8000980:	080076ac 	.word	0x080076ac
 8000984:	080076c0 	.word	0x080076c0
 8000988:	40000c00 	.word	0x40000c00
 800098c:	080076d8 	.word	0x080076d8
									HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f002 fbe1 	bl	8003158 <HAL_Delay>
									rand_x = Get_Random_Number() % BOARD_DIMENSION;
 8000996:	f001 f81d 	bl	80019d4 <Get_Random_Number>
 800099a:	4601      	mov	r1, r0
 800099c:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <LCD_Touch_Polling_Demo+0x53c>)
 800099e:	fba3 2301 	umull	r2, r3, r3, r1
 80009a2:	085a      	lsrs	r2, r3, #1
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
									HAL_Delay(100);
 80009b0:	2064      	movs	r0, #100	; 0x64
 80009b2:	f002 fbd1 	bl	8003158 <HAL_Delay>
									rand_y = Get_Random_Number() % BOARD_DIMENSION;
 80009b6:	f001 f80d 	bl	80019d4 <Get_Random_Number>
 80009ba:	4601      	mov	r1, r0
 80009bc:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <LCD_Touch_Polling_Demo+0x53c>)
 80009be:	fba3 2301 	umull	r2, r3, r3, r1
 80009c2:	085a      	lsrs	r2, r3, #1
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	1aca      	subs	r2, r1, r3
 80009cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148

									ran_sel_placement = game_board[rand_x][rand_y];
 80009d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80009e6:	443b      	add	r3, r7
 80009e8:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80009ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
								while(ran_sel_placement && move_count != FULL_BOARD && winning_numb == NO_WINNER){
 80009f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <LCD_Touch_Polling_Demo+0x426>
 80009f8:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80009fc:	2b09      	cmp	r3, #9
 80009fe:	d004      	beq.n	8000a0a <LCD_Touch_Polling_Demo+0x426>
 8000a00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d0c2      	beq.n	8000990 <LCD_Touch_Polling_Demo+0x3ac>
								}
							}

//							drawing move logic

							if(screen_state == SCREEN_1P && changePlayer){
 8000a0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d12e      	bne.n	8000a70 <LCD_Touch_Polling_Demo+0x48c>
 8000a12:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d02a      	beq.n	8000a70 <LCD_Touch_Polling_Demo+0x48c>
								Draw_Move(PLAYER_O_BOOL, game_grid[rand_x][rand_y]);
 8000a1a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000a1e:	f5a3 71b0 	sub.w	r1, r3, #352	; 0x160
 8000a22:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000a30:	4413      	add	r3, r2
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fef7 	bl	8001830 <Draw_Move>
								game_board[rand_x][rand_y] = PLAYER_O;
 8000a42:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a58:	443b      	add	r3, r7
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	f843 2cd0 	str.w	r2, [r3, #-208]
								move_count++;
 8000a60:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8000a64:	3301      	adds	r3, #1
 8000a66:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
								changePlayer = false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
							}

//							check win state
						    uint8_t num_win_states = 8;
 8000a70:	2308      	movs	r3, #8
 8000a72:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

							uint16_t winning_states[num_win_states];
 8000a76:	f897 112b 	ldrb.w	r1, [r7, #299]	; 0x12b
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000a82:	b2cb      	uxtb	r3, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	461c      	mov	r4, r3
 8000a88:	4615      	mov	r5, r2
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	012b      	lsls	r3, r5, #4
 8000a94:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000a98:	0122      	lsls	r2, r4, #4
 8000a9a:	b2cb      	uxtb	r3, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	4691      	mov	r9, r2
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000aae:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000ab2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	3307      	adds	r3, #7
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac4:	ab02      	add	r3, sp, #8
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
						    uint8_t board_width = BOARD_DIMENSION;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

						//    set winning states to 0
						    for(int i = 0; i < num_win_states; i++){
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000adc:	e00b      	b.n	8000af6 <LCD_Touch_Polling_Demo+0x512>
						    	winning_states[i] = 0;
 8000ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ae2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						    for(int i = 0; i < num_win_states; i++){
 8000aec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000af6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8000afa:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbed      	blt.n	8000ade <LCD_Touch_Polling_Demo+0x4fa>
						    }

						    uint16_t players[2] = {PLAYER_X, PLAYER_O};
 8000b02:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000b06:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <LCD_Touch_Polling_Demo+0x540>)
 8000b0c:	6812      	ldr	r2, [r2, #0]
 8000b0e:	601a      	str	r2, [r3, #0]
						    for(int j = 0; j < 2; j++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000b16:	e123      	b.n	8000d60 <LCD_Touch_Polling_Demo+0x77c>
						        for(int i = 0; i < BOARD_DIMENSION; i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000b1e:	e0ed      	b.n	8000cfc <LCD_Touch_Polling_Demo+0x718>
 8000b20:	aaaaaaab 	.word	0xaaaaaaab
 8000b24:	08007768 	.word	0x08007768
						            if (game_board[0][i] == players[j]) winning_states[0]++;
 8000b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b32:	443b      	add	r3, r7
 8000b34:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8000b38:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000b3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000b40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000b44:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d107      	bne.n	8000b5c <LCD_Touch_Polling_Demo+0x578>
 8000b4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b5a:	801a      	strh	r2, [r3, #0]
						            if (game_board[1][i] == players[j]) winning_states[1]++;
 8000b5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b60:	3303      	adds	r3, #3
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b68:	443b      	add	r3, r7
 8000b6a:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8000b6e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000b72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000b76:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000b7a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d107      	bne.n	8000b92 <LCD_Touch_Polling_Demo+0x5ae>
 8000b82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b86:	885b      	ldrh	r3, [r3, #2]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b90:	805a      	strh	r2, [r3, #2]
						            if (game_board[2][i] == players[j]) winning_states[2]++;
 8000b92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000b96:	3306      	adds	r3, #6
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000b9e:	443b      	add	r3, r7
 8000ba0:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8000ba4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000ba8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000bac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000bb0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d107      	bne.n	8000bc8 <LCD_Touch_Polling_Demo+0x5e4>
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bbc:	889b      	ldrh	r3, [r3, #4]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bc6:	809a      	strh	r2, [r3, #4]
						            if (game_board[i][0] == players[j]) winning_states[3]++;
 8000bc8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bd8:	443b      	add	r3, r7
 8000bda:	3bd0      	subs	r3, #208	; 0xd0
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000be2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000be6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000bea:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d107      	bne.n	8000c02 <LCD_Touch_Polling_Demo+0x61e>
 8000bf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf6:	88db      	ldrh	r3, [r3, #6]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c00:	80da      	strh	r2, [r3, #6]
						            if (game_board[i][1] == players[j]) winning_states[4]++;
 8000c02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c12:	443b      	add	r3, r7
 8000c14:	3bcc      	subs	r3, #204	; 0xcc
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000c1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000c20:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000c24:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d107      	bne.n	8000c3c <LCD_Touch_Polling_Demo+0x658>
 8000c2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c30:	891b      	ldrh	r3, [r3, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c3a:	811a      	strh	r2, [r3, #8]
						            if (game_board[i][2] == players[j]) winning_states[5]++;
 8000c3c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c4c:	443b      	add	r3, r7
 8000c4e:	3bc8      	subs	r3, #200	; 0xc8
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000c56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000c5a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000c5e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d107      	bne.n	8000c76 <LCD_Touch_Polling_Demo+0x692>
 8000c66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c6a:	895b      	ldrh	r3, [r3, #10]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c74:	815a      	strh	r2, [r3, #10]
						            if (game_board[i][i] == players[j]) winning_states[6]++;
 8000c76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c80:	443b      	add	r3, r7
 8000c82:	3bd0      	subs	r3, #208	; 0xd0
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000c8a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000c8e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000c92:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d107      	bne.n	8000caa <LCD_Touch_Polling_Demo+0x6c6>
 8000c9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c9e:	899b      	ldrh	r3, [r3, #12]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ca8:	819a      	strh	r2, [r3, #12]
						            if (game_board[board_width - i - 1][i] == players[j]) winning_states[7]++;
 8000caa:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000cae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cc8:	443b      	add	r3, r7
 8000cca:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8000cce:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000cd2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8000cd6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000cda:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d107      	bne.n	8000cf2 <LCD_Touch_Polling_Demo+0x70e>
 8000ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ce6:	89db      	ldrh	r3, [r3, #14]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000cf0:	81da      	strh	r2, [r3, #14]
						        for(int i = 0; i < BOARD_DIMENSION; i++){
 8000cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000cfc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	f77f af11 	ble.w	8000b28 <LCD_Touch_Polling_Demo+0x544>
						        }

						        for(int k = 0; k < num_win_states; k++){
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000d0c:	e01d      	b.n	8000d4a <LCD_Touch_Polling_Demo+0x766>
						            if(winning_states[k] == BOARD_DIMENSION) {
 8000d0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d12:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000d16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d109      	bne.n	8000d32 <LCD_Touch_Polling_Demo+0x74e>
						                winning_numb = players[j];
 8000d1e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000d26:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000d2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
						            }
						            winning_states[k] = 0;
 8000d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d36:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						        for(int k = 0; k < num_win_states; k++){
 8000d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d44:	3301      	adds	r3, #1
 8000d46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000d4a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8000d4e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dbdb      	blt.n	8000d0e <LCD_Touch_Polling_Demo+0x72a>
						    for(int j = 0; j < 2; j++){
 8000d56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000d60:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	f77f aed7 	ble.w	8000b18 <LCD_Touch_Polling_Demo+0x534>
						        }
						    }

						    if(move_count == FULL_BOARD){
 8000d6a:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8000d6e:	2b09      	cmp	r3, #9
 8000d70:	d102      	bne.n	8000d78 <LCD_Touch_Polling_Demo+0x794>
						    	winning_numb = TIE;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
						    }

							// change screen
						    if(winning_numb != NO_WINNER){
 8000d78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d040      	beq.n	8000e04 <LCD_Touch_Polling_Demo+0x820>
						    	LCD_Clear(0, LCD_COLOR_MAGENTA);
 8000d82:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 fb18 	bl	80013bc <LCD_Clear>

						    	switch(winning_numb){
 8000d8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d01a      	beq.n	8000dca <LCD_Touch_Polling_Demo+0x7e6>
 8000d94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	dc1d      	bgt.n	8000dd8 <LCD_Touch_Polling_Demo+0x7f4>
 8000d9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d004      	beq.n	8000dae <LCD_Touch_Polling_Demo+0x7ca>
 8000da4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d007      	beq.n	8000dbc <LCD_Touch_Polling_Demo+0x7d8>
 8000dac:	e014      	b.n	8000dd8 <LCD_Touch_Polling_Demo+0x7f4>
									case PLAYER_X:
										writeWord("X Wins!", 310, 100);
 8000dae:	2264      	movs	r2, #100	; 0x64
 8000db0:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000db4:	4853      	ldr	r0, [pc, #332]	; (8000f04 <LCD_Touch_Polling_Demo+0x920>)
 8000db6:	f000 fc7d 	bl	80016b4 <writeWord>
										break;
 8000dba:	e00d      	b.n	8000dd8 <LCD_Touch_Polling_Demo+0x7f4>
									case PLAYER_O:
										writeWord("O Wins!", 310, 100);
 8000dbc:	2264      	movs	r2, #100	; 0x64
 8000dbe:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000dc2:	4851      	ldr	r0, [pc, #324]	; (8000f08 <LCD_Touch_Polling_Demo+0x924>)
 8000dc4:	f000 fc76 	bl	80016b4 <writeWord>
										break;
 8000dc8:	e006      	b.n	8000dd8 <LCD_Touch_Polling_Demo+0x7f4>
									case TIE:
										writeWord("Tie!", 310, 100);
 8000dca:	2264      	movs	r2, #100	; 0x64
 8000dcc:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000dd0:	484e      	ldr	r0, [pc, #312]	; (8000f0c <LCD_Touch_Polling_Demo+0x928>)
 8000dd2:	f000 fc6f 	bl	80016b4 <writeWord>
										break;
 8000dd6:	bf00      	nop

						    	}
								screen_state = SCREEN_END;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

								TIMER_stop(TIM5_);
 8000dde:	484c      	ldr	r0, [pc, #304]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000de0:	f000 ff62 	bl	8001ca8 <TIMER_stop>
								TIMER_reset(TIM5_);
 8000de4:	484a      	ldr	r0, [pc, #296]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000de6:	f000 ff77 	bl	8001cd8 <TIMER_reset>
								uint32_t game_length = TIMER_get_timer_value(TIM5_);
 8000dea:	4849      	ldr	r0, [pc, #292]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000dec:	f000 ff81 	bl	8001cf2 <TIMER_get_timer_value>
 8000df0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
								printf("game length after reset %ld", game_length);
 8000df4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000df8:	4846      	ldr	r0, [pc, #280]	; (8000f14 <LCD_Touch_Polling_Demo+0x930>)
 8000dfa:	f005 fd7b 	bl	80068f4 <iprintf>
								break;
 8000dfe:	bf00      	nop
 8000e00:	46b5      	mov	sp, r6
 8000e02:	e00a      	b.n	8000e1a <LCD_Touch_Polling_Demo+0x836>
 8000e04:	46b5      	mov	sp, r6
					for(int y = 0; y < 3; y++){
 8000e06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000e10:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	f77f ad24 	ble.w	8000862 <LCD_Touch_Polling_Demo+0x27e>
				for(int x = 0; x < 3; x++){
 8000e1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000e24:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f77f ad16 	ble.w	800085a <LCD_Touch_Polling_Demo+0x276>

//							end check win state
						}
					}
				}
				if(changePlayer) player_turn = !player_turn;
 8000e2e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <LCD_Touch_Polling_Demo+0x864>
 8000e36:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				uint32_t game_length = TIMER_get_timer_value(TIM5_);
 8000e48:	4831      	ldr	r0, [pc, #196]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000e4a:	f000 ff52 	bl	8001cf2 <TIMER_get_timer_value>
 8000e4e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				printf("curr length: %ld", game_length);
 8000e52:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000e56:	4830      	ldr	r0, [pc, #192]	; (8000f18 <LCD_Touch_Polling_Demo+0x934>)
 8000e58:	f005 fd4c 	bl	80068f4 <iprintf>
			else if(screen_state == SCREEN_2P || screen_state == SCREEN_1P){
 8000e5c:	e012      	b.n	8000e84 <LCD_Touch_Polling_Demo+0x8a0>
			}
		else if(screen_state == SCREEN_END){
 8000e5e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d10e      	bne.n	8000e84 <LCD_Touch_Polling_Demo+0x8a0>
			TIMER_stop(TIM5_);
 8000e66:	482a      	ldr	r0, [pc, #168]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000e68:	f000 ff1e 	bl	8001ca8 <TIMER_stop>
			uint32_t game_length = TIMER_get_timer_value(TIM5_);
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000e6e:	f000 ff40 	bl	8001cf2 <TIMER_get_timer_value>
 8000e72:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
			TIMER_reset(TIM5_);
 8000e76:	4826      	ldr	r0, [pc, #152]	; (8000f10 <LCD_Touch_Polling_Demo+0x92c>)
 8000e78:	f000 ff2e 	bl	8001cd8 <TIMER_reset>
 8000e7c:	e002      	b.n	8000e84 <LCD_Touch_Polling_Demo+0x8a0>

		}

		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000e7e:	4827      	ldr	r0, [pc, #156]	; (8000f1c <LCD_Touch_Polling_Demo+0x938>)
 8000e80:	f005 fd9e 	bl	80069c0 <puts>
		}

//		deal with button reset
		int scheduledEvents = getScheduledEvents();
 8000e84:	f000 fdd6 	bl	8001a34 <getScheduledEvents>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

		if(scheduledEvents && RESET_GAME_SCREEN_EVENT){
 8000e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f43f ac6e 	beq.w	8000774 <LCD_Touch_Polling_Demo+0x190>
			LCD_Clear(0, LCD_COLOR_CYAN);
 8000e98:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 fa8d 	bl	80013bc <LCD_Clear>
			writeWord("Resetting Game", 260, 100);
 8000ea2:	2264      	movs	r2, #100	; 0x64
 8000ea4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000ea8:	481d      	ldr	r0, [pc, #116]	; (8000f20 <LCD_Touch_Polling_Demo+0x93c>)
 8000eaa:	f000 fc03 	bl	80016b4 <writeWord>
			HAL_Delay(500);
 8000eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb2:	f002 f951 	bl	8003158 <HAL_Delay>
			writeWord(".", 425, 100);
 8000eb6:	2264      	movs	r2, #100	; 0x64
 8000eb8:	f240 11a9 	movw	r1, #425	; 0x1a9
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <LCD_Touch_Polling_Demo+0x940>)
 8000ebe:	f000 fbf9 	bl	80016b4 <writeWord>
			HAL_Delay(500);
 8000ec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec6:	f002 f947 	bl	8003158 <HAL_Delay>
			writeWord(".", 435, 100);
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <LCD_Touch_Polling_Demo+0x940>)
 8000ed2:	f000 fbef 	bl	80016b4 <writeWord>
			HAL_Delay(500);
 8000ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eda:	f002 f93d 	bl	8003158 <HAL_Delay>
			writeWord(".", 445, 100);
 8000ede:	2264      	movs	r2, #100	; 0x64
 8000ee0:	f240 11bd 	movw	r1, #445	; 0x1bd
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <LCD_Touch_Polling_Demo+0x940>)
 8000ee6:	f000 fbe5 	bl	80016b4 <writeWord>
			HAL_Delay(500);
 8000eea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eee:	f002 f933 	bl	8003158 <HAL_Delay>
			drawMenu();
 8000ef2:	f000 fb51 	bl	8001598 <drawMenu>
			removeSchedulerEvent(RESET_GAME_SCREEN_EVENT);
 8000ef6:	2040      	movs	r0, #64	; 0x40
 8000ef8:	f000 fdba 	bl	8001a70 <removeSchedulerEvent>
			screen_state = SCREEN_MENU;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	while (1) {
 8000f02:	e437      	b.n	8000774 <LCD_Touch_Polling_Demo+0x190>
 8000f04:	080076fc 	.word	0x080076fc
 8000f08:	08007704 	.word	0x08007704
 8000f0c:	0800770c 	.word	0x0800770c
 8000f10:	40000c00 	.word	0x40000c00
 8000f14:	08007714 	.word	0x08007714
 8000f18:	08007730 	.word	0x08007730
 8000f1c:	08007744 	.word	0x08007744
 8000f20:	08007754 	.word	0x08007754
 8000f24:	08007764 	.word	0x08007764

08000f28 <init_button_application>:
		}

	}
}

void init_button_application(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	init_button();
 8000f2c:	f000 f83c 	bl	8000fa8 <init_button>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <init_button_interrupt_application>:

void init_RNG_application(){
	RNG_Init();
}

void init_button_interrupt_application(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	interrupt_init_button();
 8000f38:	f000 f870 	bl	800101c <interrupt_init_button>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000f44:	2006      	movs	r0, #6
 8000f46:	f002 fa72 	bl	800342e <HAL_NVIC_DisableIRQ>
    addSchedulerEvent(RESET_GAME_SCREEN_EVENT);
 8000f4a:	2040      	movs	r0, #64	; 0x40
 8000f4c:	f000 fd7e 	bl	8001a4c <addSchedulerEvent>
    printf("Resetting Screen!");
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <EXTI0_IRQHandler+0x34>)
 8000f52:	f005 fccf 	bl	80068f4 <iprintf>
    HAL_EXTI_ClearPending(&hexti, GPIO_MODE_IT_RISING);
 8000f56:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <EXTI0_IRQHandler+0x38>)
 8000f5c:	f002 fa90 	bl	8003480 <HAL_EXTI_ClearPending>
    __HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_LINE_0); // ??? or __HAL_GPIO_EXTI_CLEAR_IT()
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <EXTI0_IRQHandler+0x3c>)
 8000f62:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f66:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f68:	2006      	movs	r0, #6
 8000f6a:	f002 fa52 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800776c 	.word	0x0800776c
 8000f78:	200000a4 	.word	0x200000a4
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <TIM5_IRQHandler>:

void TIM5_IRQHandler(){ //??? should this be enabled or no
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f002 fa52 	bl	800342e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_ClearPendingIRQ(TIM5_IRQn);
 8000f8a:	2032      	movs	r0, #50	; 0x32
 8000f8c:	f002 fa69 	bl	8003462 <HAL_NVIC_ClearPendingIRQ>
    IRQ_TIMx_clear_pending(UIF_INTERRUPT_FLAG, TIM5_);
 8000f90:	4904      	ldr	r1, [pc, #16]	; (8000fa4 <TIM5_IRQHandler+0x24>)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 ff0c 	bl	8001db0 <IRQ_TIMx_clear_pending>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f98:	2032      	movs	r0, #50	; 0x32
 8000f9a:	f002 fa3a 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40000c00 	.word	0x40000c00

08000fa8 <init_button>:
#include "Button_Driver.h"

void init_button(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef configure_Button = {};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
	enable_clock();
 8000fbc:	f000 f814 	bl	8000fe8 <enable_clock>

	configure_Button.Pin = GPIO_PIN_0; // ??? NEW pin number is zero, but 0x1?
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
	configure_Button.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
	configure_Button.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
	configure_Button.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
	// configure_Button.Alternate = GPIO_MODE_OUTPUT_PP; //??? should I not configure the alt register?

	HAL_GPIO_Init(GPIOA, &configure_Button);
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <init_button+0x3c>)
 8000fd6:	f002 fa6b 	bl	80034b0 <HAL_GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <enable_clock>:

void enable_clock(){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <enable_clock+0x30>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <enable_clock+0x30>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <enable_clock+0x30>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <interrupt_init_button>:

//	shouldnt get here
	return false;
}

void interrupt_init_button(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef configure_Button = {};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
	enable_clock();
 8001030:	f7ff ffda 	bl	8000fe8 <enable_clock>

	configure_Button.Pin = GPIO_PIN_0; // ??? pin can't be zero?
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
	configure_Button.Mode = GPIO_MODE_IT_RISING;
 8001038:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103c:	60bb      	str	r3, [r7, #8]
	configure_Button.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	613b      	str	r3, [r7, #16]
	configure_Button.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
	// configure_Button.GPIO_PinConfig.OPType = GPIO_OTYPER_PUSH_PULL;
	// configure_Button.GPIO_PinConfig.PinInterruptMode = GPIO_INTERRUPT_MODE_FALLING_AND_RISING_EDGE;

	HAL_GPIO_Init(GPIOA, &configure_Button);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <interrupt_init_button+0x44>)
 800104c:	f002 fa30 	bl	80034b0 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001050:	2006      	movs	r0, #6
 8001052:	f002 f9de 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020000 	.word	0x40020000

08001064 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b5a      	ldr	r3, [pc, #360]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a59      	ldr	r2, [pc, #356]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <LCD_GPIO_Init+0x174>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <LCD_GPIO_Init+0x174>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a44      	ldr	r2, [pc, #272]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <LCD_GPIO_Init+0x174>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a36      	ldr	r2, [pc, #216]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <LCD_GPIO_Init+0x174>)
 800111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <LCD_GPIO_Init+0x174>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800112e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001132:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001140:	230e      	movs	r3, #14
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <LCD_GPIO_Init+0x178>)
 800114c:	f002 f9b0 	bl	80034b0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001150:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001154:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4820      	ldr	r0, [pc, #128]	; (80011e0 <LCD_GPIO_Init+0x17c>)
 800115e:	f002 f9a7 	bl	80034b0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001162:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <LCD_GPIO_Init+0x180>)
 8001170:	f002 f99e 	bl	80034b0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001174:	2348      	movs	r3, #72	; 0x48
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	481a      	ldr	r0, [pc, #104]	; (80011e8 <LCD_GPIO_Init+0x184>)
 8001180:	f002 f996 	bl	80034b0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <LCD_GPIO_Init+0x188>)
 8001192:	f002 f98d 	bl	80034b0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001196:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800119a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4813      	ldr	r0, [pc, #76]	; (80011f0 <LCD_GPIO_Init+0x18c>)
 80011a4:	f002 f984 	bl	80034b0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80011a8:	2303      	movs	r3, #3
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80011ac:	2309      	movs	r3, #9
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <LCD_GPIO_Init+0x17c>)
 80011b8:	f002 f97a 	bl	80034b0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80011bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <LCD_GPIO_Init+0x18c>)
 80011ca:	f002 f971 	bl	80034b0 <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40021800 	.word	0x40021800

080011f4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001202:	23f0      	movs	r3, #240	; 0xf0
 8001204:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800120a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800120e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001222:	2305      	movs	r3, #5
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <LTCD_Layer_Init+0x78>)
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001230:	23f0      	movs	r3, #240	; 0xf0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001234:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <LTCD_Layer_Init+0x7c>)
 8001256:	f003 fcf1 	bl	8004c3c <HAL_LTDC_ConfigLayer>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001260:	f000 f97e 	bl	8001560 <LCD_Error_Handler>
	}
}
 8001264:	bf00      	nop
 8001266:	3740      	adds	r7, #64	; 0x40
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000188 	.word	0x20000188
 8001270:	200000ac 	.word	0x200000ac

08001274 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <LTCD__Init+0xb0>)
 800127a:	4a2b      	ldr	r2, [pc, #172]	; (8001328 <LTCD__Init+0xb4>)
 800127c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <LTCD__Init+0xb0>)
 8001280:	2209      	movs	r2, #9
 8001282:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <LTCD__Init+0xb0>)
 8001286:	2201      	movs	r2, #1
 8001288:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <LTCD__Init+0xb0>)
 800128c:	221d      	movs	r2, #29
 800128e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <LTCD__Init+0xb0>)
 8001292:	2203      	movs	r2, #3
 8001294:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <LTCD__Init+0xb0>)
 8001298:	f240 120d 	movw	r2, #269	; 0x10d
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <LTCD__Init+0xb0>)
 80012a0:	f240 1243 	movw	r2, #323	; 0x143
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <LTCD__Init+0xb0>)
 80012a8:	f240 1217 	movw	r2, #279	; 0x117
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <LTCD__Init+0xb0>)
 80012b0:	f240 1247 	movw	r2, #327	; 0x147
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <LTCD__Init+0xb0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <LTCD__Init+0xb0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <LTCD__Init+0xb0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <LTCD__Init+0xb8>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <LTCD__Init+0xb8>)
 80012d6:	22c0      	movs	r2, #192	; 0xc0
 80012d8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <LTCD__Init+0xb8>)
 80012dc:	2204      	movs	r2, #4
 80012de:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <LTCD__Init+0xb8>)
 80012e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <LTCD__Init+0xb8>)
 80012ea:	f004 fb01 	bl	80058f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <LTCD__Init+0xb0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <LTCD__Init+0xb0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <LTCD__Init+0xb0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <LTCD__Init+0xb0>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001306:	f7ff fead 	bl	8001064 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <LTCD__Init+0xb0>)
 800130c:	f003 fbc6 	bl	8004a9c <HAL_LTDC_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001316:	f000 f923 	bl	8001560 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800131a:	f000 fd5f 	bl	8001ddc <ili9341_Init>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000ac 	.word	0x200000ac
 8001328:	40016800 	.word	0x40016800
 800132c:	20000154 	.word	0x20000154

08001330 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
 800133a:	460b      	mov	r3, r1
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	461a      	mov	r2, r3
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4413      	add	r3, r2
 8001352:	4905      	ldr	r1, [pc, #20]	; (8001368 <LCD_Draw_Pixel+0x38>)
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000188 	.word	0x20000188

0800136c <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4603      	mov	r3, r0
 8001380:	80bb      	strh	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	81fb      	strh	r3, [r7, #14]
 800138e:	e00b      	b.n	80013a8 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001390:	89fa      	ldrh	r2, [r7, #14]
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	b299      	uxth	r1, r3
 8001398:	883a      	ldrh	r2, [r7, #0]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ffc7 	bl	8001330 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	3301      	adds	r3, #1
 80013a6:	81fb      	strh	r3, [r7, #14]
 80013a8:	89fa      	ldrh	r2, [r7, #14]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3ef      	bcc.n	8001390 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
	...

080013bc <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10e      	bne.n	80013f0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e007      	b.n	80013e8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80013d8:	4908      	ldr	r1, [pc, #32]	; (80013fc <LCD_Clear+0x40>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	88ba      	ldrh	r2, [r7, #4]
 80013de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80013ee:	d3f3      	bcc.n	80013d8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000188 	.word	0x20000188

08001400 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <LCD_SetTextColor+0x1c>)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	8013      	strh	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	20000000 	.word	0x20000000

08001420 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <LCD_SetFont+0x1c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000184 	.word	0x20000184

08001440 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	603a      	str	r2, [r7, #0]
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	460b      	mov	r3, r1
 800144e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e04c      	b.n	80014f8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	e03f      	b.n	80014e4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <LCD_Draw_Char+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	889b      	ldrh	r3, [r3, #4]
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <LCD_Draw_Char+0xd4>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	b29b      	uxth	r3, r3
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	409a      	lsls	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	fa42 f303 	asr.w	r3, r2, r3
 800148c:	400b      	ands	r3, r1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <LCD_Draw_Char+0x5c>
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <LCD_Draw_Char+0xd0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d920      	bls.n	80014de <LCD_Draw_Char+0x9e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	fa42 f303 	asr.w	r3, r2, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d104      	bne.n	80014c0 <LCD_Draw_Char+0x80>
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <LCD_Draw_Char+0xd0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d80e      	bhi.n	80014de <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	4413      	add	r3, r2
 80014c8:	b298      	uxth	r0, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4a10      	ldr	r2, [pc, #64]	; (8001518 <LCD_Draw_Char+0xd8>)
 80014d6:	8812      	ldrh	r2, [r2, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff ff29 	bl	8001330 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <LCD_Draw_Char+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d3b8      	bcc.n	8001464 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <LCD_Draw_Char+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	88db      	ldrh	r3, [r3, #6]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4293      	cmp	r3, r2
 8001504:	d3ab      	bcc.n	800145e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000184 	.word	0x20000184
 8001514:	aaaaaaab 	.word	0xaaaaaaab
 8001518:	20000000 	.word	0x20000000

0800151c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	460b      	mov	r3, r1
 8001528:	80bb      	strh	r3, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	3b20      	subs	r3, #32
 8001532:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <LCD_DisplayChar+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <LCD_DisplayChar+0x40>)
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	88c9      	ldrh	r1, [r1, #6]
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	441a      	add	r2, r3
 800154a:	88b9      	ldrh	r1, [r7, #4]
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff76 	bl	8001440 <LCD_Draw_Char>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000184 	.word	0x20000184

08001560 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <LCD_Error_Handler+0x8>

0800156a <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800156e:	f001 f9a1 	bl	80028b4 <STMPE811_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b02      	cmp	r3, #2
 8001576:	d000      	beq.n	800157a <InitializeLCDTouch+0x10>
  {
	 for(;;); // Hang code due to error in initialzation
 8001578:	e7fe      	b.n	8001578 <InitializeLCDTouch+0xe>
  }
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f001 fa4c 	bl	8002a24 <STMPE811_ReadTouch>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <drawMenu>:
#include "Menu.h"




void drawMenu(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
    LCD_Clear(0, LCD_COLOR_WHITE);
 800159e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff ff0a 	bl	80013bc <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ff29 	bl	8001400 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 80015ae:	483e      	ldr	r0, [pc, #248]	; (80016a8 <drawMenu+0x110>)
 80015b0:	f7ff ff36 	bl	8001420 <LCD_SetFont>
	LCD_DisplayChar(90,270,'T');
 80015b4:	2254      	movs	r2, #84	; 0x54
 80015b6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015ba:	205a      	movs	r0, #90	; 0x5a
 80015bc:	f7ff ffae 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(100,270,'i');
 80015c0:	2269      	movs	r2, #105	; 0x69
 80015c2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015c6:	2064      	movs	r0, #100	; 0x64
 80015c8:	f7ff ffa8 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(110,270,'c');
 80015cc:	2263      	movs	r2, #99	; 0x63
 80015ce:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015d2:	206e      	movs	r0, #110	; 0x6e
 80015d4:	f7ff ffa2 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(120,270,'-');
 80015d8:	222d      	movs	r2, #45	; 0x2d
 80015da:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015de:	2078      	movs	r0, #120	; 0x78
 80015e0:	f7ff ff9c 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(130,270,'T');
 80015e4:	2254      	movs	r2, #84	; 0x54
 80015e6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015ea:	2082      	movs	r0, #130	; 0x82
 80015ec:	f7ff ff96 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(140,270,'a');
 80015f0:	2261      	movs	r2, #97	; 0x61
 80015f2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015f6:	208c      	movs	r0, #140	; 0x8c
 80015f8:	f7ff ff90 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(155,270,'c');
 80015fc:	2263      	movs	r2, #99	; 0x63
 80015fe:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001602:	209b      	movs	r0, #155	; 0x9b
 8001604:	f7ff ff8a 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(165,270,'T');
 8001608:	2254      	movs	r2, #84	; 0x54
 800160a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800160e:	20a5      	movs	r0, #165	; 0xa5
 8001610:	f7ff ff84 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(175,270,'o');
 8001614:	226f      	movs	r2, #111	; 0x6f
 8001616:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800161a:	20af      	movs	r0, #175	; 0xaf
 800161c:	f7ff ff7e 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(190,270,'e');
 8001620:	2265      	movs	r2, #101	; 0x65
 8001622:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001626:	20be      	movs	r0, #190	; 0xbe
 8001628:	f7ff ff78 	bl	800151c <LCD_DisplayChar>

	LCD_DisplayChar(172,290,'0');
 800162c:	2230      	movs	r2, #48	; 0x30
 800162e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001632:	20ac      	movs	r0, #172	; 0xac
 8001634:	f7ff ff72 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(187,290,'_');
 8001638:	225f      	movs	r2, #95	; 0x5f
 800163a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800163e:	20bb      	movs	r0, #187	; 0xbb
 8001640:	f7ff ff6c 	bl	800151c <LCD_DisplayChar>
	LCD_DisplayChar(202,290,'O');
 8001644:	224f      	movs	r2, #79	; 0x4f
 8001646:	f44f 7191 	mov.w	r1, #290	; 0x122
 800164a:	20ca      	movs	r0, #202	; 0xca
 800164c:	f7ff ff66 	bl	800151c <LCD_DisplayChar>

    writeWord("Player 1", 310, 100);
 8001650:	2264      	movs	r2, #100	; 0x64
 8001652:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <drawMenu+0x114>)
 8001658:	f000 f82c 	bl	80016b4 <writeWord>
    writeWord("Player 2", 310, 150);
 800165c:	2296      	movs	r2, #150	; 0x96
 800165e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <drawMenu+0x118>)
 8001664:	f000 f826 	bl	80016b4 <writeWord>

//    player 1 box
    struct Point boxTopLeft;
    boxTopLeft.x = 305;
 8001668:	f240 1331 	movw	r3, #305	; 0x131
 800166c:	613b      	str	r3, [r7, #16]
    boxTopLeft.y = 95;
 800166e:	235f      	movs	r3, #95	; 0x5f
 8001670:	617b      	str	r3, [r7, #20]
    drawBox(&boxTopLeft, 30, 108, LCD_COLOR_BLACK);
 8001672:	4638      	mov	r0, r7
 8001674:	f107 0110 	add.w	r1, r7, #16
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	236c      	movs	r3, #108	; 0x6c
 800167e:	221e      	movs	r2, #30
 8001680:	f000 f847 	bl	8001712 <drawBox>

//    player 2 box
    boxTopLeft.x = 305;
 8001684:	f240 1331 	movw	r3, #305	; 0x131
 8001688:	613b      	str	r3, [r7, #16]
    boxTopLeft.y = 145;
 800168a:	2391      	movs	r3, #145	; 0x91
 800168c:	617b      	str	r3, [r7, #20]
    drawBox(&boxTopLeft, 30, 108, LCD_COLOR_BLACK);
 800168e:	4638      	mov	r0, r7
 8001690:	f107 0110 	add.w	r1, r7, #16
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	236c      	movs	r3, #108	; 0x6c
 800169a:	221e      	movs	r2, #30
 800169c:	f000 f839 	bl	8001712 <drawBox>

}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000004 	.word	0x20000004
 80016ac:	08007780 	.word	0x08007780
 80016b0:	0800778c 	.word	0x0800778c

080016b4 <writeWord>:

void writeWord(char* word, int start_x, int start_y){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
    int letter_distance = 12;
 80016c0:	230c      	movs	r3, #12
 80016c2:	617b      	str	r3, [r7, #20]

    char c = word[0];
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	77fb      	strb	r3, [r7, #31]
    int char_i = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
    while(c != '\0'){
 80016ce:	e018      	b.n	8001702 <writeWord+0x4e>
        LCD_DisplayChar(start_x + (char_i * letter_distance), start_y, c);
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	fb12 f303 	smulbb	r3, r2, r3
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	b291      	uxth	r1, r2
 80016ea:	7ffa      	ldrb	r2, [r7, #31]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff15 	bl	800151c <LCD_DisplayChar>
        char_i++;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
        c = word[char_i];
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	77fb      	strb	r3, [r7, #31]
    while(c != '\0'){
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e3      	bne.n	80016d0 <writeWord+0x1c>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <drawBox>:

struct Box_Boundaries drawBox(struct Point* top_left, int vert_size, int horz_size, int color){
 8001712:	b590      	push	{r4, r7, lr}
 8001714:	b08b      	sub	sp, #44	; 0x2c
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
    struct Box_Boundaries bounds;
    bounds.left_x = top_left->x;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
    bounds.top_y = top_left->y;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61fb      	str	r3, [r7, #28]
    struct Point bottom_right;
    bottom_right.x = top_left->x + horz_size;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
    bottom_right.y = top_left->y + vert_size;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
    bounds.bottom_y = bottom_right.y;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    bounds.right_x = bottom_right.x;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	623b      	str	r3, [r7, #32]

    LCD_Draw_Vertical_Line(top_left->x, top_left->y, vert_size, color);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b298      	uxth	r0, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	b299      	uxth	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	b29a      	uxth	r2, r3
 8001758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175a:	b29b      	uxth	r3, r3
 800175c:	f7ff fe06 	bl	800136c <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(bottom_right.x, top_left->y, vert_size, color);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	b298      	uxth	r0, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	b299      	uxth	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	b29a      	uxth	r2, r3
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001770:	b29b      	uxth	r3, r3
 8001772:	f7ff fdfb 	bl	800136c <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(top_left->x, top_left->y, horz_size, color);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	f000 f813 	bl	80017ac <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(top_left->x, bottom_right.y, horz_size + 1, color);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	6979      	ldr	r1, [r7, #20]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001792:	f000 f80b 	bl	80017ac <LCD_Draw_Horizontal_Line>
    return bounds;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	461c      	mov	r4, r3
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	372c      	adds	r7, #44	; 0x2c
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(int x, int y, int len, int color){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < len; i++) LCD_Draw_Vertical_Line(x + i, y, 1, color);
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e00f      	b.n	80017e0 <LCD_Draw_Horizontal_Line+0x34>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b298      	uxth	r0, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	b299      	uxth	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2201      	movs	r2, #1
 80017d6:	f7ff fdc9 	bl	800136c <LCD_Draw_Vertical_Line>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbeb      	blt.n	80017c0 <LCD_Draw_Horizontal_Line+0x14>
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <Draw_Game>:

void Draw_Game(){
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
    LCD_Draw_Horizontal_Line(0, 107, 240, LCD_COLOR_BLACK);
 80017f6:	2300      	movs	r3, #0
 80017f8:	22f0      	movs	r2, #240	; 0xf0
 80017fa:	216b      	movs	r1, #107	; 0x6b
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff ffd5 	bl	80017ac <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(0, 214, 240, LCD_COLOR_BLACK);
 8001802:	2300      	movs	r3, #0
 8001804:	22f0      	movs	r2, #240	; 0xf0
 8001806:	21d6      	movs	r1, #214	; 0xd6
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ffcf 	bl	80017ac <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(80, 0, 320, LCD_COLOR_BLACK);
 800180e:	2300      	movs	r3, #0
 8001810:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001814:	2100      	movs	r1, #0
 8001816:	2050      	movs	r0, #80	; 0x50
 8001818:	f7ff fda8 	bl	800136c <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(160, 0, 320, LCD_COLOR_BLACK);
 800181c:	2300      	movs	r3, #0
 800181e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001822:	2100      	movs	r1, #0
 8001824:	20a0      	movs	r0, #160	; 0xa0
 8001826:	f7ff fda1 	bl	800136c <LCD_Draw_Vertical_Line>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <Draw_Move>:

void Draw_Move(bool player, struct Box_Boundaries box){
 8001830:	b084      	sub	sp, #16
 8001832:	b590      	push	{r4, r7, lr}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	4604      	mov	r4, r0
 800183a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800183e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001842:	4623      	mov	r3, r4
 8001844:	71fb      	strb	r3, [r7, #7]
	LCD_SetFont(&Font16x24);
 8001846:	481f      	ldr	r0, [pc, #124]	; (80018c4 <Draw_Move+0x94>)
 8001848:	f7ff fdea 	bl	8001420 <LCD_SetFont>
	int x_pos = box.left_x - 8 + (box.right_x - box.left_x) / 2; //8 account for font size to center
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f1a3 0208 	sub.w	r2, r3, #8
 8001852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	0fd9      	lsrs	r1, r3, #31
 800185a:	440b      	add	r3, r1
 800185c:	105b      	asrs	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
	int y_pos = box.bottom_y + (box.top_y - box.bottom_y) / 2;
 8001862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	1acb      	subs	r3, r1, r3
 800186a:	0fd9      	lsrs	r1, r3, #31
 800186c:	440b      	add	r3, r1
 800186e:	105b      	asrs	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
	if (player == 0) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'X');
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <Draw_Move+0x68>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	b298      	uxth	r0, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	b29b      	uxth	r3, r3
 8001888:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800188c:	b29b      	uxth	r3, r3
 800188e:	2258      	movs	r2, #88	; 0x58
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fe43 	bl	800151c <LCD_DisplayChar>
	else if (player == 1) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'O');
}
 8001896:	e00d      	b.n	80018b4 <Draw_Move+0x84>
	else if (player == 1) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'O');
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <Draw_Move+0x84>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	b298      	uxth	r0, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	224f      	movs	r2, #79	; 0x4f
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff fe34 	bl	800151c <LCD_DisplayChar>
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80018be:	b004      	add	sp, #16
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000004 	.word	0x20000004

080018c8 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f043 0204 	orr.w	r2, r3, #4
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_RNG_IsActiveFlag_DRDY>:
  * @rmtoll SR           DRDY          LL_RNG_IsActiveFlag_DRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DRDY(const RNG_TypeDef *RNGx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <LL_RNG_IsActiveFlag_DRDY+0x18>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <LL_RNG_IsActiveFlag_DRDY+0x1a>
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_RNG_IsActiveFlag_CEIS>:
  * @rmtoll SR           CEIS          LL_RNG_IsActiveFlag_CEIS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_CEIS(const RNG_TypeDef *RNGx)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_CEIS) == (RNG_SR_CEIS)) ? 1UL : 0UL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d101      	bne.n	8001926 <LL_RNG_IsActiveFlag_CEIS+0x18>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_RNG_IsActiveFlag_CEIS+0x1a>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_RNG_IsActiveFlag_SEIS>:
  * @rmtoll SR           SEIS          LL_RNG_IsActiveFlag_SEIS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(const RNG_TypeDef *RNGx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d101      	bne.n	800194c <LL_RNG_IsActiveFlag_SEIS+0x18>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_RNG_IsActiveFlag_SEIS+0x1a>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RNG_EnableIT>:
  * @rmtoll CR           IE            LL_RNG_EnableIT
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_EnableIT(RNG_TypeDef *RNGx)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f043 0208 	orr.w	r2, r3, #8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RNG_ReadRandData32>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData32
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(const RNG_TypeDef *RNGx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <RNG_Init>:
 *
 *  Created on: Apr 28, 2024
 *      Author: tyler
 */

void RNG_Init(){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
    __HAL_RCC_RNG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <RNG_Init+0x38>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <RNG_Init+0x38>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	6353      	str	r3, [r2, #52]	; 0x34
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <RNG_Init+0x38>)
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
    LL_RNG_Enable(RNG);
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <RNG_Init+0x3c>)
 80019b8:	f7ff ff86 	bl	80018c8 <LL_RNG_Enable>
    LL_RNG_EnableIT(RNG);
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <RNG_Init+0x3c>)
 80019be:	f7ff ffcc 	bl	800195a <LL_RNG_EnableIT>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	50060800 	.word	0x50060800

080019d4 <Get_Random_Number>:

uint32_t Get_Random_Number(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
    bool RNG_error_enabled = LL_RNG_IsActiveFlag_CEIS(RNG) || LL_RNG_IsActiveFlag_SEIS(RNG);
 80019da:	4815      	ldr	r0, [pc, #84]	; (8001a30 <Get_Random_Number+0x5c>)
 80019dc:	f7ff ff97 	bl	800190e <LL_RNG_IsActiveFlag_CEIS>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <Get_Random_Number+0x1e>
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <Get_Random_Number+0x5c>)
 80019e8:	f7ff ffa4 	bl	8001934 <LL_RNG_IsActiveFlag_SEIS>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <Get_Random_Number+0x22>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <Get_Random_Number+0x24>
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]

    if(!RNG_error_enabled && LL_RNG_IsActiveFlag_DRDY(RNG)){
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <Get_Random_Number+0x50>
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <Get_Random_Number+0x5c>)
 8001a10:	f7ff ff6a 	bl	80018e8 <LL_RNG_IsActiveFlag_DRDY>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <Get_Random_Number+0x50>
        return LL_RNG_ReadRandData32(RNG);
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <Get_Random_Number+0x5c>)
 8001a1c:	f7ff ffad 	bl	800197a <LL_RNG_ReadRandData32>
 8001a20:	4603      	mov	r3, r0
 8001a22:	e001      	b.n	8001a28 <Get_Random_Number+0x54>
    }

    return -1; //not ready for reading
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	50060800 	.word	0x50060800

08001a34 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <getScheduledEvents+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20025988 	.word	0x20025988

08001a4c <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_number){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    scheduledEvents |= event_number;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <addSchedulerEvent+0x20>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <addSchedulerEvent+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20025988 	.word	0x20025988

08001a70 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event_number){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    scheduledEvents &= ~event_number;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <removeSchedulerEvent+0x24>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4013      	ands	r3, r2
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <removeSchedulerEvent+0x24>)
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20025988 	.word	0x20025988

08001a98 <TIMER_init>:
 *      Author: tyler
 */
#include "Timer_Driver.h"


void TIMER_init(Timer_Handle_t* timer_handle){
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	uint32_t temp;

//	clock div
	temp = timer_handle->timer_configuration.clock_division << CLOCK_DIVISION_OFFSET;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x3 << CLOCK_DIVISION_OFFSET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ab6:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

//	auto reload value
	temp = timer_handle->timer_configuration.auto_reload_value;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_ARR = 0; // clear reg
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	timer_handle->gp_timer->TIMx_ARR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c

// master mode
	temp = timer_handle->timer_configuration.master_mode << MASTER_MODE_OFFSET;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR2 &= ~(0x3 << MASTER_MODE_OFFSET);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001af4:	605a      	str	r2, [r3, #4]
	timer_handle->gp_timer->TIMx_CR2 |= temp << MASTER_MODE_OFFSET;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	011a      	lsls	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]

// prescaler
	temp = timer_handle->timer_configuration.prescaler;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	8a1b      	ldrh	r3, [r3, #16]
 8001b0c:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_PSC = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
	timer_handle->gp_timer->TIMx_PSC = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28

// center aligned mode
	temp = timer_handle->timer_configuration.center_aligned_mode << CENTER_ALIGNED_MODE_SELECTION_OFFSET;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	015b      	lsls	r3, r3, #5
 8001b24:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x3 << CENTER_ALIGNED_MODE_SELECTION_OFFSET);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b34:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

// auto reload buffer enable
	temp = timer_handle->timer_configuration.auto_reload_buffer_enable << AUTORELOAD_PRELOAD_ENABLE_OFFSET;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7e1b      	ldrb	r3, [r3, #24]
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << AUTORELOAD_PRELOAD_ENABLE_OFFSET);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b5c:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

// timer count down mode enable
	temp = timer_handle->timer_configuration.timer_count_down_mode_enable << DIRECTION_MODE_OFFSET;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7e5b      	ldrb	r3, [r3, #25]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << DIRECTION_MODE_OFFSET);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0210 	bic.w	r2, r2, #16
 8001b84:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

// interrupt update mode
	temp = timer_handle->timer_configuration.interrupt_update_enable << UPDATE_INTERRUPT_ENABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7e9b      	ldrb	r3, [r3, #26]
 8001b9a:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_DIER &= ~(0x1 << UPDATE_INTERRUPT_ENABLE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]
	timer_handle->gp_timer->TIMx_DIER |= temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

// Update Disable
	temp = timer_handle->timer_configuration.update_event_disable << UPDATE_DISABLE_OFFSET;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7edb      	ldrb	r3, [r3, #27]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << UPDATE_DISABLE_OFFSET);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0202 	bic.w	r2, r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

// One Pulse Mode
	temp = timer_handle->timer_configuration.one_pulse_mode_enable << ONE_PULSE_MODE_OFFSET;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7f1b      	ldrb	r3, [r3, #28]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << ONE_PULSE_MODE_OFFSET);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0208 	bic.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <TIMER_clock_control>:

void TIMER_clock_control(GPTIMR_RegDef_t* gp_timer, uint8_t enable_or_disable){
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	if (gp_timer == TIM5_){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <TIMER_clock_control+0x58>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d11a      	bne.n	8001c62 <TIMER_clock_control+0x4a>
		if (enable_or_disable == ENABLE) __HAL_RCC_TIM5_CLK_ENABLE();
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10e      	bne.n	8001c50 <TIMER_clock_control+0x38>
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <TIMER_clock_control+0x5c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <TIMER_clock_control+0x5c>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <TIMER_clock_control+0x5c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
		else if (enable_or_disable == DISABLE) __HAL_RCC_TIM5_CLK_DISABLE();
	}
}
 8001c4e:	e008      	b.n	8001c62 <TIMER_clock_control+0x4a>
		else if (enable_or_disable == DISABLE) __HAL_RCC_TIM5_CLK_DISABLE();
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <TIMER_clock_control+0x4a>
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <TIMER_clock_control+0x5c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <TIMER_clock_control+0x5c>)
 8001c5c:	f023 0308 	bic.w	r3, r3, #8
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40000c00 	.word	0x40000c00
 8001c74:	40023800 	.word	0x40023800

08001c78 <TIMER_start>:

void TIMER_start(GPTIMR_RegDef_t* gp_timer){
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	temp = ENABLE << ENABLE_TIMER_OFFSET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
	gp_timer->TIMx_CR1 &= ~(0x1 << ENABLE_TIMER_OFFSET);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 0201 	bic.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	601a      	str	r2, [r3, #0]
	gp_timer->TIMx_CR1 |= temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	601a      	str	r2, [r3, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <TIMER_stop>:

void TIMER_stop(GPTIMR_RegDef_t* gp_timer){
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	
	temp = DISABLE << ENABLE_TIMER_OFFSET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
	gp_timer->TIMx_CR1 &= ~(0x1 << ENABLE_TIMER_OFFSET);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 0201 	bic.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
	gp_timer->TIMx_CR1 |= temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <TIMER_reset>:

void TIMER_reset(GPTIMR_RegDef_t* gp_timer){
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	gp_timer->TIMx_CNT = 0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <TIMER_get_timer_value>:

uint32_t TIMER_get_timer_value(GPTIMR_RegDef_t* gp_timer){
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return gp_timer->TIMx_CNT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <TIMER_interrupt_control>:

void TIMER_interrupt_control(GPTIMR_RegDef_t* gp_timer, uint8_t enable_or_disable){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
	if (gp_timer == TIM5_){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <TIMER_interrupt_control+0x38>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10c      	bne.n	8001d3a <TIMER_interrupt_control+0x2e>
		if (enable_or_disable == ENABLE) HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d103      	bne.n	8001d2e <TIMER_interrupt_control+0x22>
 8001d26:	2032      	movs	r0, #50	; 0x32
 8001d28:	f001 fb73 	bl	8003412 <HAL_NVIC_EnableIRQ>
		else if(enable_or_disable == DISABLE) HAL_NVIC_DisableIRQ(TIM5_IRQn);
	}
}
 8001d2c:	e005      	b.n	8001d3a <TIMER_interrupt_control+0x2e>
		else if(enable_or_disable == DISABLE) HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <TIMER_interrupt_control+0x2e>
 8001d34:	2032      	movs	r0, #50	; 0x32
 8001d36:	f001 fb7a 	bl	800342e <HAL_NVIC_DisableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40000c00 	.word	0x40000c00

08001d48 <LED_TIMER5_init>:


// TIMER 5
void LED_TIMER5_init(){
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b090      	sub	sp, #64	; 0x40
 8001d4c:	af00      	add	r7, sp, #0
    Timer_Handle_t TIM5_handle;
    TIM5_handle.gp_timer = TIM5_;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <LED_TIMER5_init+0x64>)
 8001d50:	623b      	str	r3, [r7, #32]
    GPTimer_Config_t TIM5_config;

    TIM5_config.auto_reload_value = MAX_32INT;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	607b      	str	r3, [r7, #4]
    TIM5_config.master_mode = RESET; // ???
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
    TIM5_config.clock_division = DIVIDE_BY_ONE; // ???
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
    TIM5_config.prescaler = 0; // ???
 8001d60:	2300      	movs	r3, #0
 8001d62:	823b      	strh	r3, [r7, #16]
    TIM5_config.center_aligned_mode = EDGE_ALIGNED_MODE; // default
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
    // TIM2_config.auto_reload_buffer_enable default
    TIM5_config.timer_count_down_mode_enable = DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	767b      	strb	r3, [r7, #25]
    TIM5_config.interrupt_update_enable = ENABLE; // update request source ???
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	76bb      	strb	r3, [r7, #26]
    TIM5_config.update_event_disable = DISABLE; // update disable
 8001d70:	2300      	movs	r3, #0
 8001d72:	76fb      	strb	r3, [r7, #27]
    TIM5_config.one_pulse_mode_enable = DISABLE; //counter stops counting at next update event
 8001d74:	2300      	movs	r3, #0
 8001d76:	773b      	strb	r3, [r7, #28]

    TIM5_handle.timer_configuration = TIM5_config;
 8001d78:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001d7c:	1d3d      	adds	r5, r7, #4
 8001d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TIMER_clock_control(TIM5_, ENABLE);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <LED_TIMER5_init+0x64>)
 8001d8e:	f7ff ff43 	bl	8001c18 <TIMER_clock_control>
    TIMER_init(&TIM5_handle);
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe7e 	bl	8001a98 <TIMER_init>
    TIMER_interrupt_control(TIM5_, ENABLE);
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4803      	ldr	r0, [pc, #12]	; (8001dac <LED_TIMER5_init+0x64>)
 8001da0:	f7ff ffb4 	bl	8001d0c <TIMER_interrupt_control>
}
 8001da4:	bf00      	nop
 8001da6:	3740      	adds	r7, #64	; 0x40
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	40000c00 	.word	0x40000c00

08001db0 <IRQ_TIMx_clear_pending>:

void LED_TIMER5_specific_start(uint32_t new_start_val){
    TIM5_->TIMx_CNT = new_start_val;
}

void IRQ_TIMx_clear_pending(uint8_t pinNumber, GPTIMR_RegDef_t* gp_timer){
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
    gp_timer->TIMx_SR &= ~(0x1 << pinNumber);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	43d2      	mvns	r2, r2
 8001dca:	401a      	ands	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	611a      	str	r2, [r3, #16]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001de0:	f000 f9fe 	bl	80021e0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001de4:	20ca      	movs	r0, #202	; 0xca
 8001de6:	f000 f943 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001dea:	20c3      	movs	r0, #195	; 0xc3
 8001dec:	f000 f94d 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001df0:	2008      	movs	r0, #8
 8001df2:	f000 f94a 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001df6:	2050      	movs	r0, #80	; 0x50
 8001df8:	f000 f947 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001dfc:	20cf      	movs	r0, #207	; 0xcf
 8001dfe:	f000 f937 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f941 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e08:	20c1      	movs	r0, #193	; 0xc1
 8001e0a:	f000 f93e 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e0e:	2030      	movs	r0, #48	; 0x30
 8001e10:	f000 f93b 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e14:	20ed      	movs	r0, #237	; 0xed
 8001e16:	f000 f92b 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e1a:	2064      	movs	r0, #100	; 0x64
 8001e1c:	f000 f935 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f932 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e26:	2012      	movs	r0, #18
 8001e28:	f000 f92f 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e2c:	2081      	movs	r0, #129	; 0x81
 8001e2e:	f000 f92c 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e32:	20e8      	movs	r0, #232	; 0xe8
 8001e34:	f000 f91c 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e38:	2085      	movs	r0, #133	; 0x85
 8001e3a:	f000 f926 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f923 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e44:	2078      	movs	r0, #120	; 0x78
 8001e46:	f000 f920 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e4a:	20cb      	movs	r0, #203	; 0xcb
 8001e4c:	f000 f910 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e50:	2039      	movs	r0, #57	; 0x39
 8001e52:	f000 f91a 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e56:	202c      	movs	r0, #44	; 0x2c
 8001e58:	f000 f917 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f000 f914 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e62:	2034      	movs	r0, #52	; 0x34
 8001e64:	f000 f911 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f000 f90e 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e6e:	20f7      	movs	r0, #247	; 0xf7
 8001e70:	f000 f8fe 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001e74:	2020      	movs	r0, #32
 8001e76:	f000 f908 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001e7a:	20ea      	movs	r0, #234	; 0xea
 8001e7c:	f000 f8f8 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f000 f902 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f8ff 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001e8c:	20b1      	movs	r0, #177	; 0xb1
 8001e8e:	f000 f8ef 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f8f9 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001e98:	201b      	movs	r0, #27
 8001e9a:	f000 f8f6 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001e9e:	20b6      	movs	r0, #182	; 0xb6
 8001ea0:	f000 f8e6 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f000 f8f0 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001eaa:	20a2      	movs	r0, #162	; 0xa2
 8001eac:	f000 f8ed 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001eb0:	20c0      	movs	r0, #192	; 0xc0
 8001eb2:	f000 f8dd 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f000 f8e7 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ebc:	20c1      	movs	r0, #193	; 0xc1
 8001ebe:	f000 f8d7 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ec2:	2010      	movs	r0, #16
 8001ec4:	f000 f8e1 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ec8:	20c5      	movs	r0, #197	; 0xc5
 8001eca:	f000 f8d1 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ece:	2045      	movs	r0, #69	; 0x45
 8001ed0:	f000 f8db 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ed4:	2015      	movs	r0, #21
 8001ed6:	f000 f8d8 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001eda:	20c7      	movs	r0, #199	; 0xc7
 8001edc:	f000 f8c8 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ee0:	2090      	movs	r0, #144	; 0x90
 8001ee2:	f000 f8d2 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ee6:	2036      	movs	r0, #54	; 0x36
 8001ee8:	f000 f8c2 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001eec:	20c8      	movs	r0, #200	; 0xc8
 8001eee:	f000 f8cc 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001ef2:	20f2      	movs	r0, #242	; 0xf2
 8001ef4:	f000 f8bc 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 f8c6 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001efe:	20b0      	movs	r0, #176	; 0xb0
 8001f00:	f000 f8b6 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f04:	20c2      	movs	r0, #194	; 0xc2
 8001f06:	f000 f8c0 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f0a:	20b6      	movs	r0, #182	; 0xb6
 8001f0c:	f000 f8b0 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f10:	200a      	movs	r0, #10
 8001f12:	f000 f8ba 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f16:	20a7      	movs	r0, #167	; 0xa7
 8001f18:	f000 f8b7 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f1c:	2027      	movs	r0, #39	; 0x27
 8001f1e:	f000 f8b4 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f22:	2004      	movs	r0, #4
 8001f24:	f000 f8b1 	bl	800208a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f28:	202a      	movs	r0, #42	; 0x2a
 8001f2a:	f000 f8a1 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f8ab 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f8a8 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f000 f8a5 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f40:	20ef      	movs	r0, #239	; 0xef
 8001f42:	f000 f8a2 	bl	800208a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f46:	202b      	movs	r0, #43	; 0x2b
 8001f48:	f000 f892 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 f89c 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f899 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f000 f896 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f5e:	203f      	movs	r0, #63	; 0x3f
 8001f60:	f000 f893 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f64:	20f6      	movs	r0, #246	; 0xf6
 8001f66:	f000 f883 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 f88d 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 f88a 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001f76:	2006      	movs	r0, #6
 8001f78:	f000 f887 	bl	800208a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001f7c:	202c      	movs	r0, #44	; 0x2c
 8001f7e:	f000 f877 	bl	8002070 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f82:	20c8      	movs	r0, #200	; 0xc8
 8001f84:	f000 f9e8 	bl	8002358 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001f88:	2026      	movs	r0, #38	; 0x26
 8001f8a:	f000 f871 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f000 f87b 	bl	800208a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001f94:	20e0      	movs	r0, #224	; 0xe0
 8001f96:	f000 f86b 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f875 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fa0:	2029      	movs	r0, #41	; 0x29
 8001fa2:	f000 f872 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001fa6:	2024      	movs	r0, #36	; 0x24
 8001fa8:	f000 f86f 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fac:	200c      	movs	r0, #12
 8001fae:	f000 f86c 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fb2:	200e      	movs	r0, #14
 8001fb4:	f000 f869 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fb8:	2009      	movs	r0, #9
 8001fba:	f000 f866 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001fbe:	204e      	movs	r0, #78	; 0x4e
 8001fc0:	f000 f863 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fc4:	2078      	movs	r0, #120	; 0x78
 8001fc6:	f000 f860 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001fca:	203c      	movs	r0, #60	; 0x3c
 8001fcc:	f000 f85d 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fd0:	2009      	movs	r0, #9
 8001fd2:	f000 f85a 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001fd6:	2013      	movs	r0, #19
 8001fd8:	f000 f857 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001fdc:	2005      	movs	r0, #5
 8001fde:	f000 f854 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001fe2:	2017      	movs	r0, #23
 8001fe4:	f000 f851 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001fe8:	2011      	movs	r0, #17
 8001fea:	f000 f84e 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f000 f84b 	bl	800208a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ff4:	20e1      	movs	r0, #225	; 0xe1
 8001ff6:	f000 f83b 	bl	8002070 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f845 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002000:	2016      	movs	r0, #22
 8002002:	f000 f842 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002006:	201b      	movs	r0, #27
 8002008:	f000 f83f 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800200c:	2004      	movs	r0, #4
 800200e:	f000 f83c 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002012:	2011      	movs	r0, #17
 8002014:	f000 f839 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002018:	2007      	movs	r0, #7
 800201a:	f000 f836 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800201e:	2031      	movs	r0, #49	; 0x31
 8002020:	f000 f833 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002024:	2033      	movs	r0, #51	; 0x33
 8002026:	f000 f830 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800202a:	2042      	movs	r0, #66	; 0x42
 800202c:	f000 f82d 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002030:	2005      	movs	r0, #5
 8002032:	f000 f82a 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002036:	200c      	movs	r0, #12
 8002038:	f000 f827 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 f824 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002042:	2028      	movs	r0, #40	; 0x28
 8002044:	f000 f821 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002048:	202f      	movs	r0, #47	; 0x2f
 800204a:	f000 f81e 	bl	800208a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800204e:	200f      	movs	r0, #15
 8002050:	f000 f81b 	bl	800208a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002054:	2011      	movs	r0, #17
 8002056:	f000 f80b 	bl	8002070 <ili9341_Write_Reg>
  LCD_Delay(200);
 800205a:	20c8      	movs	r0, #200	; 0xc8
 800205c:	f000 f97c 	bl	8002358 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002060:	2029      	movs	r0, #41	; 0x29
 8002062:	f000 f805 	bl	8002070 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002066:	202c      	movs	r0, #44	; 0x2c
 8002068:	f000 f802 	bl	8002070 <ili9341_Write_Reg>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f949 	bl	8002314 <LCD_IO_WriteReg>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f91a 	bl	80022d0 <LCD_IO_WriteData>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020a8:	4819      	ldr	r0, [pc, #100]	; (8002110 <SPI_Init+0x6c>)
 80020aa:	f003 ffd5 	bl	8006058 <HAL_SPI_GetState>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12b      	bne.n	800210c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <SPI_Init+0x6c>)
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <SPI_Init+0x70>)
 80020b8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <SPI_Init+0x6c>)
 80020bc:	2218      	movs	r2, #24
 80020be:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <SPI_Init+0x6c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <SPI_Init+0x6c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <SPI_Init+0x6c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <SPI_Init+0x6c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <SPI_Init+0x6c>)
 80020da:	2207      	movs	r2, #7
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <SPI_Init+0x6c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <SPI_Init+0x6c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <SPI_Init+0x6c>)
 80020ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <SPI_Init+0x6c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SPI_Init+0x6c>)
 80020fa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020fe:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <SPI_Init+0x6c>)
 8002102:	f000 f833 	bl	800216c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <SPI_Init+0x6c>)
 8002108:	f003 fdb2 	bl	8005c70 <HAL_SPI_Init>
  }
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2002598c 	.word	0x2002598c
 8002114:	40015000 	.word	0x40015000

08002118 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <SPI_Write+0x34>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1db9      	adds	r1, r7, #6
 800212c:	2201      	movs	r2, #1
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <SPI_Write+0x38>)
 8002130:	f003 fe4f 	bl	8005dd2 <HAL_SPI_Transmit>
 8002134:	4603      	mov	r3, r0
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800213e:	f000 f809 	bl	8002154 <SPI_Error>
  }
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000000c 	.word	0x2000000c
 8002150:	2002598c 	.word	0x2002598c

08002154 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <SPI_Error+0x14>)
 800215a:	f003 fe12 	bl	8005d82 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800215e:	f7ff ffa1 	bl	80020a4 <SPI_Init>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2002598c 	.word	0x2002598c

0800216c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <SPI_MspInit+0x6c>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <SPI_MspInit+0x6c>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	6453      	str	r3, [r2, #68]	; 0x44
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <SPI_MspInit+0x6c>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <SPI_MspInit+0x6c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <SPI_MspInit+0x6c>)
 800219a:	f043 0320 	orr.w	r3, r3, #32
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <SPI_MspInit+0x6c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021ba:	2301      	movs	r3, #1
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021be:	2305      	movs	r3, #5
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <SPI_MspInit+0x70>)
 80021ca:	f001 f971 	bl	80034b0 <HAL_GPIO_Init>
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40021400 	.word	0x40021400

080021e0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <LCD_IO_Init+0xe0>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d164      	bne.n	80022b8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <LCD_IO_Init+0xe0>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <LCD_IO_Init+0xe4>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <LCD_IO_Init+0xe4>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6313      	str	r3, [r2, #48]	; 0x30
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <LCD_IO_Init+0xe4>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002214:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <LCD_IO_Init+0xe8>)
 800222a:	f001 f941 	bl	80034b0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <LCD_IO_Init+0xe4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <LCD_IO_Init+0xe4>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <LCD_IO_Init+0xe4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4819      	ldr	r0, [pc, #100]	; (80022c8 <LCD_IO_Init+0xe8>)
 8002264:	f001 f924 	bl	80034b0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <LCD_IO_Init+0xe4>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <LCD_IO_Init+0xe4>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6313      	str	r3, [r2, #48]	; 0x30
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <LCD_IO_Init+0xe4>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002284:	2304      	movs	r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4619      	mov	r1, r3
 800229a:	480c      	ldr	r0, [pc, #48]	; (80022cc <LCD_IO_Init+0xec>)
 800229c:	f001 f908 	bl	80034b0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022a0:	2200      	movs	r2, #0
 80022a2:	2104      	movs	r1, #4
 80022a4:	4809      	ldr	r0, [pc, #36]	; (80022cc <LCD_IO_Init+0xec>)
 80022a6:	f001 fbbb 	bl	8003a20 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <LCD_IO_Init+0xec>)
 80022b0:	f001 fbb6 	bl	8003a20 <HAL_GPIO_WritePin>

    SPI_Init();
 80022b4:	f7ff fef6 	bl	80020a4 <SPI_Init>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200259e4 	.word	0x200259e4
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40020800 	.word	0x40020800

080022d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <LCD_IO_WriteData+0x3c>)
 80022e2:	f001 fb9d 	bl	8003a20 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80022e6:	2200      	movs	r2, #0
 80022e8:	2104      	movs	r1, #4
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <LCD_IO_WriteData+0x40>)
 80022ec:	f001 fb98 	bl	8003a20 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff10 	bl	8002118 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022f8:	2201      	movs	r2, #1
 80022fa:	2104      	movs	r1, #4
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <LCD_IO_WriteData+0x40>)
 80022fe:	f001 fb8f 	bl	8003a20 <HAL_GPIO_WritePin>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40020800 	.word	0x40020800

08002314 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <LCD_IO_WriteReg+0x3c>)
 8002326:	f001 fb7b 	bl	8003a20 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <LCD_IO_WriteReg+0x40>)
 8002330:	f001 fb76 	bl	8003a20 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff feed 	bl	8002118 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800233e:	2201      	movs	r2, #1
 8002340:	2104      	movs	r1, #4
 8002342:	4804      	ldr	r0, [pc, #16]	; (8002354 <LCD_IO_WriteReg+0x40>)
 8002344:	f001 fb6c 	bl	8003a20 <HAL_GPIO_WritePin>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40020800 	.word	0x40020800

08002358 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fef9 	bl	8003158 <HAL_Delay>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0

  initialise_monitor_handles();
 8002372:	f004 f981 	bl	8006678 <initialise_monitor_handles>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002376:	f000 fe7d 	bl	8003074 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 800237a:	f000 f80b 	bl	8002394 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800237e:	f7fe f90d 	bl	800059c <ApplicationInit>

//  LCD_Visual_Demo();
  HAL_Delay(1000);
 8002382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002386:	f000 fee7 	bl	8003158 <HAL_Delay>
  drawMenu();
 800238a:	f7ff f905 	bl	8001598 <drawMenu>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  LCD_Touch_Polling_Demo(); // This function Will not return
 800238e:	f7fe f929 	bl	80005e4 <LCD_Touch_Polling_Demo>


  while (1)
 8002392:	e7fe      	b.n	8002392 <main+0x24>

08002394 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b092      	sub	sp, #72	; 0x48
 8002398:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <SystemClockOverride+0x7c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <SystemClockOverride+0x7c>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <SystemClockOverride+0x7c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023ca:	2308      	movs	r3, #8
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023ce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023d8:	2307      	movs	r3, #7
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fe02 	bl	8004fe8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80023e4:	230f      	movs	r3, #15
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e8:	2302      	movs	r3, #2
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80023fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002400:	2105      	movs	r1, #5
 8002402:	4618      	mov	r0, r3
 8002404:	f003 f868 	bl	80054d8 <HAL_RCC_ClockConfig>
}
 8002408:	bf00      	nop
 800240a:	3748      	adds	r7, #72	; 0x48
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	e7fe      	b.n	800241c <Error_Handler+0x8>
	...

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_MspInit+0x4c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_MspInit+0x4c>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_MspInit+0x4c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_MspInit+0x4c>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800245e:	2007      	movs	r0, #7
 8002460:	f000 ffb0 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_I2C_MspInit+0xc4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d14b      	bne.n	800252a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b28      	ldr	r3, [pc, #160]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d0:	2312      	movs	r3, #18
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024dc:	2304      	movs	r3, #4
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4815      	ldr	r0, [pc, #84]	; (800253c <HAL_I2C_MspInit+0xcc>)
 80024e8:	f000 ffe2 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f2:	2312      	movs	r3, #18
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024fe:	2304      	movs	r3, #4
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <HAL_I2C_MspInit+0xd0>)
 800250a:	f000 ffd1 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_I2C_MspInit+0xc8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40005c00 	.word	0x40005c00
 8002538:	40023800 	.word	0x40023800
 800253c:	40020800 	.word	0x40020800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b09a      	sub	sp, #104	; 0x68
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	2230      	movs	r2, #48	; 0x30
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fb0b 	bl	8006b80 <memset>
  if(hltdc->Instance==LTDC)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a81      	ldr	r2, [pc, #516]	; (8002774 <HAL_LTDC_MspInit+0x230>)
 8002570:	4293      	cmp	r3, r2
 8002572:	f040 80fa 	bne.w	800276a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002576:	2308      	movs	r3, #8
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800257a:	2332      	movs	r3, #50	; 0x32
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800257e:	2302      	movs	r3, #2
 8002580:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002582:	2300      	movs	r3, #0
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f9b0 	bl	80058f0 <HAL_RCCEx_PeriphCLKConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002596:	f7ff ff3d 	bl	8002414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025c0:	f043 0320 	orr.w	r3, r3, #32
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a59      	ldr	r2, [pc, #356]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b57      	ldr	r3, [pc, #348]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_LTDC_MspInit+0x234>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002670:	230e      	movs	r3, #14
 8002672:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002678:	4619      	mov	r1, r3
 800267a:	4840      	ldr	r0, [pc, #256]	; (800277c <HAL_LTDC_MspInit+0x238>)
 800267c:	f000 ff18 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002680:	f641 0358 	movw	r3, #6232	; 0x1858
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002692:	230e      	movs	r3, #14
 8002694:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800269a:	4619      	mov	r1, r3
 800269c:	4838      	ldr	r0, [pc, #224]	; (8002780 <HAL_LTDC_MspInit+0x23c>)
 800269e:	f000 ff07 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80026a2:	2303      	movs	r3, #3
 80026a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026b2:	2309      	movs	r3, #9
 80026b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ba:	4619      	mov	r1, r3
 80026bc:	4831      	ldr	r0, [pc, #196]	; (8002784 <HAL_LTDC_MspInit+0x240>)
 80026be:	f000 fef7 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80026c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d4:	230e      	movs	r3, #14
 80026d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026dc:	4619      	mov	r1, r3
 80026de:	4829      	ldr	r0, [pc, #164]	; (8002784 <HAL_LTDC_MspInit+0x240>)
 80026e0:	f000 fee6 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80026e4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80026e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026f6:	230e      	movs	r3, #14
 80026f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026fe:	4619      	mov	r1, r3
 8002700:	4821      	ldr	r0, [pc, #132]	; (8002788 <HAL_LTDC_MspInit+0x244>)
 8002702:	f000 fed5 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002706:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800270a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002718:	230e      	movs	r3, #14
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002720:	4619      	mov	r1, r3
 8002722:	481a      	ldr	r0, [pc, #104]	; (800278c <HAL_LTDC_MspInit+0x248>)
 8002724:	f000 fec4 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002728:	2348      	movs	r3, #72	; 0x48
 800272a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002738:	230e      	movs	r3, #14
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800273c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002740:	4619      	mov	r1, r3
 8002742:	4813      	ldr	r0, [pc, #76]	; (8002790 <HAL_LTDC_MspInit+0x24c>)
 8002744:	f000 feb4 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800274c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800275a:	2309      	movs	r3, #9
 800275c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800275e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002762:	4619      	mov	r1, r3
 8002764:	4808      	ldr	r0, [pc, #32]	; (8002788 <HAL_LTDC_MspInit+0x244>)
 8002766:	f000 fea3 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800276a:	bf00      	nop
 800276c:	3768      	adds	r7, #104	; 0x68
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40016800 	.word	0x40016800
 8002778:	40023800 	.word	0x40023800
 800277c:	40021400 	.word	0x40021400
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40021800 	.word	0x40021800
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00

08002794 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_SPI_MspInit+0x84>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12c      	bne.n	8002810 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_SPI_MspInit+0x88>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80027ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80027f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002800:	2305      	movs	r3, #5
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_SPI_MspInit+0x8c>)
 800280c:	f000 fe50 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002810:	bf00      	nop
 8002812:	3728      	adds	r7, #40	; 0x28
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40015000 	.word	0x40015000
 800281c:	40023800 	.word	0x40023800
 8002820:	40021400 	.word	0x40021400

08002824 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a08      	ldr	r2, [pc, #32]	; (8002854 <HAL_SPI_MspDeInit+0x30>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10a      	bne.n	800284c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_SPI_MspDeInit+0x34>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_SPI_MspDeInit+0x34>)
 800283c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002842:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_SPI_MspDeInit+0x38>)
 8002848:	f000 ffde 	bl	8003808 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40015000 	.word	0x40015000
 8002858:	40023800 	.word	0x40023800
 800285c:	40021400 	.word	0x40021400

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002864:	e7fe      	b.n	8002864 <NMI_Handler+0x4>

08002866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <HardFault_Handler+0x4>

0800286c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <MemManage_Handler+0x4>

08002872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <BusFault_Handler+0x4>

08002878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <UsageFault_Handler+0x4>

0800287e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ac:	f000 fc34 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80028ba:	f000 f9c9 	bl	8002c50 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80028be:	f000 f98b 	bl	8002bd8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80028c2:	2202      	movs	r2, #2
 80028c4:	2103      	movs	r1, #3
 80028c6:	2082      	movs	r0, #130	; 0x82
 80028c8:	f000 fa16 	bl	8002cf8 <I2C3_Write>
    HAL_Delay(5);
 80028cc:	2005      	movs	r0, #5
 80028ce:	f000 fc43 	bl	8003158 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2103      	movs	r1, #3
 80028d6:	2082      	movs	r0, #130	; 0x82
 80028d8:	f000 fa0e 	bl	8002cf8 <I2C3_Write>
    HAL_Delay(2);
 80028dc:	2002      	movs	r0, #2
 80028de:	f000 fc3b 	bl	8003158 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80028e2:	1cba      	adds	r2, r7, #2
 80028e4:	2302      	movs	r3, #2
 80028e6:	2100      	movs	r1, #0
 80028e8:	2082      	movs	r0, #130	; 0x82
 80028ea:	f000 fa55 	bl	8002d98 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f640 0211 	movw	r2, #2065	; 0x811
 8002906:	4293      	cmp	r3, r2
 8002908:	d001      	beq.n	800290e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800290a:	2303      	movs	r3, #3
 800290c:	e075      	b.n	80029fa <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800290e:	2202      	movs	r2, #2
 8002910:	2103      	movs	r1, #3
 8002912:	2082      	movs	r0, #130	; 0x82
 8002914:	f000 f9f0 	bl	8002cf8 <I2C3_Write>
    HAL_Delay(5);
 8002918:	2005      	movs	r0, #5
 800291a:	f000 fc1d 	bl	8003158 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800291e:	2200      	movs	r2, #0
 8002920:	2103      	movs	r1, #3
 8002922:	2082      	movs	r0, #130	; 0x82
 8002924:	f000 f9e8 	bl	8002cf8 <I2C3_Write>
    HAL_Delay(2);
 8002928:	2002      	movs	r0, #2
 800292a:	f000 fc15 	bl	8003158 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800292e:	2004      	movs	r0, #4
 8002930:	f000 f867 	bl	8002a02 <STMPE811_Read>
 8002934:	4603      	mov	r3, r0
 8002936:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002938:	797b      	ldrb	r3, [r7, #5]
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002940:	797b      	ldrb	r3, [r7, #5]
 8002942:	461a      	mov	r2, r3
 8002944:	2104      	movs	r1, #4
 8002946:	2082      	movs	r0, #130	; 0x82
 8002948:	f000 f9d6 	bl	8002cf8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800294c:	2004      	movs	r0, #4
 800294e:	f000 f858 	bl	8002a02 <STMPE811_Read>
 8002952:	4603      	mov	r3, r0
 8002954:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002956:	797b      	ldrb	r3, [r7, #5]
 8002958:	f023 0302 	bic.w	r3, r3, #2
 800295c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800295e:	797b      	ldrb	r3, [r7, #5]
 8002960:	461a      	mov	r2, r3
 8002962:	2104      	movs	r1, #4
 8002964:	2082      	movs	r0, #130	; 0x82
 8002966:	f000 f9c7 	bl	8002cf8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800296a:	2249      	movs	r2, #73	; 0x49
 800296c:	2120      	movs	r1, #32
 800296e:	2082      	movs	r0, #130	; 0x82
 8002970:	f000 f9c2 	bl	8002cf8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002974:	2002      	movs	r0, #2
 8002976:	f000 fbef 	bl	8003158 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800297a:	2201      	movs	r2, #1
 800297c:	2121      	movs	r1, #33	; 0x21
 800297e:	2082      	movs	r0, #130	; 0x82
 8002980:	f000 f9ba 	bl	8002cf8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002984:	2017      	movs	r0, #23
 8002986:	f000 f83c 	bl	8002a02 <STMPE811_Read>
 800298a:	4603      	mov	r3, r0
 800298c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800298e:	797b      	ldrb	r3, [r7, #5]
 8002990:	f043 031e 	orr.w	r3, r3, #30
 8002994:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002996:	797b      	ldrb	r3, [r7, #5]
 8002998:	461a      	mov	r2, r3
 800299a:	2117      	movs	r1, #23
 800299c:	2082      	movs	r0, #130	; 0x82
 800299e:	f000 f9ab 	bl	8002cf8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80029a2:	229a      	movs	r2, #154	; 0x9a
 80029a4:	2141      	movs	r1, #65	; 0x41
 80029a6:	2082      	movs	r0, #130	; 0x82
 80029a8:	f000 f9a6 	bl	8002cf8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80029ac:	2201      	movs	r2, #1
 80029ae:	214a      	movs	r1, #74	; 0x4a
 80029b0:	2082      	movs	r0, #130	; 0x82
 80029b2:	f000 f9a1 	bl	8002cf8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80029b6:	2201      	movs	r2, #1
 80029b8:	214b      	movs	r1, #75	; 0x4b
 80029ba:	2082      	movs	r0, #130	; 0x82
 80029bc:	f000 f99c 	bl	8002cf8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80029c0:	2200      	movs	r2, #0
 80029c2:	214b      	movs	r1, #75	; 0x4b
 80029c4:	2082      	movs	r0, #130	; 0x82
 80029c6:	f000 f997 	bl	8002cf8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80029ca:	2201      	movs	r2, #1
 80029cc:	2156      	movs	r1, #86	; 0x56
 80029ce:	2082      	movs	r0, #130	; 0x82
 80029d0:	f000 f992 	bl	8002cf8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2158      	movs	r1, #88	; 0x58
 80029d8:	2082      	movs	r0, #130	; 0x82
 80029da:	f000 f98d 	bl	8002cf8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80029de:	2203      	movs	r2, #3
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	2082      	movs	r0, #130	; 0x82
 80029e4:	f000 f988 	bl	8002cf8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	210b      	movs	r1, #11
 80029ec:	2082      	movs	r0, #130	; 0x82
 80029ee:	f000 f983 	bl	8002cf8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80029f2:	20c8      	movs	r0, #200	; 0xc8
 80029f4:	f000 fbb0 	bl	8003158 <HAL_Delay>

    return STMPE811_State_Ok;
 80029f8:	2302      	movs	r3, #2

}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a0c:	f107 020f 	add.w	r2, r7, #15
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4619      	mov	r1, r3
 8002a14:	2082      	movs	r0, #130	; 0x82
 8002a16:	f000 f999 	bl	8002d4c <I2C3_Read>

    return readData;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	791a      	ldrb	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002a34:	2040      	movs	r0, #64	; 0x40
 8002a36:	f7ff ffe4 	bl	8002a02 <STMPE811_Read>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0e      	blt.n	8002a64 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	214b      	movs	r1, #75	; 0x4b
 8002a50:	2082      	movs	r0, #130	; 0x82
 8002a52:	f000 f951 	bl	8002cf8 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a56:	2200      	movs	r2, #0
 8002a58:	214b      	movs	r1, #75	; 0x4b
 8002a5a:	2082      	movs	r0, #130	; 0x82
 8002a5c:	f000 f94c 	bl	8002cf8 <I2C3_Write>

        return STMPE811_State_Released;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0a7      	b.n	8002bb4 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	799b      	ldrb	r3, [r3, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d117      	bne.n	8002a9c <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f9b3 	bl	8002ddc <TM_STMPE811_ReadX>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	885b      	ldrh	r3, [r3, #2]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fa06 	bl	8002e98 <TM_STMPE811_ReadY>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a92:	3301      	adds	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	805a      	strh	r2, [r3, #2]
 8002a9a:	e048      	b.n	8002b2e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	799b      	ldrb	r3, [r3, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d112      	bne.n	8002aca <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f997 	bl	8002ddc <TM_STMPE811_ReadX>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	885b      	ldrh	r3, [r3, #2]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f9ec 	bl	8002e98 <TM_STMPE811_ReadY>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	805a      	strh	r2, [r3, #2]
 8002ac8:	e031      	b.n	8002b2e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	799b      	ldrb	r3, [r3, #6]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d115      	bne.n	8002afe <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	885b      	ldrh	r3, [r3, #2]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f980 	bl	8002ddc <TM_STMPE811_ReadX>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f9d5 	bl	8002e98 <TM_STMPE811_ReadY>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002af4:	3301      	adds	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e017      	b.n	8002b2e <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	799b      	ldrb	r3, [r3, #6]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d113      	bne.n	8002b2e <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f966 	bl	8002ddc <TM_STMPE811_ReadX>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f9b9 	bl	8002e98 <TM_STMPE811_ReadY>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	214b      	movs	r1, #75	; 0x4b
 8002b32:	2082      	movs	r0, #130	; 0x82
 8002b34:	f000 f8e0 	bl	8002cf8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	214b      	movs	r1, #75	; 0x4b
 8002b3c:	2082      	movs	r0, #130	; 0x82
 8002b3e:	f000 f8db 	bl	8002cf8 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	799b      	ldrb	r3, [r3, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <STMPE811_ReadTouch+0x12e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d115      	bne.n	8002b7e <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d027      	beq.n	8002baa <STMPE811_ReadTouch+0x186>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	2bee      	cmp	r3, #238	; 0xee
 8002b60:	d823      	bhi.n	8002baa <STMPE811_ReadTouch+0x186>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	885b      	ldrh	r3, [r3, #2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01f      	beq.n	8002baa <STMPE811_ReadTouch+0x186>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	885b      	ldrh	r3, [r3, #2]
 8002b6e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002b72:	d81a      	bhi.n	8002baa <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e01a      	b.n	8002bb4 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <STMPE811_ReadTouch+0x188>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002b8e:	d80d      	bhi.n	8002bac <STMPE811_ReadTouch+0x188>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	885b      	ldrh	r3, [r3, #2]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <STMPE811_ReadTouch+0x188>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	885b      	ldrh	r3, [r3, #2]
 8002b9c:	2bee      	cmp	r3, #238	; 0xee
 8002b9e:	d805      	bhi.n	8002bac <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e004      	b.n	8002bb4 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002baa:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <verifyHAL_I2C_IS_OKAY+0x18>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d000      	beq.n	8002bca <verifyHAL_I2C_IS_OKAY+0xe>
    {
        while(1);
 8002bc8:	e7fe      	b.n	8002bc8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20025a3c 	.word	0x20025a3c

08002bd8 <I2C3_Init>:

static void I2C3_Init()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <I2C3_Init+0x68>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <I2C3_Init+0x68>)
 8002be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <I2C3_Init+0x68>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <I2C3_Init+0x6c>)
 8002bfc:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <I2C3_Init+0x70>)
 8002bfe:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <I2C3_Init+0x6c>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <I2C3_Init+0x74>)
 8002c04:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <I2C3_Init+0x6c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <I2C3_Init+0x6c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <I2C3_Init+0x6c>)
 8002c14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c18:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <I2C3_Init+0x6c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <I2C3_Init+0x6c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <I2C3_Init+0x6c>)
 8002c28:	f000 ff14 	bl	8003a54 <HAL_I2C_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <I2C3_Init+0x60>
    {
        for(;;); // Catch error
 8002c36:	e7fe      	b.n	8002c36 <I2C3_Init+0x5e>
    }
    return;
 8002c38:	bf00      	nop
}
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	200259e8 	.word	0x200259e8
 8002c48:	40005c00 	.word	0x40005c00
 8002c4c:	000186a0 	.word	0x000186a0

08002c50 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <I2C3_MspInit+0x9c>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca4:	2312      	movs	r3, #18
 8002ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <I2C3_MspInit+0xa0>)
 8002cbc:	f000 fbf8 	bl	80034b0 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <I2C3_MspInit+0xa4>)
 8002cde:	f000 fbe7 	bl	80034b0 <HAL_GPIO_Init>
    
}
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020000 	.word	0x40020000

08002cf8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af04      	add	r7, sp, #16
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
 8002d02:	460b      	mov	r3, r1
 8002d04:	717b      	strb	r3, [r7, #5]
 8002d06:	4613      	mov	r3, r2
 8002d08:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002d0a:	793b      	ldrb	r3, [r7, #4]
 8002d0c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d0e:	797b      	ldrb	r3, [r7, #5]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	88f9      	ldrh	r1, [r7, #6]
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <I2C3_Write+0x48>)
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	f107 030f 	add.w	r3, r7, #15
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	4807      	ldr	r0, [pc, #28]	; (8002d44 <I2C3_Write+0x4c>)
 8002d26:	f000 ffd9 	bl	8003cdc <HAL_I2C_Mem_Write>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <I2C3_Write+0x50>)
 8002d30:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d32:	f7ff ff43 	bl	8002bbc <verifyHAL_I2C_IS_OKAY>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	0003d090 	.word	0x0003d090
 8002d44:	200259e8 	.word	0x200259e8
 8002d48:	20025a3c 	.word	0x20025a3c

08002d4c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	4603      	mov	r3, r0
 8002d54:	603a      	str	r2, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	b299      	uxth	r1, r3
 8002d60:	79bb      	ldrb	r3, [r7, #6]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <I2C3_Read+0x40>)
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	4807      	ldr	r0, [pc, #28]	; (8002d90 <I2C3_Read+0x44>)
 8002d74:	f001 f8ac 	bl	8003ed0 <HAL_I2C_Mem_Read>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <I2C3_Read+0x48>)
 8002d7e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d80:	f7ff ff1c 	bl	8002bbc <verifyHAL_I2C_IS_OKAY>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0003d090 	.word	0x0003d090
 8002d90:	200259e8 	.word	0x200259e8
 8002d94:	20025a3c 	.word	0x20025a3c

08002d98 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af04      	add	r7, sp, #16
 8002d9e:	603a      	str	r2, [r7, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
 8002da6:	460b      	mov	r3, r1
 8002da8:	71bb      	strb	r3, [r7, #6]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	b299      	uxth	r1, r3
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <I2C3_MulitByteRead+0x3c>)
 8002db8:	9302      	str	r3, [sp, #8]
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <I2C3_MulitByteRead+0x40>)
 8002dc6:	f001 f883 	bl	8003ed0 <HAL_I2C_Mem_Read>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	0003d090 	.word	0x0003d090
 8002dd8:	200259e8 	.word	0x200259e8

08002ddc <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002de6:	204d      	movs	r0, #77	; 0x4d
 8002de8:	f7ff fe0b 	bl	8002a02 <STMPE811_Read>
 8002dec:	4603      	mov	r3, r0
 8002dee:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002df0:	204e      	movs	r0, #78	; 0x4e
 8002df2:	f7ff fe06 	bl	8002a02 <STMPE811_Read>
 8002df6:	4603      	mov	r3, r0
 8002df8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002dfa:	7a7b      	ldrb	r3, [r7, #9]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	7a3b      	ldrb	r3, [r7, #8]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002e08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e0c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e10:	4293      	cmp	r3, r2
 8002e12:	dc06      	bgt.n	8002e22 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002e14:	89fb      	ldrh	r3, [r7, #14]
 8002e16:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	81fb      	strh	r3, [r7, #14]
 8002e20:	e005      	b.n	8002e2e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002e28:	3308      	adds	r3, #8
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <TM_STMPE811_ReadX+0xb8>)
 8002e34:	fb82 1203 	smull	r1, r2, r2, r3
 8002e38:	441a      	add	r2, r3
 8002e3a:	10d2      	asrs	r2, r2, #3
 8002e3c:	17db      	asrs	r3, r3, #31
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e46:	2bef      	cmp	r3, #239	; 0xef
 8002e48:	dd02      	ble.n	8002e50 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002e4a:	23ef      	movs	r3, #239	; 0xef
 8002e4c:	81fb      	strh	r3, [r7, #14]
 8002e4e:	e005      	b.n	8002e5c <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002e50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da01      	bge.n	8002e5c <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002e5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	dd05      	ble.n	8002e72 <TM_STMPE811_ReadX+0x96>
 8002e66:	89fa      	ldrh	r2, [r7, #14]
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	e004      	b.n	8002e7c <TM_STMPE811_ReadX+0xa0>
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002e7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	dd01      	ble.n	8002e8a <TM_STMPE811_ReadX+0xae>
        return val;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	e000      	b.n	8002e8c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	88888889 	.word	0x88888889

08002e98 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002ea2:	204f      	movs	r0, #79	; 0x4f
 8002ea4:	f7ff fdad 	bl	8002a02 <STMPE811_Read>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002eac:	2050      	movs	r0, #80	; 0x50
 8002eae:	f7ff fda8 	bl	8002a02 <STMPE811_Read>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002eb6:	7a7b      	ldrb	r3, [r7, #9]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b21a      	sxth	r2, r3
 8002ebc:	7a3b      	ldrb	r3, [r7, #8]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002ec4:	89fb      	ldrh	r3, [r7, #14]
 8002ec6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <TM_STMPE811_ReadY+0xa0>)
 8002ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed8:	1052      	asrs	r2, r2, #1
 8002eda:	17db      	asrs	r3, r3, #31
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002ee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dc02      	bgt.n	8002eee <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	81fb      	strh	r3, [r7, #14]
 8002eec:	e007      	b.n	8002efe <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ef6:	db02      	blt.n	8002efe <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002ef8:	f240 133f 	movw	r3, #319	; 0x13f
 8002efc:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002efe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dd05      	ble.n	8002f14 <TM_STMPE811_ReadY+0x7c>
 8002f08:	89fa      	ldrh	r2, [r7, #14]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	e004      	b.n	8002f1e <TM_STMPE811_ReadY+0x86>
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002f20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	dd01      	ble.n	8002f2c <TM_STMPE811_ReadY+0x94>
        return val;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	e000      	b.n	8002f2e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2e8ba2e9 	.word	0x2e8ba2e9

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f003 fe56 	bl	8006c1c <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20030000 	.word	0x20030000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	20025a40 	.word	0x20025a40
 8002fa4:	20025c40 	.word	0x20025c40

08002fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <SystemInit+0x20>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <SystemInit+0x20>)
 8002fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <checkTouchBounds>:
#include "touchLogic.h"

bool checkTouchBounds(struct Point* touch_loc, struct Box_Boundaries bounds){
 8002fcc:	b084      	sub	sp, #16
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	f107 0014 	add.w	r0, r7, #20
 8002fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // checks to see if Point input is in the given box boundaries
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dc10      	bgt.n	800300a <checkTouchBounds+0x3e>
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dd0b      	ble.n	800300a <checkTouchBounds+0x3e>
            (bounds.top_y >= touch_loc->y && bounds.bottom_y < touch_loc->y));
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	db06      	blt.n	800300a <checkTouchBounds+0x3e>
            (bounds.top_y >= touch_loc->y && bounds.bottom_y < touch_loc->y));
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	da01      	bge.n	800300a <checkTouchBounds+0x3e>
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <checkTouchBounds+0x40>
 800300a:	2300      	movs	r3, #0
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	b004      	add	sp, #16
 800301e:	4770      	bx	lr

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003024:	f7ff ffc0 	bl	8002fa8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	; (800306c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800304e:	f003 fdeb 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7ff f98c 	bl	800236e <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003058:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003064:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 8003068:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800306c:	20025c40 	.word	0x20025c40

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 f991 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff f9ba 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f9b7 	bl	800344a <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f000 f971 	bl	80033da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000010 	.word	0x20000010
 8003110:	20000018 	.word	0x20000018
 8003114:	20000014 	.word	0x20000014

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000018 	.word	0x20000018
 800313c:	20025a44 	.word	0x20025a44

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20025a44 	.word	0x20025a44

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffee 	bl	8003140 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_Delay+0x44>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffde 	bl	8003140 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
  {
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000018 	.word	0x20000018

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db12      	blt.n	8003278 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	490a      	ldr	r1, [pc, #40]	; (8003284 <__NVIC_DisableIRQ+0x44>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	3320      	adds	r3, #32
 8003268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800326c:	f3bf 8f4f 	dsb	sy
}
 8003270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003272:	f3bf 8f6f 	isb	sy
}
 8003276:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0c      	blt.n	80032b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4907      	ldr	r1, [pc, #28]	; (80032c0 <__NVIC_ClearPendingIRQ+0x38>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	3360      	adds	r3, #96	; 0x60
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003390:	d301      	bcc.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <SysTick_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	210f      	movs	r1, #15
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7ff ff8e 	bl	80032c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <SysTick_Config+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SysTick_Config+0x40>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fee7 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff fefc 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff8e 	bl	8003318 <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5d 	bl	80032c4 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff feef 	bl	8003204 <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff feff 	bl	8003240 <__NVIC_DisableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff94 	bl	8003380 <SysTick_Config>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff09 	bl	8003288 <__NVIC_ClearPendingIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800349a:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_EXTI_ClearPending+0x2c>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6153      	str	r3, [r2, #20]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e177      	b.n	80037bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 8166 	bne.w	80037b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d130      	bne.n	8003564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 0201 	and.w	r2, r3, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d017      	beq.n	80035a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d123      	bne.n	80035f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	220f      	movs	r2, #15
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80c0 	beq.w	80037b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_GPIO_Init+0x324>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a65      	ldr	r2, [pc, #404]	; (80037d4 <HAL_GPIO_Init+0x324>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_GPIO_Init+0x324>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a61      	ldr	r2, [pc, #388]	; (80037d8 <HAL_GPIO_Init+0x328>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_GPIO_Init+0x32c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d037      	beq.n	80036ee <HAL_GPIO_Init+0x23e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_GPIO_Init+0x330>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_GPIO_Init+0x23a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a56      	ldr	r2, [pc, #344]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <HAL_GPIO_Init+0x236>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a55      	ldr	r2, [pc, #340]	; (80037e8 <HAL_GPIO_Init+0x338>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d025      	beq.n	80036e2 <HAL_GPIO_Init+0x232>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a54      	ldr	r2, [pc, #336]	; (80037ec <HAL_GPIO_Init+0x33c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01f      	beq.n	80036de <HAL_GPIO_Init+0x22e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a53      	ldr	r2, [pc, #332]	; (80037f0 <HAL_GPIO_Init+0x340>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d019      	beq.n	80036da <HAL_GPIO_Init+0x22a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_GPIO_Init+0x344>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x226>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_GPIO_Init+0x348>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_GPIO_Init+0x34c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <HAL_GPIO_Init+0x350>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x21a>
 80036c6:	2309      	movs	r3, #9
 80036c8:	e012      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ca:	230a      	movs	r3, #10
 80036cc:	e010      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e00e      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x240>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x328>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003732:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_GPIO_Init+0x354>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_GPIO_Init+0x354>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_GPIO_Init+0x354>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_GPIO_Init+0x354>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_GPIO_Init+0x354>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae84 	bls.w	80034cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40021c00 	.word	0x40021c00
 80037fc:	40022000 	.word	0x40022000
 8003800:	40022400 	.word	0x40022400
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e0d9      	b.n	80039d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	429a      	cmp	r2, r3
 800383c:	f040 80c9 	bne.w	80039d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003840:	4a6b      	ldr	r2, [pc, #428]	; (80039f0 <HAL_GPIO_DeInit+0x1e8>)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	3302      	adds	r3, #2
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <HAL_GPIO_DeInit+0x1ec>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d037      	beq.n	80038da <HAL_GPIO_DeInit+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a62      	ldr	r2, [pc, #392]	; (80039f8 <HAL_GPIO_DeInit+0x1f0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_GPIO_DeInit+0xce>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a61      	ldr	r2, [pc, #388]	; (80039fc <HAL_GPIO_DeInit+0x1f4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02b      	beq.n	80038d2 <HAL_GPIO_DeInit+0xca>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a60      	ldr	r2, [pc, #384]	; (8003a00 <HAL_GPIO_DeInit+0x1f8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d025      	beq.n	80038ce <HAL_GPIO_DeInit+0xc6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a5f      	ldr	r2, [pc, #380]	; (8003a04 <HAL_GPIO_DeInit+0x1fc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <HAL_GPIO_DeInit+0xc2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a5e      	ldr	r2, [pc, #376]	; (8003a08 <HAL_GPIO_DeInit+0x200>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_DeInit+0xbe>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a5d      	ldr	r2, [pc, #372]	; (8003a0c <HAL_GPIO_DeInit+0x204>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_DeInit+0xba>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_GPIO_DeInit+0x208>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_DeInit+0xb6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <HAL_GPIO_DeInit+0x20c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_DeInit+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a5a      	ldr	r2, [pc, #360]	; (8003a18 <HAL_GPIO_DeInit+0x210>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_DeInit+0xae>
 80038b2:	2309      	movs	r3, #9
 80038b4:	e012      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038b6:	230a      	movs	r3, #10
 80038b8:	e010      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038ba:	2308      	movs	r3, #8
 80038bc:	e00e      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038be:	2307      	movs	r3, #7
 80038c0:	e00c      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038c2:	2306      	movs	r3, #6
 80038c4:	e00a      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038c6:	2305      	movs	r3, #5
 80038c8:	e008      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038ca:	2304      	movs	r3, #4
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038ce:	2303      	movs	r3, #3
 80038d0:	e004      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e002      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_GPIO_DeInit+0xd4>
 80038da:	2300      	movs	r3, #0
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	f002 0203 	and.w	r2, r2, #3
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	4093      	lsls	r3, r2
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d132      	bne.n	8003952 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	4949      	ldr	r1, [pc, #292]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	4946      	ldr	r1, [pc, #280]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 8003904:	4013      	ands	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003908:	4b44      	ldr	r3, [pc, #272]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	43db      	mvns	r3, r3
 8003910:	4942      	ldr	r1, [pc, #264]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 8003912:	4013      	ands	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	493f      	ldr	r1, [pc, #252]	; (8003a1c <HAL_GPIO_DeInit+0x214>)
 8003920:	4013      	ands	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	220f      	movs	r2, #15
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003934:	4a2e      	ldr	r2, [pc, #184]	; (80039f0 <HAL_GPIO_DeInit+0x1e8>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	3302      	adds	r3, #2
 800393c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	43da      	mvns	r2, r3
 8003944:	482a      	ldr	r0, [pc, #168]	; (80039f0 <HAL_GPIO_DeInit+0x1e8>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	400a      	ands	r2, r1
 800394c:	3302      	adds	r3, #2
 800394e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2103      	movs	r1, #3
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	401a      	ands	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	08d2      	lsrs	r2, r2, #3
 8003988:	4019      	ands	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2103      	movs	r1, #3
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	401a      	ands	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	2101      	movs	r1, #1
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2103      	movs	r1, #3
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	f67f af22 	bls.w	8003824 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40020000 	.word	0x40020000
 80039f8:	40020400 	.word	0x40020400
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40021400 	.word	0x40021400
 8003a0c:	40021800 	.word	0x40021800
 8003a10:	40021c00 	.word	0x40021c00
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40022400 	.word	0x40022400
 8003a1c:	40013c00 	.word	0x40013c00

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a3c:	e003      	b.n	8003a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	041a      	lsls	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e12b      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe fcf8 	bl	8002470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f001 ff06 	bl	80058c8 <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a81      	ldr	r2, [pc, #516]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d807      	bhi.n	8003ad8 <HAL_I2C_Init+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_I2C_Init+0x278>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e006      	b.n	8003ae6 <HAL_I2C_Init+0x92>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a7d      	ldr	r2, [pc, #500]	; (8003cd0 <HAL_I2C_Init+0x27c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0e7      	b.n	8003cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a78      	ldr	r2, [pc, #480]	; (8003cd4 <HAL_I2C_Init+0x280>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <HAL_I2C_Init+0xd4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e009      	b.n	8003b3c <HAL_I2C_Init+0xe8>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_I2C_Init+0x284>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	495c      	ldr	r1, [pc, #368]	; (8003cc8 <HAL_I2C_Init+0x274>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d819      	bhi.n	8003b90 <HAL_I2C_Init+0x13c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b70:	400b      	ands	r3, r1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_I2C_Init+0x138>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e59      	subs	r1, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8a:	e051      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e04f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_I2C_Init+0x168>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e012      	b.n	8003be2 <HAL_I2C_Init+0x18e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	0099      	lsls	r1, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x196>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e022      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10e      	bne.n	8003c10 <HAL_I2C_Init+0x1bc>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e58      	subs	r0, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	e00f      	b.n	8003c30 <HAL_I2C_Init+0x1dc>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6911      	ldr	r1, [r2, #16]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68d2      	ldr	r2, [r2, #12]
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	000186a0 	.word	0x000186a0
 8003ccc:	001e847f 	.word	0x001e847f
 8003cd0:	003d08ff 	.word	0x003d08ff
 8003cd4:	431bde83 	.word	0x431bde83
 8003cd8:	10624dd3 	.word	0x10624dd3

08003cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	f7ff fa23 	bl	8003140 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	f040 80d9 	bne.w	8003ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2319      	movs	r3, #25
 8003d10:	2201      	movs	r2, #1
 8003d12:	496d      	ldr	r1, [pc, #436]	; (8003ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fc8b 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0cc      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Mem_Write+0x56>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0c5      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d007      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2221      	movs	r2, #33	; 0x21
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a4d      	ldr	r2, [pc, #308]	; (8003ecc <HAL_I2C_Mem_Write+0x1f0>)
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d9a:	88f8      	ldrh	r0, [r7, #6]
 8003d9c:	893a      	ldrh	r2, [r7, #8]
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4603      	mov	r3, r0
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fac2 	bl	8004334 <I2C_RequestMemoryWrite>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d052      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e081      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fd50 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06b      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11b      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x180>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1aa      	bne.n	8003dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fd43 	bl	80048f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d107      	bne.n	8003e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e016      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	; 0x30
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	817b      	strh	r3, [r7, #10]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	813b      	strh	r3, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eea:	f7ff f929 	bl	8003140 <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	f040 8214 	bne.w	8004326 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2319      	movs	r3, #25
 8003f04:	2201      	movs	r2, #1
 8003f06:	497b      	ldr	r1, [pc, #492]	; (80040f4 <HAL_I2C_Mem_Read+0x224>)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fb91 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
 8003f16:	e207      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Mem_Read+0x56>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e200      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d007      	beq.n	8003f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2222      	movs	r2, #34	; 0x22
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <HAL_I2C_Mem_Read+0x228>)
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8e:	88f8      	ldrh	r0, [r7, #6]
 8003f90:	893a      	ldrh	r2, [r7, #8]
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa5e 	bl	8004460 <I2C_RequestMemoryRead>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1bc      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e190      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d11b      	bne.n	800401e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e170      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	2b02      	cmp	r3, #2
 8004024:	d11b      	bne.n	800405e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	e150      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004074:	e144      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b03      	cmp	r3, #3
 800407c:	f200 80f1 	bhi.w	8004262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	2b01      	cmp	r3, #1
 8004086:	d123      	bne.n	80040d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fc79 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e145      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ce:	e117      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d14e      	bne.n	8004176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2200      	movs	r2, #0
 80040e0:	4906      	ldr	r1, [pc, #24]	; (80040fc <HAL_I2C_Mem_Read+0x22c>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 faa4 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e11a      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
 80040f2:	bf00      	nop
 80040f4:	00100002 	.word	0x00100002
 80040f8:	ffff0000 	.word	0xffff0000
 80040fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004174:	e0c4      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2200      	movs	r2, #0
 800417e:	496c      	ldr	r1, [pc, #432]	; (8004330 <HAL_I2C_Mem_Read+0x460>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa55 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0cb      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2200      	movs	r2, #0
 80041da:	4955      	ldr	r1, [pc, #340]	; (8004330 <HAL_I2C_Mem_Read+0x460>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa27 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09d      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004260:	e04e      	b.n	8004300 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb8c 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e058      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d124      	bne.n	8004300 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d107      	bne.n	80042ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f aeb6 	bne.w	8004076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00010004 	.word	0x00010004

08004334 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2200      	movs	r2, #0
 8004366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f960 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d103      	bne.n	800438e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e05f      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	492d      	ldr	r1, [pc, #180]	; (800445c <I2C_RequestMemoryWrite+0x128>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f9bb 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04c      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fa46 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e02b      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e021      	b.n	8004450 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fa20 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e005      	b.n	8004452 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8c2 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d103      	bne.n	80044ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0aa      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ce:	897b      	ldrh	r3, [r7, #10]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	4952      	ldr	r1, [pc, #328]	; (800462c <I2C_RequestMemoryRead+0x1cc>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f91d 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e097      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	6a39      	ldr	r1, [r7, #32]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f9a8 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b04      	cmp	r3, #4
 8004520:	d107      	bne.n	8004532 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004530:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e076      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	e021      	b.n	800458c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f982 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e050      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	6a39      	ldr	r1, [r7, #32]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f967 	bl	8004864 <I2C_WaitOnTXEFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e035      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f82b 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ee:	d103      	bne.n	80045f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e013      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045fc:	897b      	ldrh	r3, [r7, #10]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	6a3a      	ldr	r2, [r7, #32]
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <I2C_RequestMemoryRead+0x1cc>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f886 	bl	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	00010002 	.word	0x00010002

08004630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004640:	e048      	b.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d044      	beq.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fe fd79 	bl	8003140 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d139      	bne.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d10d      	bne.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x56>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	43da      	mvns	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	e00c      	b.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	43da      	mvns	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4013      	ands	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d116      	bne.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e023      	b.n	800471c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10d      	bne.n	80046fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	e00c      	b.n	8004714 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d093      	beq.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004732:	e071      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d123      	bne.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800475c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e067      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d041      	beq.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004794:	f7fe fcd4 	bl	8003140 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d136      	bne.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10c      	bne.n	80047ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e00b      	b.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e021      	b.n	800485c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10c      	bne.n	800483c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	43da      	mvns	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e00b      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f af6d 	bne.w	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004870:	e034      	b.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8e3 	bl	8004a3e <I2C_IsAcknowledgeFailed>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e034      	b.n	80048ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d028      	beq.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7fe fc59 	bl	8003140 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d016      	beq.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b80      	cmp	r3, #128	; 0x80
 80048e8:	d1c3      	bne.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004900:	e034      	b.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f89b 	bl	8004a3e <I2C_IsAcknowledgeFailed>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e034      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d028      	beq.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fe fc11 	bl	8003140 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11d      	bne.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d016      	beq.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e007      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d1c3      	bne.n	8004902 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004990:	e049      	b.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d119      	bne.n	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e030      	b.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe fbb4 	bl	8003140 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11d      	bne.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d016      	beq.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e007      	b.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d1ae      	bne.n	8004992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d11b      	bne.n	8004a8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0bf      	b.n	8004c2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fd3e 	bl	8002544 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004ade:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004af4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	; (8004c38 <HAL_LTDC_Init+0x19c>)
 8004b10:	400b      	ands	r3, r1
 8004b12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68d9      	ldr	r1, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <HAL_LTDC_Init+0x19c>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68d9      	ldr	r1, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <HAL_LTDC_Init+0x19c>)
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6959      	ldr	r1, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <HAL_LTDC_Init+0x19c>)
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6959      	ldr	r1, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0206 	orr.w	r2, r2, #6
 8004c0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	f000f800 	.word	0xf000f800

08004c3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c3c:	b5b0      	push	{r4, r5, r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_LTDC_ConfigLayer+0x1a>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e02c      	b.n	8004cb0 <HAL_LTDC_ConfigLayer+0x74>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2134      	movs	r1, #52	; 0x34
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4614      	mov	r4, r2
 8004c7a:	461d      	mov	r5, r3
 8004c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f811 	bl	8004cb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bdb0      	pop	{r4, r5, r7, pc}

08004cb8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	0c1b      	lsrs	r3, r3, #16
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	4413      	add	r3, r2
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	01db      	lsls	r3, r3, #7
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3384      	adds	r3, #132	; 0x84
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	01d2      	lsls	r2, r2, #7
 8004cf4:	440a      	add	r2, r1
 8004cf6:	3284      	adds	r2, #132	; 0x84
 8004cf8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cfc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	01db      	lsls	r3, r3, #7
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3384      	adds	r3, #132	; 0x84
 8004d20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d36:	4413      	add	r3, r2
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	01db      	lsls	r3, r3, #7
 8004d46:	4413      	add	r3, r2
 8004d48:	3384      	adds	r3, #132	; 0x84
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	4611      	mov	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	01d2      	lsls	r2, r2, #7
 8004d56:	440a      	add	r2, r1
 8004d58:	3284      	adds	r2, #132	; 0x84
 8004d5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004d5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d6e:	4413      	add	r3, r2
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	01db      	lsls	r3, r3, #7
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3384      	adds	r3, #132	; 0x84
 8004d80:	4619      	mov	r1, r3
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	01db      	lsls	r3, r3, #7
 8004d92:	4413      	add	r3, r2
 8004d94:	3384      	adds	r3, #132	; 0x84
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	01d2      	lsls	r2, r2, #7
 8004da2:	440a      	add	r2, r1
 8004da4:	3284      	adds	r2, #132	; 0x84
 8004da6:	f023 0307 	bic.w	r3, r3, #7
 8004daa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	01db      	lsls	r3, r3, #7
 8004db6:	4413      	add	r3, r2
 8004db8:	3384      	adds	r3, #132	; 0x84
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	01db      	lsls	r3, r3, #7
 8004de8:	4413      	add	r3, r2
 8004dea:	3384      	adds	r3, #132	; 0x84
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	01db      	lsls	r3, r3, #7
 8004df8:	4413      	add	r3, r2
 8004dfa:	3384      	adds	r3, #132	; 0x84
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e08:	461a      	mov	r2, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	440b      	add	r3, r1
 8004e1e:	3384      	adds	r3, #132	; 0x84
 8004e20:	4619      	mov	r1, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	01db      	lsls	r3, r3, #7
 8004e32:	4413      	add	r3, r2
 8004e34:	3384      	adds	r3, #132	; 0x84
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	01d2      	lsls	r2, r2, #7
 8004e42:	440a      	add	r2, r1
 8004e44:	3284      	adds	r2, #132	; 0x84
 8004e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	01db      	lsls	r3, r3, #7
 8004e56:	4413      	add	r3, r2
 8004e58:	3384      	adds	r3, #132	; 0x84
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	01db      	lsls	r3, r3, #7
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3384      	adds	r3, #132	; 0x84
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	4611      	mov	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	01d2      	lsls	r2, r2, #7
 8004e7c:	440a      	add	r2, r1
 8004e7e:	3284      	adds	r2, #132	; 0x84
 8004e80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e84:	f023 0307 	bic.w	r3, r3, #7
 8004e88:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6809      	ldr	r1, [r1, #0]
 8004e96:	4608      	mov	r0, r1
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	01c9      	lsls	r1, r1, #7
 8004e9c:	4401      	add	r1, r0
 8004e9e:	3184      	adds	r1, #132	; 0x84
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	01db      	lsls	r3, r3, #7
 8004eae:	4413      	add	r3, r2
 8004eb0:	3384      	adds	r3, #132	; 0x84
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	01db      	lsls	r3, r3, #7
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3384      	adds	r3, #132	; 0x84
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	01db      	lsls	r3, r3, #7
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3384      	adds	r3, #132	; 0x84
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	e01b      	b.n	8004f24 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d102      	bne.n	8004efa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e014      	b.n	8004f24 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d00b      	beq.n	8004f1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d007      	beq.n	8004f1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d003      	beq.n	8004f1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f16:	2b07      	cmp	r3, #7
 8004f18:	d102      	bne.n	8004f20 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	e001      	b.n	8004f24 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004f20:	2301      	movs	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	01db      	lsls	r3, r3, #7
 8004f2e:	4413      	add	r3, r2
 8004f30:	3384      	adds	r3, #132	; 0x84
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	01d2      	lsls	r2, r2, #7
 8004f3e:	440a      	add	r2, r1
 8004f40:	3284      	adds	r2, #132	; 0x84
 8004f42:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004f46:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	1acb      	subs	r3, r1, r3
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	6809      	ldr	r1, [r1, #0]
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	01c9      	lsls	r1, r1, #7
 8004f70:	4401      	add	r1, r0
 8004f72:	3184      	adds	r1, #132	; 0x84
 8004f74:	4313      	orrs	r3, r2
 8004f76:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	01db      	lsls	r3, r3, #7
 8004f82:	4413      	add	r3, r2
 8004f84:	3384      	adds	r3, #132	; 0x84
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	01d2      	lsls	r2, r2, #7
 8004f92:	440a      	add	r2, r1
 8004f94:	3284      	adds	r2, #132	; 0x84
 8004f96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4413      	add	r3, r2
 8004fac:	3384      	adds	r3, #132	; 0x84
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	01db      	lsls	r3, r3, #7
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3384      	adds	r3, #132	; 0x84
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	01d2      	lsls	r2, r2, #7
 8004fd0:	440a      	add	r2, r1
 8004fd2:	3284      	adds	r2, #132	; 0x84
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6013      	str	r3, [r2, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e267      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d075      	beq.n	80050f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b04      	cmp	r3, #4
 8005010:	d00c      	beq.n	800502c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005012:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800501a:	2b08      	cmp	r3, #8
 800501c:	d112      	bne.n	8005044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501e:	4b82      	ldr	r3, [pc, #520]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	4b7e      	ldr	r3, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x108>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d157      	bne.n	80050f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e242      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x74>
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a75      	ldr	r2, [pc, #468]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xb0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x98>
 8005066:	4b70      	ldr	r3, [pc, #448]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6f      	ldr	r2, [pc, #444]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b6d      	ldr	r3, [pc, #436]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6c      	ldr	r2, [pc, #432]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xb0>
 8005080:	4b69      	ldr	r3, [pc, #420]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a68      	ldr	r2, [pc, #416]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b66      	ldr	r3, [pc, #408]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a65      	ldr	r2, [pc, #404]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fe f84e 	bl	8003140 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fe f84a 	bl	8003140 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e207      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xc0>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe f83a 	bl	8003140 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe f836 	bl	8003140 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e1f3      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b51      	ldr	r3, [pc, #324]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0xe8>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050fe:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510a:	4b47      	ldr	r3, [pc, #284]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005112:	2b08      	cmp	r3, #8
 8005114:	d11c      	bne.n	8005150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005116:	4b44      	ldr	r3, [pc, #272]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d116      	bne.n	8005150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_RCC_OscConfig+0x152>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1c7      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4937      	ldr	r1, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	e03a      	b.n	80051c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005158:	4b34      	ldr	r3, [pc, #208]	; (800522c <HAL_RCC_OscConfig+0x244>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fd ffef 	bl	8003140 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005166:	f7fd ffeb 	bl	8003140 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e1a8      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b28      	ldr	r3, [pc, #160]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4925      	ldr	r1, [pc, #148]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_RCC_OscConfig+0x244>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd ffce 	bl	8003140 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fd ffca 	bl	8003140 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e187      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d036      	beq.n	8005240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051da:	4b15      	ldr	r3, [pc, #84]	; (8005230 <HAL_RCC_OscConfig+0x248>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e0:	f7fd ffae 	bl	8003140 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e8:	f7fd ffaa 	bl	8003140 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e167      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_OscConfig+0x240>)
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x200>
 8005206:	e01b      	b.n	8005240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_OscConfig+0x248>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520e:	f7fd ff97 	bl	8003140 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005214:	e00e      	b.n	8005234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005216:	f7fd ff93 	bl	8003140 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d907      	bls.n	8005234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e150      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
 8005228:	40023800 	.word	0x40023800
 800522c:	42470000 	.word	0x42470000
 8005230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005234:	4b88      	ldr	r3, [pc, #544]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ea      	bne.n	8005216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8097 	beq.w	800537c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005252:	4b81      	ldr	r3, [pc, #516]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	4b7d      	ldr	r3, [pc, #500]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	4a7c      	ldr	r2, [pc, #496]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6413      	str	r3, [r2, #64]	; 0x40
 800526e:	4b7a      	ldr	r3, [pc, #488]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527e:	4b77      	ldr	r3, [pc, #476]	; (800545c <HAL_RCC_OscConfig+0x474>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	2b00      	cmp	r3, #0
 8005288:	d118      	bne.n	80052bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528a:	4b74      	ldr	r3, [pc, #464]	; (800545c <HAL_RCC_OscConfig+0x474>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a73      	ldr	r2, [pc, #460]	; (800545c <HAL_RCC_OscConfig+0x474>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005296:	f7fd ff53 	bl	8003140 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fd ff4f 	bl	8003140 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e10c      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	4b6a      	ldr	r3, [pc, #424]	; (800545c <HAL_RCC_OscConfig+0x474>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <HAL_RCC_OscConfig+0x2ea>
 80052c4:	4b64      	ldr	r3, [pc, #400]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	4a63      	ldr	r2, [pc, #396]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	6713      	str	r3, [r2, #112]	; 0x70
 80052d0:	e01c      	b.n	800530c <HAL_RCC_OscConfig+0x324>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x30c>
 80052da:	4b5f      	ldr	r3, [pc, #380]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a5e      	ldr	r2, [pc, #376]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
 80052e6:	4b5c      	ldr	r3, [pc, #368]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a5b      	ldr	r2, [pc, #364]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6713      	str	r3, [r2, #112]	; 0x70
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0x324>
 80052f4:	4b58      	ldr	r3, [pc, #352]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a57      	ldr	r2, [pc, #348]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	4b55      	ldr	r3, [pc, #340]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	4a54      	ldr	r2, [pc, #336]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d015      	beq.n	8005340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fd ff14 	bl	8003140 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531a:	e00a      	b.n	8005332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531c:	f7fd ff10 	bl	8003140 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0cb      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	4b49      	ldr	r3, [pc, #292]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ee      	beq.n	800531c <HAL_RCC_OscConfig+0x334>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005340:	f7fd fefe 	bl	8003140 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005346:	e00a      	b.n	800535e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fd fefa 	bl	8003140 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	; 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0b5      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535e:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ee      	bne.n	8005348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800536a:	7dfb      	ldrb	r3, [r7, #23]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d105      	bne.n	800537c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005370:	4b39      	ldr	r3, [pc, #228]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	4a38      	ldr	r2, [pc, #224]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a1 	beq.w	80054c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b08      	cmp	r3, #8
 8005390:	d05c      	beq.n	800544c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d141      	bne.n	800541e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <HAL_RCC_OscConfig+0x478>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fd fece 	bl	8003140 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fd feca 	bl	8003140 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e087      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	491b      	ldr	r1, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <HAL_RCC_OscConfig+0x478>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f6:	f7fd fea3 	bl	8003140 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fd fe9f 	bl	8003140 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e05c      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x416>
 800541c:	e054      	b.n	80054c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <HAL_RCC_OscConfig+0x478>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fd fe8c 	bl	8003140 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542c:	f7fd fe88 	bl	8003140 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e045      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCC_OscConfig+0x470>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x444>
 800544a:	e03d      	b.n	80054c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e038      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	40007000 	.word	0x40007000
 8005460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_RCC_OscConfig+0x4ec>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d028      	beq.n	80054c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d121      	bne.n	80054c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d11a      	bne.n	80054c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800549a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800549c:	4293      	cmp	r3, r2
 800549e:	d111      	bne.n	80054c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	3b01      	subs	r3, #1
 80054ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d107      	bne.n	80054c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800

080054d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0cc      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b68      	ldr	r3, [pc, #416]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d90c      	bls.n	8005514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b65      	ldr	r3, [pc, #404]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b63      	ldr	r3, [pc, #396]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0b8      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d020      	beq.n	8005562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4a58      	ldr	r2, [pc, #352]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a52      	ldr	r2, [pc, #328]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800554e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005550:	4b50      	ldr	r3, [pc, #320]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	494d      	ldr	r1, [pc, #308]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d044      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b47      	ldr	r3, [pc, #284]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d119      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e07f      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d003      	beq.n	8005596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005592:	2b03      	cmp	r3, #3
 8005594:	d107      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005596:	4b3f      	ldr	r3, [pc, #252]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e06f      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a6:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e067      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f023 0203 	bic.w	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4934      	ldr	r1, [pc, #208]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c8:	f7fd fdba 	bl	8003140 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d0:	f7fd fdb6 	bl	8003140 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	; 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e04f      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 020c 	and.w	r2, r3, #12
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d1eb      	bne.n	80055d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f8:	4b25      	ldr	r3, [pc, #148]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d20c      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b22      	ldr	r3, [pc, #136]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e032      	b.n	8005686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4916      	ldr	r1, [pc, #88]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	490e      	ldr	r1, [pc, #56]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800565e:	f000 f821 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 8005662:	4602      	mov	r2, r0
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	490a      	ldr	r1, [pc, #40]	; (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 8005670:	5ccb      	ldrb	r3, [r1, r3]
 8005672:	fa22 f303 	lsr.w	r3, r2, r3
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_ClockConfig+0x1c8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd fd1a 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40023c00 	.word	0x40023c00
 8005694:	40023800 	.word	0x40023800
 8005698:	08008968 	.word	0x08008968
 800569c:	20000010 	.word	0x20000010
 80056a0:	20000014 	.word	0x20000014

080056a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a8:	b094      	sub	sp, #80	; 0x50
 80056aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
 80056b0:	2300      	movs	r3, #0
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b4:	2300      	movs	r3, #0
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056bc:	4b79      	ldr	r3, [pc, #484]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d00d      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0x40>
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	f200 80e1 	bhi.w	8005890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x34>
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d003      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x3a>
 80056d6:	e0db      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d8:	4b73      	ldr	r3, [pc, #460]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056dc:	e0db      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056de:	4b73      	ldr	r3, [pc, #460]	; (80058ac <HAL_RCC_GetSysClockFreq+0x208>)
 80056e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056e2:	e0d8      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056e4:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ee:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d063      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fa:	4b6a      	ldr	r3, [pc, #424]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	2200      	movs	r2, #0
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
 8005704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570c:	633b      	str	r3, [r7, #48]	; 0x30
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
 8005712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005716:	4622      	mov	r2, r4
 8005718:	462b      	mov	r3, r5
 800571a:	f04f 0000 	mov.w	r0, #0
 800571e:	f04f 0100 	mov.w	r1, #0
 8005722:	0159      	lsls	r1, r3, #5
 8005724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005728:	0150      	lsls	r0, r2, #5
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4621      	mov	r1, r4
 8005730:	1a51      	subs	r1, r2, r1
 8005732:	6139      	str	r1, [r7, #16]
 8005734:	4629      	mov	r1, r5
 8005736:	eb63 0301 	sbc.w	r3, r3, r1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005748:	4659      	mov	r1, fp
 800574a:	018b      	lsls	r3, r1, #6
 800574c:	4651      	mov	r1, sl
 800574e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005752:	4651      	mov	r1, sl
 8005754:	018a      	lsls	r2, r1, #6
 8005756:	4651      	mov	r1, sl
 8005758:	ebb2 0801 	subs.w	r8, r2, r1
 800575c:	4659      	mov	r1, fp
 800575e:	eb63 0901 	sbc.w	r9, r3, r1
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005776:	4690      	mov	r8, r2
 8005778:	4699      	mov	r9, r3
 800577a:	4623      	mov	r3, r4
 800577c:	eb18 0303 	adds.w	r3, r8, r3
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	462b      	mov	r3, r5
 8005784:	eb49 0303 	adc.w	r3, r9, r3
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005796:	4629      	mov	r1, r5
 8005798:	024b      	lsls	r3, r1, #9
 800579a:	4621      	mov	r1, r4
 800579c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057a0:	4621      	mov	r1, r4
 80057a2:	024a      	lsls	r2, r1, #9
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057aa:	2200      	movs	r2, #0
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057b4:	f7fa fd74 	bl	80002a0 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4613      	mov	r3, r2
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c0:	e058      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c2:	4b38      	ldr	r3, [pc, #224]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	2200      	movs	r2, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	4611      	mov	r1, r2
 80057ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057d2:	623b      	str	r3, [r7, #32]
 80057d4:	2300      	movs	r3, #0
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	f04f 0000 	mov.w	r0, #0
 80057e4:	f04f 0100 	mov.w	r1, #0
 80057e8:	0159      	lsls	r1, r3, #5
 80057ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ee:	0150      	lsls	r0, r2, #5
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4641      	mov	r1, r8
 80057f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057fa:	4649      	mov	r1, r9
 80057fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800580c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005814:	ebb2 040a 	subs.w	r4, r2, sl
 8005818:	eb63 050b 	sbc.w	r5, r3, fp
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	00eb      	lsls	r3, r5, #3
 8005826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582a:	00e2      	lsls	r2, r4, #3
 800582c:	4614      	mov	r4, r2
 800582e:	461d      	mov	r5, r3
 8005830:	4643      	mov	r3, r8
 8005832:	18e3      	adds	r3, r4, r3
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	464b      	mov	r3, r9
 8005838:	eb45 0303 	adc.w	r3, r5, r3
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800584a:	4629      	mov	r1, r5
 800584c:	028b      	lsls	r3, r1, #10
 800584e:	4621      	mov	r1, r4
 8005850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005854:	4621      	mov	r1, r4
 8005856:	028a      	lsls	r2, r1, #10
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585e:	2200      	movs	r2, #0
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	61fa      	str	r2, [r7, #28]
 8005864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005868:	f7fa fd1a 	bl	80002a0 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4613      	mov	r3, r2
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	3301      	adds	r3, #1
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588e:	e002      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005898:	4618      	mov	r0, r3
 800589a:	3750      	adds	r7, #80	; 0x50
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	007a1200 	.word	0x007a1200

080058b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000010 	.word	0x20000010

080058c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058cc:	f7ff fff0 	bl	80058b0 <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	0a9b      	lsrs	r3, r3, #10
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4903      	ldr	r1, [pc, #12]	; (80058ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	08008978 	.word	0x08008978

080058f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005920:	2b00      	cmp	r3, #0
 8005922:	d075      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005924:	4b91      	ldr	r3, [pc, #580]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800592a:	f7fd fc09 	bl	8003140 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005930:	e008      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005932:	f7fd fc05 	bl	8003140 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e189      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005944:	4b8a      	ldr	r3, [pc, #552]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f0      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	019a      	lsls	r2, r3, #6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	071b      	lsls	r3, r3, #28
 8005968:	4981      	ldr	r1, [pc, #516]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01f      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800597c:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005982:	0f1b      	lsrs	r3, r3, #28
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	019a      	lsls	r2, r3, #6
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	431a      	orrs	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	071b      	lsls	r3, r3, #28
 800599c:	4974      	ldr	r1, [pc, #464]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059a4:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059aa:	f023 021f 	bic.w	r2, r3, #31
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	496e      	ldr	r1, [pc, #440]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	019a      	lsls	r2, r3, #6
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	071b      	lsls	r3, r3, #28
 80059dc:	4964      	ldr	r1, [pc, #400]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059e4:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ea:	f7fd fba9 	bl	8003140 <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059f2:	f7fd fba5 	bl	8003140 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e129      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a04:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d079      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a28:	4b52      	ldr	r3, [pc, #328]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a2e:	f7fd fb87 	bl	8003140 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a36:	f7fd fb83 	bl	8003140 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e107      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a48:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a54:	d0ef      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d020      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	0f1b      	lsrs	r3, r3, #28
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	019a      	lsls	r2, r3, #6
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	071b      	lsls	r3, r3, #28
 8005a82:	493b      	ldr	r1, [pc, #236]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a8a:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	4934      	ldr	r1, [pc, #208]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ab0:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab6:	0e1b      	lsrs	r3, r3, #24
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	019a      	lsls	r2, r3, #6
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	071b      	lsls	r3, r3, #28
 8005ad0:	4927      	ldr	r1, [pc, #156]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ade:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	4922      	ldr	r1, [pc, #136]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aee:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005af4:	f7fd fb24 	bl	8003140 <HAL_GetTick>
 8005af8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005afc:	f7fd fb20 	bl	8003140 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e0a4      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1a:	d1ef      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 808b 	beq.w	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b38:	6413      	str	r3, [r2, #64]	; 0x40
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a0b      	ldr	r2, [pc, #44]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b52:	f7fd faf5 	bl	8003140 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b58:	e010      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b5a:	f7fd faf1 	bl	8003140 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d909      	bls.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e075      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b6c:	42470068 	.word	0x42470068
 8005b70:	40023800 	.word	0x40023800
 8005b74:	42470070 	.word	0x42470070
 8005b78:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b7c:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0e8      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02f      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ba6:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bb0:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bbc:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bc2:	4b28      	ldr	r3, [pc, #160]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d114      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005bce:	f7fd fab7 	bl	8003140 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd4:	e00a      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd6:	f7fd fab3 	bl	8003140 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d901      	bls.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e035      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bec:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ee      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c04:	d10d      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c06:	4b17      	ldr	r3, [pc, #92]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	4912      	ldr	r1, [pc, #72]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]
 8005c20:	e005      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c2c:	6093      	str	r3, [r2, #8]
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3a:	490a      	ldr	r1, [pc, #40]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40007000 	.word	0x40007000
 8005c64:	40023800 	.word	0x40023800
 8005c68:	42470e40 	.word	0x42470e40
 8005c6c:	424711e0 	.word	0x424711e0

08005c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e07b      	b.n	8005d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d108      	bne.n	8005c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c92:	d009      	beq.n	8005ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	61da      	str	r2, [r3, #28]
 8005c9a:	e005      	b.n	8005ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc fd66 	bl	8002794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	ea42 0103 	orr.w	r1, r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0104 	and.w	r1, r3, #4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f003 0210 	and.w	r2, r3, #16
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e01a      	b.n	8005dca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005daa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc fd39 	bl	8002824 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b088      	sub	sp, #32
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_SPI_Transmit+0x22>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e12d      	b.n	8006050 <HAL_SPI_Transmit+0x27e>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfc:	f7fd f9a0 	bl	8003140 <HAL_GetTick>
 8005e00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d002      	beq.n	8005e18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e16:	e116      	b.n	8006046 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Transmit+0x52>
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e28:	e10d      	b.n	8006046 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e70:	d10f      	bne.n	8005e92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d007      	beq.n	8005eb0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d14f      	bne.n	8005f5a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_Transmit+0xf6>
 8005ec2:	8afb      	ldrh	r3, [r7, #22]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d142      	bne.n	8005f4e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eec:	e02f      	b.n	8005f4e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d112      	bne.n	8005f22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f20:	e015      	b.n	8005f4e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f22:	f7fd f90d 	bl	8003140 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d803      	bhi.n	8005f3a <HAL_SPI_Transmit+0x168>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_Transmit+0x16e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f4c:	e07b      	b.n	8006046 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ca      	bne.n	8005eee <HAL_SPI_Transmit+0x11c>
 8005f58:	e050      	b.n	8005ffc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Transmit+0x196>
 8005f62:	8afb      	ldrh	r3, [r7, #22]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d144      	bne.n	8005ff2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f8e:	e030      	b.n	8005ff2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d113      	bne.n	8005fc6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fc4:	e015      	b.n	8005ff2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc6:	f7fd f8bb 	bl	8003140 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d803      	bhi.n	8005fde <HAL_SPI_Transmit+0x20c>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_Transmit+0x212>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ff0:	e029      	b.n	8006046 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1c9      	bne.n	8005f90 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f8bf 	bl	8006184 <SPI_EndRxTxTransaction>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e003      	b.n	8006046 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800604e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006066:	b2db      	uxtb	r3, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006084:	f7fd f85c 	bl	8003140 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4413      	add	r3, r2
 8006092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006094:	f7fd f854 	bl	8003140 <HAL_GetTick>
 8006098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	015b      	lsls	r3, r3, #5
 80060a0:	0d1b      	lsrs	r3, r3, #20
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060aa:	e054      	b.n	8006156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d050      	beq.n	8006156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060b4:	f7fd f844 	bl	8003140 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d902      	bls.n	80060ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d13d      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e2:	d111      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ec:	d004      	beq.n	80060f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f6:	d107      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d10f      	bne.n	8006132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e017      	b.n	8006176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3b01      	subs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	bf0c      	ite	eq
 8006166:	2301      	moveq	r3, #1
 8006168:	2300      	movne	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	429a      	cmp	r2, r3
 8006172:	d19b      	bne.n	80060ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000010 	.word	0x20000010

08006184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2201      	movs	r2, #1
 8006198:	2102      	movs	r1, #2
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff ff6a 	bl	8006074 <SPI_WaitFlagStateUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f043 0220 	orr.w	r2, r3, #32
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e032      	b.n	800621c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061b6:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <SPI_EndRxTxTransaction+0xa0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <SPI_EndRxTxTransaction+0xa4>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	0d5b      	lsrs	r3, r3, #21
 80061c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d4:	d112      	bne.n	80061fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff47 	bl	8006074 <SPI_WaitFlagStateUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d016      	beq.n	800621a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e00f      	b.n	800621c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3b01      	subs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d0f2      	beq.n	80061fc <SPI_EndRxTxTransaction+0x78>
 8006216:	e000      	b.n	800621a <SPI_EndRxTxTransaction+0x96>
        break;
 8006218:	bf00      	nop
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000010 	.word	0x20000010
 8006228:	165e9f81 	.word	0x165e9f81

0800622c <findslot>:
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <findslot+0x2c>)
 800622e:	b510      	push	{r4, lr}
 8006230:	4604      	mov	r4, r0
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	b118      	cbz	r0, 800623e <findslot+0x12>
 8006236:	6a03      	ldr	r3, [r0, #32]
 8006238:	b90b      	cbnz	r3, 800623e <findslot+0x12>
 800623a:	f000 fb25 	bl	8006888 <__sinit>
 800623e:	2c13      	cmp	r4, #19
 8006240:	d807      	bhi.n	8006252 <findslot+0x26>
 8006242:	4806      	ldr	r0, [pc, #24]	; (800625c <findslot+0x30>)
 8006244:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006248:	3201      	adds	r2, #1
 800624a:	d002      	beq.n	8006252 <findslot+0x26>
 800624c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006250:	bd10      	pop	{r4, pc}
 8006252:	2000      	movs	r0, #0
 8006254:	e7fc      	b.n	8006250 <findslot+0x24>
 8006256:	bf00      	nop
 8006258:	2000007c 	.word	0x2000007c
 800625c:	20025a54 	.word	0x20025a54

08006260 <error>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	4604      	mov	r4, r0
 8006264:	f000 fcda 	bl	8006c1c <__errno>
 8006268:	2613      	movs	r6, #19
 800626a:	4605      	mov	r5, r0
 800626c:	2700      	movs	r7, #0
 800626e:	4630      	mov	r0, r6
 8006270:	4639      	mov	r1, r7
 8006272:	beab      	bkpt	0x00ab
 8006274:	4606      	mov	r6, r0
 8006276:	602e      	str	r6, [r5, #0]
 8006278:	4620      	mov	r0, r4
 800627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800627c <checkerror>:
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d101      	bne.n	8006284 <checkerror+0x8>
 8006280:	f7ff bfee 	b.w	8006260 <error>
 8006284:	4770      	bx	lr

08006286 <_swiread>:
 8006286:	b530      	push	{r4, r5, lr}
 8006288:	b085      	sub	sp, #20
 800628a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800628e:	9203      	str	r2, [sp, #12]
 8006290:	2406      	movs	r4, #6
 8006292:	ad01      	add	r5, sp, #4
 8006294:	4620      	mov	r0, r4
 8006296:	4629      	mov	r1, r5
 8006298:	beab      	bkpt	0x00ab
 800629a:	4604      	mov	r4, r0
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ffed 	bl	800627c <checkerror>
 80062a2:	b005      	add	sp, #20
 80062a4:	bd30      	pop	{r4, r5, pc}

080062a6 <_read>:
 80062a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a8:	4615      	mov	r5, r2
 80062aa:	9101      	str	r1, [sp, #4]
 80062ac:	f7ff ffbe 	bl	800622c <findslot>
 80062b0:	9901      	ldr	r1, [sp, #4]
 80062b2:	4604      	mov	r4, r0
 80062b4:	b938      	cbnz	r0, 80062c6 <_read+0x20>
 80062b6:	f000 fcb1 	bl	8006c1c <__errno>
 80062ba:	2309      	movs	r3, #9
 80062bc:	6003      	str	r3, [r0, #0]
 80062be:	f04f 30ff 	mov.w	r0, #4294967295
 80062c2:	b003      	add	sp, #12
 80062c4:	bd30      	pop	{r4, r5, pc}
 80062c6:	6800      	ldr	r0, [r0, #0]
 80062c8:	462a      	mov	r2, r5
 80062ca:	f7ff ffdc 	bl	8006286 <_swiread>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d0f7      	beq.n	80062c2 <_read+0x1c>
 80062d2:	6863      	ldr	r3, [r4, #4]
 80062d4:	1a2a      	subs	r2, r5, r0
 80062d6:	4413      	add	r3, r2
 80062d8:	6063      	str	r3, [r4, #4]
 80062da:	4610      	mov	r0, r2
 80062dc:	e7f1      	b.n	80062c2 <_read+0x1c>

080062de <_swilseek>:
 80062de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	4616      	mov	r6, r2
 80062e4:	f7ff ffa2 	bl	800622c <findslot>
 80062e8:	4605      	mov	r5, r0
 80062ea:	b940      	cbnz	r0, 80062fe <_swilseek+0x20>
 80062ec:	f000 fc96 	bl	8006c1c <__errno>
 80062f0:	2309      	movs	r3, #9
 80062f2:	6003      	str	r3, [r0, #0]
 80062f4:	f04f 34ff 	mov.w	r4, #4294967295
 80062f8:	4620      	mov	r0, r4
 80062fa:	b003      	add	sp, #12
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fe:	2e02      	cmp	r6, #2
 8006300:	d903      	bls.n	800630a <_swilseek+0x2c>
 8006302:	f000 fc8b 	bl	8006c1c <__errno>
 8006306:	2316      	movs	r3, #22
 8006308:	e7f3      	b.n	80062f2 <_swilseek+0x14>
 800630a:	2e01      	cmp	r6, #1
 800630c:	d112      	bne.n	8006334 <_swilseek+0x56>
 800630e:	6843      	ldr	r3, [r0, #4]
 8006310:	18e4      	adds	r4, r4, r3
 8006312:	d4f6      	bmi.n	8006302 <_swilseek+0x24>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	260a      	movs	r6, #10
 8006318:	e9cd 3400 	strd	r3, r4, [sp]
 800631c:	466f      	mov	r7, sp
 800631e:	4630      	mov	r0, r6
 8006320:	4639      	mov	r1, r7
 8006322:	beab      	bkpt	0x00ab
 8006324:	4606      	mov	r6, r0
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ffa8 	bl	800627c <checkerror>
 800632c:	2800      	cmp	r0, #0
 800632e:	dbe1      	blt.n	80062f4 <_swilseek+0x16>
 8006330:	606c      	str	r4, [r5, #4]
 8006332:	e7e1      	b.n	80062f8 <_swilseek+0x1a>
 8006334:	2e02      	cmp	r6, #2
 8006336:	6803      	ldr	r3, [r0, #0]
 8006338:	d1ec      	bne.n	8006314 <_swilseek+0x36>
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	260c      	movs	r6, #12
 800633e:	466f      	mov	r7, sp
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	beab      	bkpt	0x00ab
 8006346:	4606      	mov	r6, r0
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ff97 	bl	800627c <checkerror>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	d0d0      	beq.n	80062f4 <_swilseek+0x16>
 8006352:	4404      	add	r4, r0
 8006354:	e7de      	b.n	8006314 <_swilseek+0x36>

08006356 <_lseek>:
 8006356:	f7ff bfc2 	b.w	80062de <_swilseek>

0800635a <_swiwrite>:
 800635a:	b530      	push	{r4, r5, lr}
 800635c:	b085      	sub	sp, #20
 800635e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	2405      	movs	r4, #5
 8006366:	ad01      	add	r5, sp, #4
 8006368:	4620      	mov	r0, r4
 800636a:	4629      	mov	r1, r5
 800636c:	beab      	bkpt	0x00ab
 800636e:	4604      	mov	r4, r0
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff ff83 	bl	800627c <checkerror>
 8006376:	b005      	add	sp, #20
 8006378:	bd30      	pop	{r4, r5, pc}

0800637a <_write>:
 800637a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800637c:	4615      	mov	r5, r2
 800637e:	9101      	str	r1, [sp, #4]
 8006380:	f7ff ff54 	bl	800622c <findslot>
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	4604      	mov	r4, r0
 8006388:	b930      	cbnz	r0, 8006398 <_write+0x1e>
 800638a:	f000 fc47 	bl	8006c1c <__errno>
 800638e:	2309      	movs	r3, #9
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	e012      	b.n	80063be <_write+0x44>
 8006398:	6800      	ldr	r0, [r0, #0]
 800639a:	462a      	mov	r2, r5
 800639c:	f7ff ffdd 	bl	800635a <_swiwrite>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbf6      	blt.n	8006392 <_write+0x18>
 80063a4:	6862      	ldr	r2, [r4, #4]
 80063a6:	1a2b      	subs	r3, r5, r0
 80063a8:	441a      	add	r2, r3
 80063aa:	42a8      	cmp	r0, r5
 80063ac:	6062      	str	r2, [r4, #4]
 80063ae:	d105      	bne.n	80063bc <_write+0x42>
 80063b0:	2000      	movs	r0, #0
 80063b2:	b003      	add	sp, #12
 80063b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063b8:	f7ff bf52 	b.w	8006260 <error>
 80063bc:	4618      	mov	r0, r3
 80063be:	b003      	add	sp, #12
 80063c0:	bd30      	pop	{r4, r5, pc}

080063c2 <_swiclose>:
 80063c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c4:	2402      	movs	r4, #2
 80063c6:	9001      	str	r0, [sp, #4]
 80063c8:	ad01      	add	r5, sp, #4
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	beab      	bkpt	0x00ab
 80063d0:	4604      	mov	r4, r0
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff ff52 	bl	800627c <checkerror>
 80063d8:	b003      	add	sp, #12
 80063da:	bd30      	pop	{r4, r5, pc}

080063dc <_close>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4605      	mov	r5, r0
 80063e0:	f7ff ff24 	bl	800622c <findslot>
 80063e4:	4604      	mov	r4, r0
 80063e6:	b930      	cbnz	r0, 80063f6 <_close+0x1a>
 80063e8:	f000 fc18 	bl	8006c1c <__errno>
 80063ec:	2309      	movs	r3, #9
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	3d01      	subs	r5, #1
 80063f8:	2d01      	cmp	r5, #1
 80063fa:	d809      	bhi.n	8006410 <_close+0x34>
 80063fc:	4b09      	ldr	r3, [pc, #36]	; (8006424 <_close+0x48>)
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	d104      	bne.n	8006410 <_close+0x34>
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	6003      	str	r3, [r0, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e7f1      	b.n	80063f4 <_close+0x18>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	f7ff ffd6 	bl	80063c2 <_swiclose>
 8006416:	2800      	cmp	r0, #0
 8006418:	d1ec      	bne.n	80063f4 <_close+0x18>
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	e7e8      	b.n	80063f4 <_close+0x18>
 8006422:	bf00      	nop
 8006424:	20025a54 	.word	0x20025a54

08006428 <_swistat>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	f7ff fefe 	bl	800622c <findslot>
 8006430:	4605      	mov	r5, r0
 8006432:	b930      	cbnz	r0, 8006442 <_swistat+0x1a>
 8006434:	f000 fbf2 	bl	8006c1c <__errno>
 8006438:	2309      	movs	r3, #9
 800643a:	6003      	str	r3, [r0, #0]
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006450:	260c      	movs	r6, #12
 8006452:	4630      	mov	r0, r6
 8006454:	4629      	mov	r1, r5
 8006456:	beab      	bkpt	0x00ab
 8006458:	4605      	mov	r5, r0
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff ff0e 	bl	800627c <checkerror>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	bf1c      	itt	ne
 8006464:	6120      	strne	r0, [r4, #16]
 8006466:	2000      	movne	r0, #0
 8006468:	e7ea      	b.n	8006440 <_swistat+0x18>

0800646a <_fstat>:
 800646a:	460b      	mov	r3, r1
 800646c:	b510      	push	{r4, lr}
 800646e:	2100      	movs	r1, #0
 8006470:	4604      	mov	r4, r0
 8006472:	2258      	movs	r2, #88	; 0x58
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fb83 	bl	8006b80 <memset>
 800647a:	4601      	mov	r1, r0
 800647c:	4620      	mov	r0, r4
 800647e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006482:	f7ff bfd1 	b.w	8006428 <_swistat>

08006486 <_stat>:
 8006486:	b538      	push	{r3, r4, r5, lr}
 8006488:	460d      	mov	r5, r1
 800648a:	4604      	mov	r4, r0
 800648c:	2258      	movs	r2, #88	; 0x58
 800648e:	2100      	movs	r1, #0
 8006490:	4628      	mov	r0, r5
 8006492:	f000 fb75 	bl	8006b80 <memset>
 8006496:	4620      	mov	r0, r4
 8006498:	2100      	movs	r1, #0
 800649a:	f000 f811 	bl	80064c0 <_swiopen>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	4604      	mov	r4, r0
 80064a2:	d00b      	beq.n	80064bc <_stat+0x36>
 80064a4:	686b      	ldr	r3, [r5, #4]
 80064a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064aa:	606b      	str	r3, [r5, #4]
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7ff ffbb 	bl	8006428 <_swistat>
 80064b2:	4605      	mov	r5, r0
 80064b4:	4620      	mov	r0, r4
 80064b6:	f7ff ff91 	bl	80063dc <_close>
 80064ba:	462c      	mov	r4, r5
 80064bc:	4620      	mov	r0, r4
 80064be:	bd38      	pop	{r3, r4, r5, pc}

080064c0 <_swiopen>:
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006570 <_swiopen+0xb0>
 80064c8:	b097      	sub	sp, #92	; 0x5c
 80064ca:	4607      	mov	r7, r0
 80064cc:	460e      	mov	r6, r1
 80064ce:	2500      	movs	r5, #0
 80064d0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80064d4:	1c61      	adds	r1, r4, #1
 80064d6:	d037      	beq.n	8006548 <_swiopen+0x88>
 80064d8:	3501      	adds	r5, #1
 80064da:	2d14      	cmp	r5, #20
 80064dc:	d1f8      	bne.n	80064d0 <_swiopen+0x10>
 80064de:	f000 fb9d 	bl	8006c1c <__errno>
 80064e2:	2318      	movs	r3, #24
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	f04f 34ff 	mov.w	r4, #4294967295
 80064ea:	e03d      	b.n	8006568 <_swiopen+0xa8>
 80064ec:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80064f0:	f240 6301 	movw	r3, #1537	; 0x601
 80064f4:	07b2      	lsls	r2, r6, #30
 80064f6:	bf48      	it	mi
 80064f8:	f044 0402 	orrmi.w	r4, r4, #2
 80064fc:	421e      	tst	r6, r3
 80064fe:	bf18      	it	ne
 8006500:	f044 0404 	orrne.w	r4, r4, #4
 8006504:	0733      	lsls	r3, r6, #28
 8006506:	bf48      	it	mi
 8006508:	f024 0404 	bicmi.w	r4, r4, #4
 800650c:	4638      	mov	r0, r7
 800650e:	bf48      	it	mi
 8006510:	f044 0408 	orrmi.w	r4, r4, #8
 8006514:	9700      	str	r7, [sp, #0]
 8006516:	f7f9 fe6b 	bl	80001f0 <strlen>
 800651a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800651e:	2401      	movs	r4, #1
 8006520:	4620      	mov	r0, r4
 8006522:	4649      	mov	r1, r9
 8006524:	beab      	bkpt	0x00ab
 8006526:	4604      	mov	r4, r0
 8006528:	2c00      	cmp	r4, #0
 800652a:	db08      	blt.n	800653e <_swiopen+0x7e>
 800652c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8006530:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8006534:	2300      	movs	r3, #0
 8006536:	f8c8 3004 	str.w	r3, [r8, #4]
 800653a:	462c      	mov	r4, r5
 800653c:	e014      	b.n	8006568 <_swiopen+0xa8>
 800653e:	4620      	mov	r0, r4
 8006540:	f7ff fe8e 	bl	8006260 <error>
 8006544:	4604      	mov	r4, r0
 8006546:	e00f      	b.n	8006568 <_swiopen+0xa8>
 8006548:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800654c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006550:	46e9      	mov	r9, sp
 8006552:	d1cb      	bne.n	80064ec <_swiopen+0x2c>
 8006554:	4649      	mov	r1, r9
 8006556:	4638      	mov	r0, r7
 8006558:	f7ff ff95 	bl	8006486 <_stat>
 800655c:	3001      	adds	r0, #1
 800655e:	d0c5      	beq.n	80064ec <_swiopen+0x2c>
 8006560:	f000 fb5c 	bl	8006c1c <__errno>
 8006564:	2311      	movs	r3, #17
 8006566:	6003      	str	r3, [r0, #0]
 8006568:	4620      	mov	r0, r4
 800656a:	b017      	add	sp, #92	; 0x5c
 800656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006570:	20025a54 	.word	0x20025a54

08006574 <_get_semihosting_exts>:
 8006574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
 800657c:	482a      	ldr	r0, [pc, #168]	; (8006628 <_get_semihosting_exts+0xb4>)
 800657e:	2100      	movs	r1, #0
 8006580:	4615      	mov	r5, r2
 8006582:	f7ff ff9d 	bl	80064c0 <_swiopen>
 8006586:	462a      	mov	r2, r5
 8006588:	4604      	mov	r4, r0
 800658a:	2100      	movs	r1, #0
 800658c:	4630      	mov	r0, r6
 800658e:	f000 faf7 	bl	8006b80 <memset>
 8006592:	1c63      	adds	r3, r4, #1
 8006594:	d016      	beq.n	80065c4 <_get_semihosting_exts+0x50>
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff fe48 	bl	800622c <findslot>
 800659c:	f04f 080c 	mov.w	r8, #12
 80065a0:	4681      	mov	r9, r0
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	beab      	bkpt	0x00ab
 80065a8:	4680      	mov	r8, r0
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fe66 	bl	800627c <checkerror>
 80065b0:	2803      	cmp	r0, #3
 80065b2:	dd02      	ble.n	80065ba <_get_semihosting_exts+0x46>
 80065b4:	1ec3      	subs	r3, r0, #3
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	dc08      	bgt.n	80065cc <_get_semihosting_exts+0x58>
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff ff0e 	bl	80063dc <_close>
 80065c0:	f04f 34ff 	mov.w	r4, #4294967295
 80065c4:	4620      	mov	r0, r4
 80065c6:	b003      	add	sp, #12
 80065c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065cc:	2204      	movs	r2, #4
 80065ce:	eb0d 0102 	add.w	r1, sp, r2
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff fe67 	bl	80062a6 <_read>
 80065d8:	2803      	cmp	r0, #3
 80065da:	ddee      	ble.n	80065ba <_get_semihosting_exts+0x46>
 80065dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80065e0:	2b53      	cmp	r3, #83	; 0x53
 80065e2:	d1ea      	bne.n	80065ba <_get_semihosting_exts+0x46>
 80065e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80065e8:	2b48      	cmp	r3, #72	; 0x48
 80065ea:	d1e6      	bne.n	80065ba <_get_semihosting_exts+0x46>
 80065ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80065f0:	2b46      	cmp	r3, #70	; 0x46
 80065f2:	d1e2      	bne.n	80065ba <_get_semihosting_exts+0x46>
 80065f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065f8:	2b42      	cmp	r3, #66	; 0x42
 80065fa:	d1de      	bne.n	80065ba <_get_semihosting_exts+0x46>
 80065fc:	2201      	movs	r2, #1
 80065fe:	4639      	mov	r1, r7
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff fe6c 	bl	80062de <_swilseek>
 8006606:	2800      	cmp	r0, #0
 8006608:	dbd7      	blt.n	80065ba <_get_semihosting_exts+0x46>
 800660a:	462a      	mov	r2, r5
 800660c:	4631      	mov	r1, r6
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff fe49 	bl	80062a6 <_read>
 8006614:	4605      	mov	r5, r0
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff fee0 	bl	80063dc <_close>
 800661c:	4628      	mov	r0, r5
 800661e:	f7ff fe2d 	bl	800627c <checkerror>
 8006622:	4604      	mov	r4, r0
 8006624:	e7ce      	b.n	80065c4 <_get_semihosting_exts+0x50>
 8006626:	bf00      	nop
 8006628:	08008980 	.word	0x08008980

0800662c <initialise_semihosting_exts>:
 800662c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800662e:	4d0a      	ldr	r5, [pc, #40]	; (8006658 <initialise_semihosting_exts+0x2c>)
 8006630:	4c0a      	ldr	r4, [pc, #40]	; (800665c <initialise_semihosting_exts+0x30>)
 8006632:	2100      	movs	r1, #0
 8006634:	2201      	movs	r2, #1
 8006636:	a801      	add	r0, sp, #4
 8006638:	6029      	str	r1, [r5, #0]
 800663a:	6022      	str	r2, [r4, #0]
 800663c:	f7ff ff9a 	bl	8006574 <_get_semihosting_exts>
 8006640:	2800      	cmp	r0, #0
 8006642:	dd07      	ble.n	8006654 <initialise_semihosting_exts+0x28>
 8006644:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006648:	f003 0201 	and.w	r2, r3, #1
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	b003      	add	sp, #12
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	2000001c 	.word	0x2000001c
 800665c:	20000020 	.word	0x20000020

08006660 <_has_ext_stdout_stderr>:
 8006660:	b510      	push	{r4, lr}
 8006662:	4c04      	ldr	r4, [pc, #16]	; (8006674 <_has_ext_stdout_stderr+0x14>)
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	da01      	bge.n	800666e <_has_ext_stdout_stderr+0xe>
 800666a:	f7ff ffdf 	bl	800662c <initialise_semihosting_exts>
 800666e:	6820      	ldr	r0, [r4, #0]
 8006670:	bd10      	pop	{r4, pc}
 8006672:	bf00      	nop
 8006674:	20000020 	.word	0x20000020

08006678 <initialise_monitor_handles>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	b085      	sub	sp, #20
 800667e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8006730 <initialise_monitor_handles+0xb8>
 8006682:	f8cd 9004 	str.w	r9, [sp, #4]
 8006686:	2303      	movs	r3, #3
 8006688:	2400      	movs	r4, #0
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	af01      	add	r7, sp, #4
 800668e:	9402      	str	r4, [sp, #8]
 8006690:	2501      	movs	r5, #1
 8006692:	4628      	mov	r0, r5
 8006694:	4639      	mov	r1, r7
 8006696:	beab      	bkpt	0x00ab
 8006698:	4605      	mov	r5, r0
 800669a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006734 <initialise_monitor_handles+0xbc>
 800669e:	4623      	mov	r3, r4
 80066a0:	4c20      	ldr	r4, [pc, #128]	; (8006724 <initialise_monitor_handles+0xac>)
 80066a2:	f8c8 5000 	str.w	r5, [r8]
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80066ae:	3301      	adds	r3, #1
 80066b0:	2b14      	cmp	r3, #20
 80066b2:	d1fa      	bne.n	80066aa <initialise_monitor_handles+0x32>
 80066b4:	f7ff ffd4 	bl	8006660 <_has_ext_stdout_stderr>
 80066b8:	4d1b      	ldr	r5, [pc, #108]	; (8006728 <initialise_monitor_handles+0xb0>)
 80066ba:	b1d0      	cbz	r0, 80066f2 <initialise_monitor_handles+0x7a>
 80066bc:	f04f 0a03 	mov.w	sl, #3
 80066c0:	2304      	movs	r3, #4
 80066c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80066c6:	2601      	movs	r6, #1
 80066c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80066cc:	9302      	str	r3, [sp, #8]
 80066ce:	4630      	mov	r0, r6
 80066d0:	4639      	mov	r1, r7
 80066d2:	beab      	bkpt	0x00ab
 80066d4:	4683      	mov	fp, r0
 80066d6:	4b15      	ldr	r3, [pc, #84]	; (800672c <initialise_monitor_handles+0xb4>)
 80066d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80066dc:	f8c3 b000 	str.w	fp, [r3]
 80066e0:	2308      	movs	r3, #8
 80066e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	beab      	bkpt	0x00ab
 80066ee:	4606      	mov	r6, r0
 80066f0:	602e      	str	r6, [r5, #0]
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	bf02      	ittt	eq
 80066f8:	4b0c      	ldreq	r3, [pc, #48]	; (800672c <initialise_monitor_handles+0xb4>)
 80066fa:	681b      	ldreq	r3, [r3, #0]
 80066fc:	602b      	streq	r3, [r5, #0]
 80066fe:	2600      	movs	r6, #0
 8006700:	f8d8 3000 	ldr.w	r3, [r8]
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	6066      	str	r6, [r4, #4]
 8006708:	f7ff ffaa 	bl	8006660 <_has_ext_stdout_stderr>
 800670c:	b130      	cbz	r0, 800671c <initialise_monitor_handles+0xa4>
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <initialise_monitor_handles+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800671c:	b005      	add	sp, #20
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006722:	bf00      	nop
 8006724:	20025a54 	.word	0x20025a54
 8006728:	20025a48 	.word	0x20025a48
 800672c:	20025a50 	.word	0x20025a50
 8006730:	08008996 	.word	0x08008996
 8006734:	20025a4c 	.word	0x20025a4c

08006738 <_isatty>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	f7ff fd77 	bl	800622c <findslot>
 800673e:	2509      	movs	r5, #9
 8006740:	4604      	mov	r4, r0
 8006742:	b920      	cbnz	r0, 800674e <_isatty+0x16>
 8006744:	f000 fa6a 	bl	8006c1c <__errno>
 8006748:	6005      	str	r5, [r0, #0]
 800674a:	4620      	mov	r0, r4
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	4628      	mov	r0, r5
 8006750:	4621      	mov	r1, r4
 8006752:	beab      	bkpt	0x00ab
 8006754:	4604      	mov	r4, r0
 8006756:	2c01      	cmp	r4, #1
 8006758:	d0f7      	beq.n	800674a <_isatty+0x12>
 800675a:	f000 fa5f 	bl	8006c1c <__errno>
 800675e:	2400      	movs	r4, #0
 8006760:	4605      	mov	r5, r0
 8006762:	2613      	movs	r6, #19
 8006764:	4630      	mov	r0, r6
 8006766:	4621      	mov	r1, r4
 8006768:	beab      	bkpt	0x00ab
 800676a:	4606      	mov	r6, r0
 800676c:	602e      	str	r6, [r5, #0]
 800676e:	e7ec      	b.n	800674a <_isatty+0x12>

08006770 <std>:
 8006770:	2300      	movs	r3, #0
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	e9c0 3300 	strd	r3, r3, [r0]
 800677a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677e:	6083      	str	r3, [r0, #8]
 8006780:	8181      	strh	r1, [r0, #12]
 8006782:	6643      	str	r3, [r0, #100]	; 0x64
 8006784:	81c2      	strh	r2, [r0, #14]
 8006786:	6183      	str	r3, [r0, #24]
 8006788:	4619      	mov	r1, r3
 800678a:	2208      	movs	r2, #8
 800678c:	305c      	adds	r0, #92	; 0x5c
 800678e:	f000 f9f7 	bl	8006b80 <memset>
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <std+0x58>)
 8006794:	6263      	str	r3, [r4, #36]	; 0x24
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <std+0x5c>)
 8006798:	62a3      	str	r3, [r4, #40]	; 0x28
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <std+0x60>)
 800679c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <std+0x64>)
 80067a0:	6323      	str	r3, [r4, #48]	; 0x30
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <std+0x68>)
 80067a4:	6224      	str	r4, [r4, #32]
 80067a6:	429c      	cmp	r4, r3
 80067a8:	d006      	beq.n	80067b8 <std+0x48>
 80067aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067ae:	4294      	cmp	r4, r2
 80067b0:	d002      	beq.n	80067b8 <std+0x48>
 80067b2:	33d0      	adds	r3, #208	; 0xd0
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d105      	bne.n	80067c4 <std+0x54>
 80067b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c0:	f000 ba56 	b.w	8006c70 <__retarget_lock_init_recursive>
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	bf00      	nop
 80067c8:	080069d1 	.word	0x080069d1
 80067cc:	080069f3 	.word	0x080069f3
 80067d0:	08006a2b 	.word	0x08006a2b
 80067d4:	08006a4f 	.word	0x08006a4f
 80067d8:	20025af4 	.word	0x20025af4

080067dc <stdio_exit_handler>:
 80067dc:	4a02      	ldr	r2, [pc, #8]	; (80067e8 <stdio_exit_handler+0xc>)
 80067de:	4903      	ldr	r1, [pc, #12]	; (80067ec <stdio_exit_handler+0x10>)
 80067e0:	4803      	ldr	r0, [pc, #12]	; (80067f0 <stdio_exit_handler+0x14>)
 80067e2:	f000 b869 	b.w	80068b8 <_fwalk_sglue>
 80067e6:	bf00      	nop
 80067e8:	20000024 	.word	0x20000024
 80067ec:	0800751d 	.word	0x0800751d
 80067f0:	20000030 	.word	0x20000030

080067f4 <cleanup_stdio>:
 80067f4:	6841      	ldr	r1, [r0, #4]
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <cleanup_stdio+0x34>)
 80067f8:	4299      	cmp	r1, r3
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4604      	mov	r4, r0
 80067fe:	d001      	beq.n	8006804 <cleanup_stdio+0x10>
 8006800:	f000 fe8c 	bl	800751c <_fflush_r>
 8006804:	68a1      	ldr	r1, [r4, #8]
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <cleanup_stdio+0x38>)
 8006808:	4299      	cmp	r1, r3
 800680a:	d002      	beq.n	8006812 <cleanup_stdio+0x1e>
 800680c:	4620      	mov	r0, r4
 800680e:	f000 fe85 	bl	800751c <_fflush_r>
 8006812:	68e1      	ldr	r1, [r4, #12]
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <cleanup_stdio+0x3c>)
 8006816:	4299      	cmp	r1, r3
 8006818:	d004      	beq.n	8006824 <cleanup_stdio+0x30>
 800681a:	4620      	mov	r0, r4
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f000 be7c 	b.w	800751c <_fflush_r>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	20025af4 	.word	0x20025af4
 800682c:	20025b5c 	.word	0x20025b5c
 8006830:	20025bc4 	.word	0x20025bc4

08006834 <global_stdio_init.part.0>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <global_stdio_init.part.0+0x30>)
 8006838:	4c0b      	ldr	r4, [pc, #44]	; (8006868 <global_stdio_init.part.0+0x34>)
 800683a:	4a0c      	ldr	r2, [pc, #48]	; (800686c <global_stdio_init.part.0+0x38>)
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	4620      	mov	r0, r4
 8006840:	2200      	movs	r2, #0
 8006842:	2104      	movs	r1, #4
 8006844:	f7ff ff94 	bl	8006770 <std>
 8006848:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800684c:	2201      	movs	r2, #1
 800684e:	2109      	movs	r1, #9
 8006850:	f7ff ff8e 	bl	8006770 <std>
 8006854:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006858:	2202      	movs	r2, #2
 800685a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685e:	2112      	movs	r1, #18
 8006860:	f7ff bf86 	b.w	8006770 <std>
 8006864:	20025c2c 	.word	0x20025c2c
 8006868:	20025af4 	.word	0x20025af4
 800686c:	080067dd 	.word	0x080067dd

08006870 <__sfp_lock_acquire>:
 8006870:	4801      	ldr	r0, [pc, #4]	; (8006878 <__sfp_lock_acquire+0x8>)
 8006872:	f000 b9fe 	b.w	8006c72 <__retarget_lock_acquire_recursive>
 8006876:	bf00      	nop
 8006878:	20025c35 	.word	0x20025c35

0800687c <__sfp_lock_release>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__sfp_lock_release+0x8>)
 800687e:	f000 b9f9 	b.w	8006c74 <__retarget_lock_release_recursive>
 8006882:	bf00      	nop
 8006884:	20025c35 	.word	0x20025c35

08006888 <__sinit>:
 8006888:	b510      	push	{r4, lr}
 800688a:	4604      	mov	r4, r0
 800688c:	f7ff fff0 	bl	8006870 <__sfp_lock_acquire>
 8006890:	6a23      	ldr	r3, [r4, #32]
 8006892:	b11b      	cbz	r3, 800689c <__sinit+0x14>
 8006894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006898:	f7ff bff0 	b.w	800687c <__sfp_lock_release>
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <__sinit+0x28>)
 800689e:	6223      	str	r3, [r4, #32]
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <__sinit+0x2c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f5      	bne.n	8006894 <__sinit+0xc>
 80068a8:	f7ff ffc4 	bl	8006834 <global_stdio_init.part.0>
 80068ac:	e7f2      	b.n	8006894 <__sinit+0xc>
 80068ae:	bf00      	nop
 80068b0:	080067f5 	.word	0x080067f5
 80068b4:	20025c2c 	.word	0x20025c2c

080068b8 <_fwalk_sglue>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	4607      	mov	r7, r0
 80068be:	4688      	mov	r8, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	2600      	movs	r6, #0
 80068c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c8:	f1b9 0901 	subs.w	r9, r9, #1
 80068cc:	d505      	bpl.n	80068da <_fwalk_sglue+0x22>
 80068ce:	6824      	ldr	r4, [r4, #0]
 80068d0:	2c00      	cmp	r4, #0
 80068d2:	d1f7      	bne.n	80068c4 <_fwalk_sglue+0xc>
 80068d4:	4630      	mov	r0, r6
 80068d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d907      	bls.n	80068f0 <_fwalk_sglue+0x38>
 80068e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e4:	3301      	adds	r3, #1
 80068e6:	d003      	beq.n	80068f0 <_fwalk_sglue+0x38>
 80068e8:	4629      	mov	r1, r5
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	4306      	orrs	r6, r0
 80068f0:	3568      	adds	r5, #104	; 0x68
 80068f2:	e7e9      	b.n	80068c8 <_fwalk_sglue+0x10>

080068f4 <iprintf>:
 80068f4:	b40f      	push	{r0, r1, r2, r3}
 80068f6:	b507      	push	{r0, r1, r2, lr}
 80068f8:	4906      	ldr	r1, [pc, #24]	; (8006914 <iprintf+0x20>)
 80068fa:	ab04      	add	r3, sp, #16
 80068fc:	6808      	ldr	r0, [r1, #0]
 80068fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006902:	6881      	ldr	r1, [r0, #8]
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	f000 fad9 	bl	8006ebc <_vfiprintf_r>
 800690a:	b003      	add	sp, #12
 800690c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006910:	b004      	add	sp, #16
 8006912:	4770      	bx	lr
 8006914:	2000007c 	.word	0x2000007c

08006918 <_puts_r>:
 8006918:	6a03      	ldr	r3, [r0, #32]
 800691a:	b570      	push	{r4, r5, r6, lr}
 800691c:	6884      	ldr	r4, [r0, #8]
 800691e:	4605      	mov	r5, r0
 8006920:	460e      	mov	r6, r1
 8006922:	b90b      	cbnz	r3, 8006928 <_puts_r+0x10>
 8006924:	f7ff ffb0 	bl	8006888 <__sinit>
 8006928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800692a:	07db      	lsls	r3, r3, #31
 800692c:	d405      	bmi.n	800693a <_puts_r+0x22>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	0598      	lsls	r0, r3, #22
 8006932:	d402      	bmi.n	800693a <_puts_r+0x22>
 8006934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006936:	f000 f99c 	bl	8006c72 <__retarget_lock_acquire_recursive>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	0719      	lsls	r1, r3, #28
 800693e:	d513      	bpl.n	8006968 <_puts_r+0x50>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b18b      	cbz	r3, 8006968 <_puts_r+0x50>
 8006944:	3e01      	subs	r6, #1
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800694c:	3b01      	subs	r3, #1
 800694e:	60a3      	str	r3, [r4, #8]
 8006950:	b9e9      	cbnz	r1, 800698e <_puts_r+0x76>
 8006952:	2b00      	cmp	r3, #0
 8006954:	da2e      	bge.n	80069b4 <_puts_r+0x9c>
 8006956:	4622      	mov	r2, r4
 8006958:	210a      	movs	r1, #10
 800695a:	4628      	mov	r0, r5
 800695c:	f000 f87b 	bl	8006a56 <__swbuf_r>
 8006960:	3001      	adds	r0, #1
 8006962:	d007      	beq.n	8006974 <_puts_r+0x5c>
 8006964:	250a      	movs	r5, #10
 8006966:	e007      	b.n	8006978 <_puts_r+0x60>
 8006968:	4621      	mov	r1, r4
 800696a:	4628      	mov	r0, r5
 800696c:	f000 f8b0 	bl	8006ad0 <__swsetup_r>
 8006970:	2800      	cmp	r0, #0
 8006972:	d0e7      	beq.n	8006944 <_puts_r+0x2c>
 8006974:	f04f 35ff 	mov.w	r5, #4294967295
 8006978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800697a:	07da      	lsls	r2, r3, #31
 800697c:	d405      	bmi.n	800698a <_puts_r+0x72>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	059b      	lsls	r3, r3, #22
 8006982:	d402      	bmi.n	800698a <_puts_r+0x72>
 8006984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006986:	f000 f975 	bl	8006c74 <__retarget_lock_release_recursive>
 800698a:	4628      	mov	r0, r5
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	2b00      	cmp	r3, #0
 8006990:	da04      	bge.n	800699c <_puts_r+0x84>
 8006992:	69a2      	ldr	r2, [r4, #24]
 8006994:	429a      	cmp	r2, r3
 8006996:	dc06      	bgt.n	80069a6 <_puts_r+0x8e>
 8006998:	290a      	cmp	r1, #10
 800699a:	d004      	beq.n	80069a6 <_puts_r+0x8e>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	6022      	str	r2, [r4, #0]
 80069a2:	7019      	strb	r1, [r3, #0]
 80069a4:	e7cf      	b.n	8006946 <_puts_r+0x2e>
 80069a6:	4622      	mov	r2, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 f854 	bl	8006a56 <__swbuf_r>
 80069ae:	3001      	adds	r0, #1
 80069b0:	d1c9      	bne.n	8006946 <_puts_r+0x2e>
 80069b2:	e7df      	b.n	8006974 <_puts_r+0x5c>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	250a      	movs	r5, #10
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	701d      	strb	r5, [r3, #0]
 80069be:	e7db      	b.n	8006978 <_puts_r+0x60>

080069c0 <puts>:
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <puts+0xc>)
 80069c2:	4601      	mov	r1, r0
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f7ff bfa7 	b.w	8006918 <_puts_r>
 80069ca:	bf00      	nop
 80069cc:	2000007c 	.word	0x2000007c

080069d0 <__sread>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	f000 f8fc 	bl	8006bd4 <_read_r>
 80069dc:	2800      	cmp	r0, #0
 80069de:	bfab      	itete	ge
 80069e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069e2:	89a3      	ldrhlt	r3, [r4, #12]
 80069e4:	181b      	addge	r3, r3, r0
 80069e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ea:	bfac      	ite	ge
 80069ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ee:	81a3      	strhlt	r3, [r4, #12]
 80069f0:	bd10      	pop	{r4, pc}

080069f2 <__swrite>:
 80069f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f6:	461f      	mov	r7, r3
 80069f8:	898b      	ldrh	r3, [r1, #12]
 80069fa:	05db      	lsls	r3, r3, #23
 80069fc:	4605      	mov	r5, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	4616      	mov	r6, r2
 8006a02:	d505      	bpl.n	8006a10 <__swrite+0x1e>
 8006a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a08:	2302      	movs	r3, #2
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f000 f8d0 	bl	8006bb0 <_lseek_r>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a26:	f000 b8e7 	b.w	8006bf8 <_write_r>

08006a2a <__sseek>:
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a32:	f000 f8bd 	bl	8006bb0 <_lseek_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	bf15      	itete	ne
 8006a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a46:	81a3      	strheq	r3, [r4, #12]
 8006a48:	bf18      	it	ne
 8006a4a:	81a3      	strhne	r3, [r4, #12]
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <__sclose>:
 8006a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a52:	f000 b89d 	b.w	8006b90 <_close_r>

08006a56 <__swbuf_r>:
 8006a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a58:	460e      	mov	r6, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	b118      	cbz	r0, 8006a68 <__swbuf_r+0x12>
 8006a60:	6a03      	ldr	r3, [r0, #32]
 8006a62:	b90b      	cbnz	r3, 8006a68 <__swbuf_r+0x12>
 8006a64:	f7ff ff10 	bl	8006888 <__sinit>
 8006a68:	69a3      	ldr	r3, [r4, #24]
 8006a6a:	60a3      	str	r3, [r4, #8]
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	071a      	lsls	r2, r3, #28
 8006a70:	d525      	bpl.n	8006abe <__swbuf_r+0x68>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	b31b      	cbz	r3, 8006abe <__swbuf_r+0x68>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	6922      	ldr	r2, [r4, #16]
 8006a7a:	1a98      	subs	r0, r3, r2
 8006a7c:	6963      	ldr	r3, [r4, #20]
 8006a7e:	b2f6      	uxtb	r6, r6
 8006a80:	4283      	cmp	r3, r0
 8006a82:	4637      	mov	r7, r6
 8006a84:	dc04      	bgt.n	8006a90 <__swbuf_r+0x3a>
 8006a86:	4621      	mov	r1, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fd47 	bl	800751c <_fflush_r>
 8006a8e:	b9e0      	cbnz	r0, 8006aca <__swbuf_r+0x74>
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	701e      	strb	r6, [r3, #0]
 8006a9e:	6962      	ldr	r2, [r4, #20]
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d004      	beq.n	8006ab0 <__swbuf_r+0x5a>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d506      	bpl.n	8006aba <__swbuf_r+0x64>
 8006aac:	2e0a      	cmp	r6, #10
 8006aae:	d104      	bne.n	8006aba <__swbuf_r+0x64>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fd32 	bl	800751c <_fflush_r>
 8006ab8:	b938      	cbnz	r0, 8006aca <__swbuf_r+0x74>
 8006aba:	4638      	mov	r0, r7
 8006abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 f805 	bl	8006ad0 <__swsetup_r>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d0d5      	beq.n	8006a76 <__swbuf_r+0x20>
 8006aca:	f04f 37ff 	mov.w	r7, #4294967295
 8006ace:	e7f4      	b.n	8006aba <__swbuf_r+0x64>

08006ad0 <__swsetup_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <__swsetup_r+0xac>)
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	460c      	mov	r4, r1
 8006ada:	b118      	cbz	r0, 8006ae4 <__swsetup_r+0x14>
 8006adc:	6a03      	ldr	r3, [r0, #32]
 8006ade:	b90b      	cbnz	r3, 8006ae4 <__swsetup_r+0x14>
 8006ae0:	f7ff fed2 	bl	8006888 <__sinit>
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aea:	0718      	lsls	r0, r3, #28
 8006aec:	d422      	bmi.n	8006b34 <__swsetup_r+0x64>
 8006aee:	06d9      	lsls	r1, r3, #27
 8006af0:	d407      	bmi.n	8006b02 <__swsetup_r+0x32>
 8006af2:	2309      	movs	r3, #9
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e034      	b.n	8006b6c <__swsetup_r+0x9c>
 8006b02:	0758      	lsls	r0, r3, #29
 8006b04:	d512      	bpl.n	8006b2c <__swsetup_r+0x5c>
 8006b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b08:	b141      	cbz	r1, 8006b1c <__swsetup_r+0x4c>
 8006b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	d002      	beq.n	8006b18 <__swsetup_r+0x48>
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f8b0 	bl	8006c78 <_free_r>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	6363      	str	r3, [r4, #52]	; 0x34
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	2300      	movs	r3, #0
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f043 0308 	orr.w	r3, r3, #8
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b94b      	cbnz	r3, 8006b4c <__swsetup_r+0x7c>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b42:	d003      	beq.n	8006b4c <__swsetup_r+0x7c>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 fd36 	bl	80075b8 <__smakebuf_r>
 8006b4c:	89a0      	ldrh	r0, [r4, #12]
 8006b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b52:	f010 0301 	ands.w	r3, r0, #1
 8006b56:	d00a      	beq.n	8006b6e <__swsetup_r+0x9e>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	6963      	ldr	r3, [r4, #20]
 8006b5e:	425b      	negs	r3, r3
 8006b60:	61a3      	str	r3, [r4, #24]
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	b943      	cbnz	r3, 8006b78 <__swsetup_r+0xa8>
 8006b66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b6a:	d1c4      	bne.n	8006af6 <__swsetup_r+0x26>
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	0781      	lsls	r1, r0, #30
 8006b70:	bf58      	it	pl
 8006b72:	6963      	ldrpl	r3, [r4, #20]
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	e7f4      	b.n	8006b62 <__swsetup_r+0x92>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7f7      	b.n	8006b6c <__swsetup_r+0x9c>
 8006b7c:	2000007c 	.word	0x2000007c

08006b80 <memset>:
 8006b80:	4402      	add	r2, r0
 8006b82:	4603      	mov	r3, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <_close_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_close_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7ff fc1e 	bl	80063dc <_close>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_close_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_close_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20025c30 	.word	0x20025c30

08006bb0 <_lseek_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	; (8006bd0 <_lseek_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7ff fbc9 	bl	8006356 <_lseek>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_lseek_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_lseek_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20025c30 	.word	0x20025c30

08006bd4 <_read_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d07      	ldr	r5, [pc, #28]	; (8006bf4 <_read_r+0x20>)
 8006bd8:	4604      	mov	r4, r0
 8006bda:	4608      	mov	r0, r1
 8006bdc:	4611      	mov	r1, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f7ff fb5f 	bl	80062a6 <_read>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_read_r+0x1e>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_read_r+0x1e>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	20025c30 	.word	0x20025c30

08006bf8 <_write_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	; (8006c18 <_write_r+0x20>)
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7ff fbb7 	bl	800637a <_write>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_write_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_write_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20025c30 	.word	0x20025c30

08006c1c <__errno>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	; (8006c24 <__errno+0x8>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000007c 	.word	0x2000007c

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4d0d      	ldr	r5, [pc, #52]	; (8006c60 <__libc_init_array+0x38>)
 8006c2c:	4c0d      	ldr	r4, [pc, #52]	; (8006c64 <__libc_init_array+0x3c>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	2600      	movs	r6, #0
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	4d0b      	ldr	r5, [pc, #44]	; (8006c68 <__libc_init_array+0x40>)
 8006c3a:	4c0c      	ldr	r4, [pc, #48]	; (8006c6c <__libc_init_array+0x44>)
 8006c3c:	f000 fd2a 	bl	8007694 <_init>
 8006c40:	1b64      	subs	r4, r4, r5
 8006c42:	10a4      	asrs	r4, r4, #2
 8006c44:	2600      	movs	r6, #0
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	080089d8 	.word	0x080089d8
 8006c64:	080089d8 	.word	0x080089d8
 8006c68:	080089d8 	.word	0x080089d8
 8006c6c:	080089dc 	.word	0x080089dc

08006c70 <__retarget_lock_init_recursive>:
 8006c70:	4770      	bx	lr

08006c72 <__retarget_lock_acquire_recursive>:
 8006c72:	4770      	bx	lr

08006c74 <__retarget_lock_release_recursive>:
 8006c74:	4770      	bx	lr
	...

08006c78 <_free_r>:
 8006c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d044      	beq.n	8006d08 <_free_r+0x90>
 8006c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f1a1 0404 	sub.w	r4, r1, #4
 8006c8a:	bfb8      	it	lt
 8006c8c:	18e4      	addlt	r4, r4, r3
 8006c8e:	f000 f8df 	bl	8006e50 <__malloc_lock>
 8006c92:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <_free_r+0x94>)
 8006c94:	9801      	ldr	r0, [sp, #4]
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	b933      	cbnz	r3, 8006ca8 <_free_r+0x30>
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	6014      	str	r4, [r2, #0]
 8006c9e:	b003      	add	sp, #12
 8006ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ca4:	f000 b8da 	b.w	8006e5c <__malloc_unlock>
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	d908      	bls.n	8006cbe <_free_r+0x46>
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf01      	itttt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	1949      	addeq	r1, r1, r5
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	e7ed      	b.n	8006c9a <_free_r+0x22>
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	b10b      	cbz	r3, 8006cc8 <_free_r+0x50>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d9fa      	bls.n	8006cbe <_free_r+0x46>
 8006cc8:	6811      	ldr	r1, [r2, #0]
 8006cca:	1855      	adds	r5, r2, r1
 8006ccc:	42a5      	cmp	r5, r4
 8006cce:	d10b      	bne.n	8006ce8 <_free_r+0x70>
 8006cd0:	6824      	ldr	r4, [r4, #0]
 8006cd2:	4421      	add	r1, r4
 8006cd4:	1854      	adds	r4, r2, r1
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	6011      	str	r1, [r2, #0]
 8006cda:	d1e0      	bne.n	8006c9e <_free_r+0x26>
 8006cdc:	681c      	ldr	r4, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	6053      	str	r3, [r2, #4]
 8006ce2:	440c      	add	r4, r1
 8006ce4:	6014      	str	r4, [r2, #0]
 8006ce6:	e7da      	b.n	8006c9e <_free_r+0x26>
 8006ce8:	d902      	bls.n	8006cf0 <_free_r+0x78>
 8006cea:	230c      	movs	r3, #12
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	e7d6      	b.n	8006c9e <_free_r+0x26>
 8006cf0:	6825      	ldr	r5, [r4, #0]
 8006cf2:	1961      	adds	r1, r4, r5
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	bf04      	itt	eq
 8006cf8:	6819      	ldreq	r1, [r3, #0]
 8006cfa:	685b      	ldreq	r3, [r3, #4]
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	bf04      	itt	eq
 8006d00:	1949      	addeq	r1, r1, r5
 8006d02:	6021      	streq	r1, [r4, #0]
 8006d04:	6054      	str	r4, [r2, #4]
 8006d06:	e7ca      	b.n	8006c9e <_free_r+0x26>
 8006d08:	b003      	add	sp, #12
 8006d0a:	bd30      	pop	{r4, r5, pc}
 8006d0c:	20025c38 	.word	0x20025c38

08006d10 <sbrk_aligned>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4e0e      	ldr	r6, [pc, #56]	; (8006d4c <sbrk_aligned+0x3c>)
 8006d14:	460c      	mov	r4, r1
 8006d16:	6831      	ldr	r1, [r6, #0]
 8006d18:	4605      	mov	r5, r0
 8006d1a:	b911      	cbnz	r1, 8006d22 <sbrk_aligned+0x12>
 8006d1c:	f000 fcaa 	bl	8007674 <_sbrk_r>
 8006d20:	6030      	str	r0, [r6, #0]
 8006d22:	4621      	mov	r1, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 fca5 	bl	8007674 <_sbrk_r>
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	d00a      	beq.n	8006d44 <sbrk_aligned+0x34>
 8006d2e:	1cc4      	adds	r4, r0, #3
 8006d30:	f024 0403 	bic.w	r4, r4, #3
 8006d34:	42a0      	cmp	r0, r4
 8006d36:	d007      	beq.n	8006d48 <sbrk_aligned+0x38>
 8006d38:	1a21      	subs	r1, r4, r0
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f000 fc9a 	bl	8007674 <_sbrk_r>
 8006d40:	3001      	adds	r0, #1
 8006d42:	d101      	bne.n	8006d48 <sbrk_aligned+0x38>
 8006d44:	f04f 34ff 	mov.w	r4, #4294967295
 8006d48:	4620      	mov	r0, r4
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	20025c3c 	.word	0x20025c3c

08006d50 <_malloc_r>:
 8006d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d54:	1ccd      	adds	r5, r1, #3
 8006d56:	f025 0503 	bic.w	r5, r5, #3
 8006d5a:	3508      	adds	r5, #8
 8006d5c:	2d0c      	cmp	r5, #12
 8006d5e:	bf38      	it	cc
 8006d60:	250c      	movcc	r5, #12
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	4607      	mov	r7, r0
 8006d66:	db01      	blt.n	8006d6c <_malloc_r+0x1c>
 8006d68:	42a9      	cmp	r1, r5
 8006d6a:	d905      	bls.n	8006d78 <_malloc_r+0x28>
 8006d6c:	230c      	movs	r3, #12
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	2600      	movs	r6, #0
 8006d72:	4630      	mov	r0, r6
 8006d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e4c <_malloc_r+0xfc>
 8006d7c:	f000 f868 	bl	8006e50 <__malloc_lock>
 8006d80:	f8d8 3000 	ldr.w	r3, [r8]
 8006d84:	461c      	mov	r4, r3
 8006d86:	bb5c      	cbnz	r4, 8006de0 <_malloc_r+0x90>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f7ff ffc0 	bl	8006d10 <sbrk_aligned>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	4604      	mov	r4, r0
 8006d94:	d155      	bne.n	8006e42 <_malloc_r+0xf2>
 8006d96:	f8d8 4000 	ldr.w	r4, [r8]
 8006d9a:	4626      	mov	r6, r4
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	d145      	bne.n	8006e2c <_malloc_r+0xdc>
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	d048      	beq.n	8006e36 <_malloc_r+0xe6>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	4631      	mov	r1, r6
 8006da8:	4638      	mov	r0, r7
 8006daa:	eb04 0903 	add.w	r9, r4, r3
 8006dae:	f000 fc61 	bl	8007674 <_sbrk_r>
 8006db2:	4581      	cmp	r9, r0
 8006db4:	d13f      	bne.n	8006e36 <_malloc_r+0xe6>
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	1a6d      	subs	r5, r5, r1
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff ffa7 	bl	8006d10 <sbrk_aligned>
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d037      	beq.n	8006e36 <_malloc_r+0xe6>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	442b      	add	r3, r5
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d038      	beq.n	8006e46 <_malloc_r+0xf6>
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	42a2      	cmp	r2, r4
 8006dd8:	d12b      	bne.n	8006e32 <_malloc_r+0xe2>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
 8006dde:	e00f      	b.n	8006e00 <_malloc_r+0xb0>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	1b52      	subs	r2, r2, r5
 8006de4:	d41f      	bmi.n	8006e26 <_malloc_r+0xd6>
 8006de6:	2a0b      	cmp	r2, #11
 8006de8:	d917      	bls.n	8006e1a <_malloc_r+0xca>
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	6025      	str	r5, [r4, #0]
 8006df0:	bf18      	it	ne
 8006df2:	6059      	strne	r1, [r3, #4]
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	bf08      	it	eq
 8006df8:	f8c8 1000 	streq.w	r1, [r8]
 8006dfc:	5162      	str	r2, [r4, r5]
 8006dfe:	604b      	str	r3, [r1, #4]
 8006e00:	4638      	mov	r0, r7
 8006e02:	f104 060b 	add.w	r6, r4, #11
 8006e06:	f000 f829 	bl	8006e5c <__malloc_unlock>
 8006e0a:	f026 0607 	bic.w	r6, r6, #7
 8006e0e:	1d23      	adds	r3, r4, #4
 8006e10:	1af2      	subs	r2, r6, r3
 8006e12:	d0ae      	beq.n	8006d72 <_malloc_r+0x22>
 8006e14:	1b9b      	subs	r3, r3, r6
 8006e16:	50a3      	str	r3, [r4, r2]
 8006e18:	e7ab      	b.n	8006d72 <_malloc_r+0x22>
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	6862      	ldr	r2, [r4, #4]
 8006e1e:	d1dd      	bne.n	8006ddc <_malloc_r+0x8c>
 8006e20:	f8c8 2000 	str.w	r2, [r8]
 8006e24:	e7ec      	b.n	8006e00 <_malloc_r+0xb0>
 8006e26:	4623      	mov	r3, r4
 8006e28:	6864      	ldr	r4, [r4, #4]
 8006e2a:	e7ac      	b.n	8006d86 <_malloc_r+0x36>
 8006e2c:	4634      	mov	r4, r6
 8006e2e:	6876      	ldr	r6, [r6, #4]
 8006e30:	e7b4      	b.n	8006d9c <_malloc_r+0x4c>
 8006e32:	4613      	mov	r3, r2
 8006e34:	e7cc      	b.n	8006dd0 <_malloc_r+0x80>
 8006e36:	230c      	movs	r3, #12
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	f000 f80e 	bl	8006e5c <__malloc_unlock>
 8006e40:	e797      	b.n	8006d72 <_malloc_r+0x22>
 8006e42:	6025      	str	r5, [r4, #0]
 8006e44:	e7dc      	b.n	8006e00 <_malloc_r+0xb0>
 8006e46:	605b      	str	r3, [r3, #4]
 8006e48:	deff      	udf	#255	; 0xff
 8006e4a:	bf00      	nop
 8006e4c:	20025c38 	.word	0x20025c38

08006e50 <__malloc_lock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	; (8006e58 <__malloc_lock+0x8>)
 8006e52:	f7ff bf0e 	b.w	8006c72 <__retarget_lock_acquire_recursive>
 8006e56:	bf00      	nop
 8006e58:	20025c34 	.word	0x20025c34

08006e5c <__malloc_unlock>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__malloc_unlock+0x8>)
 8006e5e:	f7ff bf09 	b.w	8006c74 <__retarget_lock_release_recursive>
 8006e62:	bf00      	nop
 8006e64:	20025c34 	.word	0x20025c34

08006e68 <__sfputc_r>:
 8006e68:	6893      	ldr	r3, [r2, #8]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	b410      	push	{r4}
 8006e70:	6093      	str	r3, [r2, #8]
 8006e72:	da08      	bge.n	8006e86 <__sfputc_r+0x1e>
 8006e74:	6994      	ldr	r4, [r2, #24]
 8006e76:	42a3      	cmp	r3, r4
 8006e78:	db01      	blt.n	8006e7e <__sfputc_r+0x16>
 8006e7a:	290a      	cmp	r1, #10
 8006e7c:	d103      	bne.n	8006e86 <__sfputc_r+0x1e>
 8006e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e82:	f7ff bde8 	b.w	8006a56 <__swbuf_r>
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	1c58      	adds	r0, r3, #1
 8006e8a:	6010      	str	r0, [r2, #0]
 8006e8c:	7019      	strb	r1, [r3, #0]
 8006e8e:	4608      	mov	r0, r1
 8006e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <__sfputs_r>:
 8006e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e98:	4606      	mov	r6, r0
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	18d5      	adds	r5, r2, r3
 8006ea0:	42ac      	cmp	r4, r5
 8006ea2:	d101      	bne.n	8006ea8 <__sfputs_r+0x12>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e007      	b.n	8006eb8 <__sfputs_r+0x22>
 8006ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eac:	463a      	mov	r2, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7ff ffda 	bl	8006e68 <__sfputc_r>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d1f3      	bne.n	8006ea0 <__sfputs_r+0xa>
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ebc <_vfiprintf_r>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	b09d      	sub	sp, #116	; 0x74
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	4698      	mov	r8, r3
 8006ec8:	4606      	mov	r6, r0
 8006eca:	b118      	cbz	r0, 8006ed4 <_vfiprintf_r+0x18>
 8006ecc:	6a03      	ldr	r3, [r0, #32]
 8006ece:	b90b      	cbnz	r3, 8006ed4 <_vfiprintf_r+0x18>
 8006ed0:	f7ff fcda 	bl	8006888 <__sinit>
 8006ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ed6:	07d9      	lsls	r1, r3, #31
 8006ed8:	d405      	bmi.n	8006ee6 <_vfiprintf_r+0x2a>
 8006eda:	89ab      	ldrh	r3, [r5, #12]
 8006edc:	059a      	lsls	r2, r3, #22
 8006ede:	d402      	bmi.n	8006ee6 <_vfiprintf_r+0x2a>
 8006ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ee2:	f7ff fec6 	bl	8006c72 <__retarget_lock_acquire_recursive>
 8006ee6:	89ab      	ldrh	r3, [r5, #12]
 8006ee8:	071b      	lsls	r3, r3, #28
 8006eea:	d501      	bpl.n	8006ef0 <_vfiprintf_r+0x34>
 8006eec:	692b      	ldr	r3, [r5, #16]
 8006eee:	b99b      	cbnz	r3, 8006f18 <_vfiprintf_r+0x5c>
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff fdec 	bl	8006ad0 <__swsetup_r>
 8006ef8:	b170      	cbz	r0, 8006f18 <_vfiprintf_r+0x5c>
 8006efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006efc:	07dc      	lsls	r4, r3, #31
 8006efe:	d504      	bpl.n	8006f0a <_vfiprintf_r+0x4e>
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	b01d      	add	sp, #116	; 0x74
 8006f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	0598      	lsls	r0, r3, #22
 8006f0e:	d4f7      	bmi.n	8006f00 <_vfiprintf_r+0x44>
 8006f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f12:	f7ff feaf 	bl	8006c74 <__retarget_lock_release_recursive>
 8006f16:	e7f3      	b.n	8006f00 <_vfiprintf_r+0x44>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f26:	2330      	movs	r3, #48	; 0x30
 8006f28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80070dc <_vfiprintf_r+0x220>
 8006f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f30:	f04f 0901 	mov.w	r9, #1
 8006f34:	4623      	mov	r3, r4
 8006f36:	469a      	mov	sl, r3
 8006f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f3c:	b10a      	cbz	r2, 8006f42 <_vfiprintf_r+0x86>
 8006f3e:	2a25      	cmp	r2, #37	; 0x25
 8006f40:	d1f9      	bne.n	8006f36 <_vfiprintf_r+0x7a>
 8006f42:	ebba 0b04 	subs.w	fp, sl, r4
 8006f46:	d00b      	beq.n	8006f60 <_vfiprintf_r+0xa4>
 8006f48:	465b      	mov	r3, fp
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f7ff ffa1 	bl	8006e96 <__sfputs_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	f000 80a9 	beq.w	80070ac <_vfiprintf_r+0x1f0>
 8006f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5c:	445a      	add	r2, fp
 8006f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f60:	f89a 3000 	ldrb.w	r3, [sl]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a1 	beq.w	80070ac <_vfiprintf_r+0x1f0>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f74:	f10a 0a01 	add.w	sl, sl, #1
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	9307      	str	r3, [sp, #28]
 8006f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f80:	931a      	str	r3, [sp, #104]	; 0x68
 8006f82:	4654      	mov	r4, sl
 8006f84:	2205      	movs	r2, #5
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4854      	ldr	r0, [pc, #336]	; (80070dc <_vfiprintf_r+0x220>)
 8006f8c:	f7f9 f938 	bl	8000200 <memchr>
 8006f90:	9a04      	ldr	r2, [sp, #16]
 8006f92:	b9d8      	cbnz	r0, 8006fcc <_vfiprintf_r+0x110>
 8006f94:	06d1      	lsls	r1, r2, #27
 8006f96:	bf44      	itt	mi
 8006f98:	2320      	movmi	r3, #32
 8006f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9e:	0713      	lsls	r3, r2, #28
 8006fa0:	bf44      	itt	mi
 8006fa2:	232b      	movmi	r3, #43	; 0x2b
 8006fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fac:	2b2a      	cmp	r3, #42	; 0x2a
 8006fae:	d015      	beq.n	8006fdc <_vfiprintf_r+0x120>
 8006fb0:	9a07      	ldr	r2, [sp, #28]
 8006fb2:	4654      	mov	r4, sl
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f04f 0c0a 	mov.w	ip, #10
 8006fba:	4621      	mov	r1, r4
 8006fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc0:	3b30      	subs	r3, #48	; 0x30
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	d94d      	bls.n	8007062 <_vfiprintf_r+0x1a6>
 8006fc6:	b1b0      	cbz	r0, 8006ff6 <_vfiprintf_r+0x13a>
 8006fc8:	9207      	str	r2, [sp, #28]
 8006fca:	e014      	b.n	8006ff6 <_vfiprintf_r+0x13a>
 8006fcc:	eba0 0308 	sub.w	r3, r0, r8
 8006fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	9304      	str	r3, [sp, #16]
 8006fd8:	46a2      	mov	sl, r4
 8006fda:	e7d2      	b.n	8006f82 <_vfiprintf_r+0xc6>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	1d19      	adds	r1, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	9103      	str	r1, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfbb      	ittet	lt
 8006fe8:	425b      	neglt	r3, r3
 8006fea:	f042 0202 	orrlt.w	r2, r2, #2
 8006fee:	9307      	strge	r3, [sp, #28]
 8006ff0:	9307      	strlt	r3, [sp, #28]
 8006ff2:	bfb8      	it	lt
 8006ff4:	9204      	strlt	r2, [sp, #16]
 8006ff6:	7823      	ldrb	r3, [r4, #0]
 8006ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffa:	d10c      	bne.n	8007016 <_vfiprintf_r+0x15a>
 8006ffc:	7863      	ldrb	r3, [r4, #1]
 8006ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8007000:	d134      	bne.n	800706c <_vfiprintf_r+0x1b0>
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	1d1a      	adds	r2, r3, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	9203      	str	r2, [sp, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfb8      	it	lt
 800700e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007012:	3402      	adds	r4, #2
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070ec <_vfiprintf_r+0x230>
 800701a:	7821      	ldrb	r1, [r4, #0]
 800701c:	2203      	movs	r2, #3
 800701e:	4650      	mov	r0, sl
 8007020:	f7f9 f8ee 	bl	8000200 <memchr>
 8007024:	b138      	cbz	r0, 8007036 <_vfiprintf_r+0x17a>
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	eba0 000a 	sub.w	r0, r0, sl
 800702c:	2240      	movs	r2, #64	; 0x40
 800702e:	4082      	lsls	r2, r0
 8007030:	4313      	orrs	r3, r2
 8007032:	3401      	adds	r4, #1
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703a:	4829      	ldr	r0, [pc, #164]	; (80070e0 <_vfiprintf_r+0x224>)
 800703c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007040:	2206      	movs	r2, #6
 8007042:	f7f9 f8dd 	bl	8000200 <memchr>
 8007046:	2800      	cmp	r0, #0
 8007048:	d03f      	beq.n	80070ca <_vfiprintf_r+0x20e>
 800704a:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <_vfiprintf_r+0x228>)
 800704c:	bb1b      	cbnz	r3, 8007096 <_vfiprintf_r+0x1da>
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	3307      	adds	r3, #7
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	3308      	adds	r3, #8
 8007058:	9303      	str	r3, [sp, #12]
 800705a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705c:	443b      	add	r3, r7
 800705e:	9309      	str	r3, [sp, #36]	; 0x24
 8007060:	e768      	b.n	8006f34 <_vfiprintf_r+0x78>
 8007062:	fb0c 3202 	mla	r2, ip, r2, r3
 8007066:	460c      	mov	r4, r1
 8007068:	2001      	movs	r0, #1
 800706a:	e7a6      	b.n	8006fba <_vfiprintf_r+0xfe>
 800706c:	2300      	movs	r3, #0
 800706e:	3401      	adds	r4, #1
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0c0a 	mov.w	ip, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707e:	3a30      	subs	r2, #48	; 0x30
 8007080:	2a09      	cmp	r2, #9
 8007082:	d903      	bls.n	800708c <_vfiprintf_r+0x1d0>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0c6      	beq.n	8007016 <_vfiprintf_r+0x15a>
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	e7c4      	b.n	8007016 <_vfiprintf_r+0x15a>
 800708c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007090:	4604      	mov	r4, r0
 8007092:	2301      	movs	r3, #1
 8007094:	e7f0      	b.n	8007078 <_vfiprintf_r+0x1bc>
 8007096:	ab03      	add	r3, sp, #12
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	462a      	mov	r2, r5
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <_vfiprintf_r+0x22c>)
 800709e:	a904      	add	r1, sp, #16
 80070a0:	4630      	mov	r0, r6
 80070a2:	f3af 8000 	nop.w
 80070a6:	4607      	mov	r7, r0
 80070a8:	1c78      	adds	r0, r7, #1
 80070aa:	d1d6      	bne.n	800705a <_vfiprintf_r+0x19e>
 80070ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ae:	07d9      	lsls	r1, r3, #31
 80070b0:	d405      	bmi.n	80070be <_vfiprintf_r+0x202>
 80070b2:	89ab      	ldrh	r3, [r5, #12]
 80070b4:	059a      	lsls	r2, r3, #22
 80070b6:	d402      	bmi.n	80070be <_vfiprintf_r+0x202>
 80070b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ba:	f7ff fddb 	bl	8006c74 <__retarget_lock_release_recursive>
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	065b      	lsls	r3, r3, #25
 80070c2:	f53f af1d 	bmi.w	8006f00 <_vfiprintf_r+0x44>
 80070c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c8:	e71c      	b.n	8006f04 <_vfiprintf_r+0x48>
 80070ca:	ab03      	add	r3, sp, #12
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	462a      	mov	r2, r5
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <_vfiprintf_r+0x22c>)
 80070d2:	a904      	add	r1, sp, #16
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 f879 	bl	80071cc <_printf_i>
 80070da:	e7e4      	b.n	80070a6 <_vfiprintf_r+0x1ea>
 80070dc:	0800899a 	.word	0x0800899a
 80070e0:	080089a4 	.word	0x080089a4
 80070e4:	00000000 	.word	0x00000000
 80070e8:	08006e97 	.word	0x08006e97
 80070ec:	080089a0 	.word	0x080089a0

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4616      	mov	r6, r2
 80070f6:	4699      	mov	r9, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007100:	4293      	cmp	r3, r2
 8007102:	bfb8      	it	lt
 8007104:	4613      	movlt	r3, r2
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800710c:	4607      	mov	r7, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b10a      	cbz	r2, 8007116 <_printf_common+0x26>
 8007112:	3301      	adds	r3, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	0699      	lsls	r1, r3, #26
 800711a:	bf42      	ittt	mi
 800711c:	6833      	ldrmi	r3, [r6, #0]
 800711e:	3302      	addmi	r3, #2
 8007120:	6033      	strmi	r3, [r6, #0]
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	f015 0506 	ands.w	r5, r5, #6
 8007128:	d106      	bne.n	8007138 <_printf_common+0x48>
 800712a:	f104 0a19 	add.w	sl, r4, #25
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dc26      	bgt.n	8007186 <_printf_common+0x96>
 8007138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800713c:	1e13      	subs	r3, r2, #0
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	bf18      	it	ne
 8007142:	2301      	movne	r3, #1
 8007144:	0692      	lsls	r2, r2, #26
 8007146:	d42b      	bmi.n	80071a0 <_printf_common+0xb0>
 8007148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800714c:	4649      	mov	r1, r9
 800714e:	4638      	mov	r0, r7
 8007150:	47c0      	blx	r8
 8007152:	3001      	adds	r0, #1
 8007154:	d01e      	beq.n	8007194 <_printf_common+0xa4>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	6922      	ldr	r2, [r4, #16]
 800715a:	f003 0306 	and.w	r3, r3, #6
 800715e:	2b04      	cmp	r3, #4
 8007160:	bf02      	ittt	eq
 8007162:	68e5      	ldreq	r5, [r4, #12]
 8007164:	6833      	ldreq	r3, [r6, #0]
 8007166:	1aed      	subeq	r5, r5, r3
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	bf0c      	ite	eq
 800716c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007170:	2500      	movne	r5, #0
 8007172:	4293      	cmp	r3, r2
 8007174:	bfc4      	itt	gt
 8007176:	1a9b      	subgt	r3, r3, r2
 8007178:	18ed      	addgt	r5, r5, r3
 800717a:	2600      	movs	r6, #0
 800717c:	341a      	adds	r4, #26
 800717e:	42b5      	cmp	r5, r6
 8007180:	d11a      	bne.n	80071b8 <_printf_common+0xc8>
 8007182:	2000      	movs	r0, #0
 8007184:	e008      	b.n	8007198 <_printf_common+0xa8>
 8007186:	2301      	movs	r3, #1
 8007188:	4652      	mov	r2, sl
 800718a:	4649      	mov	r1, r9
 800718c:	4638      	mov	r0, r7
 800718e:	47c0      	blx	r8
 8007190:	3001      	adds	r0, #1
 8007192:	d103      	bne.n	800719c <_printf_common+0xac>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	e7c6      	b.n	800712e <_printf_common+0x3e>
 80071a0:	18e1      	adds	r1, r4, r3
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	2030      	movs	r0, #48	; 0x30
 80071a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071aa:	4422      	add	r2, r4
 80071ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b4:	3302      	adds	r3, #2
 80071b6:	e7c7      	b.n	8007148 <_printf_common+0x58>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4622      	mov	r2, r4
 80071bc:	4649      	mov	r1, r9
 80071be:	4638      	mov	r0, r7
 80071c0:	47c0      	blx	r8
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0e6      	beq.n	8007194 <_printf_common+0xa4>
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7d9      	b.n	800717e <_printf_common+0x8e>
	...

080071cc <_printf_i>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	7e0f      	ldrb	r7, [r1, #24]
 80071d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071d4:	2f78      	cmp	r7, #120	; 0x78
 80071d6:	4691      	mov	r9, r2
 80071d8:	4680      	mov	r8, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	469a      	mov	sl, r3
 80071de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071e2:	d807      	bhi.n	80071f4 <_printf_i+0x28>
 80071e4:	2f62      	cmp	r7, #98	; 0x62
 80071e6:	d80a      	bhi.n	80071fe <_printf_i+0x32>
 80071e8:	2f00      	cmp	r7, #0
 80071ea:	f000 80d4 	beq.w	8007396 <_printf_i+0x1ca>
 80071ee:	2f58      	cmp	r7, #88	; 0x58
 80071f0:	f000 80c0 	beq.w	8007374 <_printf_i+0x1a8>
 80071f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071fc:	e03a      	b.n	8007274 <_printf_i+0xa8>
 80071fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007202:	2b15      	cmp	r3, #21
 8007204:	d8f6      	bhi.n	80071f4 <_printf_i+0x28>
 8007206:	a101      	add	r1, pc, #4	; (adr r1, 800720c <_printf_i+0x40>)
 8007208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800720c:	08007265 	.word	0x08007265
 8007210:	08007279 	.word	0x08007279
 8007214:	080071f5 	.word	0x080071f5
 8007218:	080071f5 	.word	0x080071f5
 800721c:	080071f5 	.word	0x080071f5
 8007220:	080071f5 	.word	0x080071f5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071f5 	.word	0x080071f5
 800722c:	080071f5 	.word	0x080071f5
 8007230:	080071f5 	.word	0x080071f5
 8007234:	080071f5 	.word	0x080071f5
 8007238:	0800737d 	.word	0x0800737d
 800723c:	080072a5 	.word	0x080072a5
 8007240:	08007337 	.word	0x08007337
 8007244:	080071f5 	.word	0x080071f5
 8007248:	080071f5 	.word	0x080071f5
 800724c:	0800739f 	.word	0x0800739f
 8007250:	080071f5 	.word	0x080071f5
 8007254:	080072a5 	.word	0x080072a5
 8007258:	080071f5 	.word	0x080071f5
 800725c:	080071f5 	.word	0x080071f5
 8007260:	0800733f 	.word	0x0800733f
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	602a      	str	r2, [r5, #0]
 800726c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007274:	2301      	movs	r3, #1
 8007276:	e09f      	b.n	80073b8 <_printf_i+0x1ec>
 8007278:	6820      	ldr	r0, [r4, #0]
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	0607      	lsls	r7, r0, #24
 800727e:	f103 0104 	add.w	r1, r3, #4
 8007282:	6029      	str	r1, [r5, #0]
 8007284:	d501      	bpl.n	800728a <_printf_i+0xbe>
 8007286:	681e      	ldr	r6, [r3, #0]
 8007288:	e003      	b.n	8007292 <_printf_i+0xc6>
 800728a:	0646      	lsls	r6, r0, #25
 800728c:	d5fb      	bpl.n	8007286 <_printf_i+0xba>
 800728e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007292:	2e00      	cmp	r6, #0
 8007294:	da03      	bge.n	800729e <_printf_i+0xd2>
 8007296:	232d      	movs	r3, #45	; 0x2d
 8007298:	4276      	negs	r6, r6
 800729a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729e:	485a      	ldr	r0, [pc, #360]	; (8007408 <_printf_i+0x23c>)
 80072a0:	230a      	movs	r3, #10
 80072a2:	e012      	b.n	80072ca <_printf_i+0xfe>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	6820      	ldr	r0, [r4, #0]
 80072a8:	1d19      	adds	r1, r3, #4
 80072aa:	6029      	str	r1, [r5, #0]
 80072ac:	0605      	lsls	r5, r0, #24
 80072ae:	d501      	bpl.n	80072b4 <_printf_i+0xe8>
 80072b0:	681e      	ldr	r6, [r3, #0]
 80072b2:	e002      	b.n	80072ba <_printf_i+0xee>
 80072b4:	0641      	lsls	r1, r0, #25
 80072b6:	d5fb      	bpl.n	80072b0 <_printf_i+0xe4>
 80072b8:	881e      	ldrh	r6, [r3, #0]
 80072ba:	4853      	ldr	r0, [pc, #332]	; (8007408 <_printf_i+0x23c>)
 80072bc:	2f6f      	cmp	r7, #111	; 0x6f
 80072be:	bf0c      	ite	eq
 80072c0:	2308      	moveq	r3, #8
 80072c2:	230a      	movne	r3, #10
 80072c4:	2100      	movs	r1, #0
 80072c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ca:	6865      	ldr	r5, [r4, #4]
 80072cc:	60a5      	str	r5, [r4, #8]
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	bfa2      	ittt	ge
 80072d2:	6821      	ldrge	r1, [r4, #0]
 80072d4:	f021 0104 	bicge.w	r1, r1, #4
 80072d8:	6021      	strge	r1, [r4, #0]
 80072da:	b90e      	cbnz	r6, 80072e0 <_printf_i+0x114>
 80072dc:	2d00      	cmp	r5, #0
 80072de:	d04b      	beq.n	8007378 <_printf_i+0x1ac>
 80072e0:	4615      	mov	r5, r2
 80072e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072e6:	fb03 6711 	mls	r7, r3, r1, r6
 80072ea:	5dc7      	ldrb	r7, [r0, r7]
 80072ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072f0:	4637      	mov	r7, r6
 80072f2:	42bb      	cmp	r3, r7
 80072f4:	460e      	mov	r6, r1
 80072f6:	d9f4      	bls.n	80072e2 <_printf_i+0x116>
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d10b      	bne.n	8007314 <_printf_i+0x148>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	07de      	lsls	r6, r3, #31
 8007300:	d508      	bpl.n	8007314 <_printf_i+0x148>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	6861      	ldr	r1, [r4, #4]
 8007306:	4299      	cmp	r1, r3
 8007308:	bfde      	ittt	le
 800730a:	2330      	movle	r3, #48	; 0x30
 800730c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007314:	1b52      	subs	r2, r2, r5
 8007316:	6122      	str	r2, [r4, #16]
 8007318:	f8cd a000 	str.w	sl, [sp]
 800731c:	464b      	mov	r3, r9
 800731e:	aa03      	add	r2, sp, #12
 8007320:	4621      	mov	r1, r4
 8007322:	4640      	mov	r0, r8
 8007324:	f7ff fee4 	bl	80070f0 <_printf_common>
 8007328:	3001      	adds	r0, #1
 800732a:	d14a      	bne.n	80073c2 <_printf_i+0x1f6>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b004      	add	sp, #16
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	f043 0320 	orr.w	r3, r3, #32
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	4833      	ldr	r0, [pc, #204]	; (800740c <_printf_i+0x240>)
 8007340:	2778      	movs	r7, #120	; 0x78
 8007342:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	061f      	lsls	r7, r3, #24
 800734c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007350:	d402      	bmi.n	8007358 <_printf_i+0x18c>
 8007352:	065f      	lsls	r7, r3, #25
 8007354:	bf48      	it	mi
 8007356:	b2b6      	uxthmi	r6, r6
 8007358:	07df      	lsls	r7, r3, #31
 800735a:	bf48      	it	mi
 800735c:	f043 0320 	orrmi.w	r3, r3, #32
 8007360:	6029      	str	r1, [r5, #0]
 8007362:	bf48      	it	mi
 8007364:	6023      	strmi	r3, [r4, #0]
 8007366:	b91e      	cbnz	r6, 8007370 <_printf_i+0x1a4>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	f023 0320 	bic.w	r3, r3, #32
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	2310      	movs	r3, #16
 8007372:	e7a7      	b.n	80072c4 <_printf_i+0xf8>
 8007374:	4824      	ldr	r0, [pc, #144]	; (8007408 <_printf_i+0x23c>)
 8007376:	e7e4      	b.n	8007342 <_printf_i+0x176>
 8007378:	4615      	mov	r5, r2
 800737a:	e7bd      	b.n	80072f8 <_printf_i+0x12c>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	6826      	ldr	r6, [r4, #0]
 8007380:	6961      	ldr	r1, [r4, #20]
 8007382:	1d18      	adds	r0, r3, #4
 8007384:	6028      	str	r0, [r5, #0]
 8007386:	0635      	lsls	r5, r6, #24
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	d501      	bpl.n	8007390 <_printf_i+0x1c4>
 800738c:	6019      	str	r1, [r3, #0]
 800738e:	e002      	b.n	8007396 <_printf_i+0x1ca>
 8007390:	0670      	lsls	r0, r6, #25
 8007392:	d5fb      	bpl.n	800738c <_printf_i+0x1c0>
 8007394:	8019      	strh	r1, [r3, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	4615      	mov	r5, r2
 800739c:	e7bc      	b.n	8007318 <_printf_i+0x14c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	602a      	str	r2, [r5, #0]
 80073a4:	681d      	ldr	r5, [r3, #0]
 80073a6:	6862      	ldr	r2, [r4, #4]
 80073a8:	2100      	movs	r1, #0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f7f8 ff28 	bl	8000200 <memchr>
 80073b0:	b108      	cbz	r0, 80073b6 <_printf_i+0x1ea>
 80073b2:	1b40      	subs	r0, r0, r5
 80073b4:	6060      	str	r0, [r4, #4]
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	2300      	movs	r3, #0
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c0:	e7aa      	b.n	8007318 <_printf_i+0x14c>
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	462a      	mov	r2, r5
 80073c6:	4649      	mov	r1, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	47d0      	blx	sl
 80073cc:	3001      	adds	r0, #1
 80073ce:	d0ad      	beq.n	800732c <_printf_i+0x160>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	079b      	lsls	r3, r3, #30
 80073d4:	d413      	bmi.n	80073fe <_printf_i+0x232>
 80073d6:	68e0      	ldr	r0, [r4, #12]
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	4298      	cmp	r0, r3
 80073dc:	bfb8      	it	lt
 80073de:	4618      	movlt	r0, r3
 80073e0:	e7a6      	b.n	8007330 <_printf_i+0x164>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4632      	mov	r2, r6
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d09d      	beq.n	800732c <_printf_i+0x160>
 80073f0:	3501      	adds	r5, #1
 80073f2:	68e3      	ldr	r3, [r4, #12]
 80073f4:	9903      	ldr	r1, [sp, #12]
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	42ab      	cmp	r3, r5
 80073fa:	dcf2      	bgt.n	80073e2 <_printf_i+0x216>
 80073fc:	e7eb      	b.n	80073d6 <_printf_i+0x20a>
 80073fe:	2500      	movs	r5, #0
 8007400:	f104 0619 	add.w	r6, r4, #25
 8007404:	e7f5      	b.n	80073f2 <_printf_i+0x226>
 8007406:	bf00      	nop
 8007408:	080089ab 	.word	0x080089ab
 800740c:	080089bc 	.word	0x080089bc

08007410 <__sflush_r>:
 8007410:	898a      	ldrh	r2, [r1, #12]
 8007412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	4605      	mov	r5, r0
 8007418:	0710      	lsls	r0, r2, #28
 800741a:	460c      	mov	r4, r1
 800741c:	d458      	bmi.n	80074d0 <__sflush_r+0xc0>
 800741e:	684b      	ldr	r3, [r1, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dc05      	bgt.n	8007430 <__sflush_r+0x20>
 8007424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	dc02      	bgt.n	8007430 <__sflush_r+0x20>
 800742a:	2000      	movs	r0, #0
 800742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007432:	2e00      	cmp	r6, #0
 8007434:	d0f9      	beq.n	800742a <__sflush_r+0x1a>
 8007436:	2300      	movs	r3, #0
 8007438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800743c:	682f      	ldr	r7, [r5, #0]
 800743e:	6a21      	ldr	r1, [r4, #32]
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	d032      	beq.n	80074aa <__sflush_r+0x9a>
 8007444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	075a      	lsls	r2, r3, #29
 800744a:	d505      	bpl.n	8007458 <__sflush_r+0x48>
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	1ac0      	subs	r0, r0, r3
 8007450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007452:	b10b      	cbz	r3, 8007458 <__sflush_r+0x48>
 8007454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007456:	1ac0      	subs	r0, r0, r3
 8007458:	2300      	movs	r3, #0
 800745a:	4602      	mov	r2, r0
 800745c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745e:	6a21      	ldr	r1, [r4, #32]
 8007460:	4628      	mov	r0, r5
 8007462:	47b0      	blx	r6
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	d106      	bne.n	8007478 <__sflush_r+0x68>
 800746a:	6829      	ldr	r1, [r5, #0]
 800746c:	291d      	cmp	r1, #29
 800746e:	d82b      	bhi.n	80074c8 <__sflush_r+0xb8>
 8007470:	4a29      	ldr	r2, [pc, #164]	; (8007518 <__sflush_r+0x108>)
 8007472:	410a      	asrs	r2, r1
 8007474:	07d6      	lsls	r6, r2, #31
 8007476:	d427      	bmi.n	80074c8 <__sflush_r+0xb8>
 8007478:	2200      	movs	r2, #0
 800747a:	6062      	str	r2, [r4, #4]
 800747c:	04d9      	lsls	r1, r3, #19
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	6022      	str	r2, [r4, #0]
 8007482:	d504      	bpl.n	800748e <__sflush_r+0x7e>
 8007484:	1c42      	adds	r2, r0, #1
 8007486:	d101      	bne.n	800748c <__sflush_r+0x7c>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b903      	cbnz	r3, 800748e <__sflush_r+0x7e>
 800748c:	6560      	str	r0, [r4, #84]	; 0x54
 800748e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007490:	602f      	str	r7, [r5, #0]
 8007492:	2900      	cmp	r1, #0
 8007494:	d0c9      	beq.n	800742a <__sflush_r+0x1a>
 8007496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749a:	4299      	cmp	r1, r3
 800749c:	d002      	beq.n	80074a4 <__sflush_r+0x94>
 800749e:	4628      	mov	r0, r5
 80074a0:	f7ff fbea 	bl	8006c78 <_free_r>
 80074a4:	2000      	movs	r0, #0
 80074a6:	6360      	str	r0, [r4, #52]	; 0x34
 80074a8:	e7c0      	b.n	800742c <__sflush_r+0x1c>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b0      	blx	r6
 80074b0:	1c41      	adds	r1, r0, #1
 80074b2:	d1c8      	bne.n	8007446 <__sflush_r+0x36>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c5      	beq.n	8007446 <__sflush_r+0x36>
 80074ba:	2b1d      	cmp	r3, #29
 80074bc:	d001      	beq.n	80074c2 <__sflush_r+0xb2>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	d101      	bne.n	80074c6 <__sflush_r+0xb6>
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	e7b1      	b.n	800742a <__sflush_r+0x1a>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e7ad      	b.n	800742c <__sflush_r+0x1c>
 80074d0:	690f      	ldr	r7, [r1, #16]
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d0a9      	beq.n	800742a <__sflush_r+0x1a>
 80074d6:	0793      	lsls	r3, r2, #30
 80074d8:	680e      	ldr	r6, [r1, #0]
 80074da:	bf08      	it	eq
 80074dc:	694b      	ldreq	r3, [r1, #20]
 80074de:	600f      	str	r7, [r1, #0]
 80074e0:	bf18      	it	ne
 80074e2:	2300      	movne	r3, #0
 80074e4:	eba6 0807 	sub.w	r8, r6, r7
 80074e8:	608b      	str	r3, [r1, #8]
 80074ea:	f1b8 0f00 	cmp.w	r8, #0
 80074ee:	dd9c      	ble.n	800742a <__sflush_r+0x1a>
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f4:	4643      	mov	r3, r8
 80074f6:	463a      	mov	r2, r7
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dc06      	bgt.n	800750e <__sflush_r+0xfe>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007506:	81a3      	strh	r3, [r4, #12]
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e78e      	b.n	800742c <__sflush_r+0x1c>
 800750e:	4407      	add	r7, r0
 8007510:	eba8 0800 	sub.w	r8, r8, r0
 8007514:	e7e9      	b.n	80074ea <__sflush_r+0xda>
 8007516:	bf00      	nop
 8007518:	dfbffffe 	.word	0xdfbffffe

0800751c <_fflush_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b913      	cbnz	r3, 800752c <_fflush_r+0x10>
 8007526:	2500      	movs	r5, #0
 8007528:	4628      	mov	r0, r5
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	b118      	cbz	r0, 8007536 <_fflush_r+0x1a>
 800752e:	6a03      	ldr	r3, [r0, #32]
 8007530:	b90b      	cbnz	r3, 8007536 <_fflush_r+0x1a>
 8007532:	f7ff f9a9 	bl	8006888 <__sinit>
 8007536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0f3      	beq.n	8007526 <_fflush_r+0xa>
 800753e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007540:	07d0      	lsls	r0, r2, #31
 8007542:	d404      	bmi.n	800754e <_fflush_r+0x32>
 8007544:	0599      	lsls	r1, r3, #22
 8007546:	d402      	bmi.n	800754e <_fflush_r+0x32>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f7ff fb92 	bl	8006c72 <__retarget_lock_acquire_recursive>
 800754e:	4628      	mov	r0, r5
 8007550:	4621      	mov	r1, r4
 8007552:	f7ff ff5d 	bl	8007410 <__sflush_r>
 8007556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007558:	07da      	lsls	r2, r3, #31
 800755a:	4605      	mov	r5, r0
 800755c:	d4e4      	bmi.n	8007528 <_fflush_r+0xc>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	059b      	lsls	r3, r3, #22
 8007562:	d4e1      	bmi.n	8007528 <_fflush_r+0xc>
 8007564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007566:	f7ff fb85 	bl	8006c74 <__retarget_lock_release_recursive>
 800756a:	e7dd      	b.n	8007528 <_fflush_r+0xc>

0800756c <__swhatbuf_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	460c      	mov	r4, r1
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2900      	cmp	r1, #0
 8007576:	b096      	sub	sp, #88	; 0x58
 8007578:	4615      	mov	r5, r2
 800757a:	461e      	mov	r6, r3
 800757c:	da0d      	bge.n	800759a <__swhatbuf_r+0x2e>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	bf0c      	ite	eq
 800758a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800758e:	2340      	movne	r3, #64	; 0x40
 8007590:	2000      	movs	r0, #0
 8007592:	6031      	str	r1, [r6, #0]
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	b016      	add	sp, #88	; 0x58
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	466a      	mov	r2, sp
 800759c:	f000 f848 	bl	8007630 <_fstat_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dbec      	blt.n	800757e <__swhatbuf_r+0x12>
 80075a4:	9901      	ldr	r1, [sp, #4]
 80075a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075ae:	4259      	negs	r1, r3
 80075b0:	4159      	adcs	r1, r3
 80075b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b6:	e7eb      	b.n	8007590 <__swhatbuf_r+0x24>

080075b8 <__smakebuf_r>:
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075bc:	079d      	lsls	r5, r3, #30
 80075be:	4606      	mov	r6, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	d507      	bpl.n	80075d4 <__smakebuf_r+0x1c>
 80075c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2301      	movs	r3, #1
 80075ce:	6163      	str	r3, [r4, #20]
 80075d0:	b002      	add	sp, #8
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	ab01      	add	r3, sp, #4
 80075d6:	466a      	mov	r2, sp
 80075d8:	f7ff ffc8 	bl	800756c <__swhatbuf_r>
 80075dc:	9900      	ldr	r1, [sp, #0]
 80075de:	4605      	mov	r5, r0
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff fbb5 	bl	8006d50 <_malloc_r>
 80075e6:	b948      	cbnz	r0, 80075fc <__smakebuf_r+0x44>
 80075e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ec:	059a      	lsls	r2, r3, #22
 80075ee:	d4ef      	bmi.n	80075d0 <__smakebuf_r+0x18>
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	f043 0302 	orr.w	r3, r3, #2
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e7e3      	b.n	80075c4 <__smakebuf_r+0xc>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	6163      	str	r3, [r4, #20]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	6120      	str	r0, [r4, #16]
 800760e:	b15b      	cbz	r3, 8007628 <__smakebuf_r+0x70>
 8007610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f81d 	bl	8007654 <_isatty_r>
 800761a:	b128      	cbz	r0, 8007628 <__smakebuf_r+0x70>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	81a3      	strh	r3, [r4, #12]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	431d      	orrs	r5, r3
 800762c:	81a5      	strh	r5, [r4, #12]
 800762e:	e7cf      	b.n	80075d0 <__smakebuf_r+0x18>

08007630 <_fstat_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_fstat_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f7fe ff14 	bl	800646a <_fstat>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_fstat_r+0x1c>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b103      	cbz	r3, 800764c <_fstat_r+0x1c>
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	20025c30 	.word	0x20025c30

08007654 <_isatty_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	; (8007670 <_isatty_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7ff f86a 	bl	8006738 <_isatty>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_isatty_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_isatty_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20025c30 	.word	0x20025c30

08007674 <_sbrk_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d06      	ldr	r5, [pc, #24]	; (8007690 <_sbrk_r+0x1c>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	f7fb fc5c 	bl	8002f3c <_sbrk>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_sbrk_r+0x1a>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_sbrk_r+0x1a>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	20025c30 	.word	0x20025c30

08007694 <_init>:
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	bf00      	nop
 8007698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769a:	bc08      	pop	{r3}
 800769c:	469e      	mov	lr, r3
 800769e:	4770      	bx	lr

080076a0 <_fini>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	bf00      	nop
 80076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	469e      	mov	lr, r3
 80076aa:	4770      	bx	lr
