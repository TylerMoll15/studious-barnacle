
TMoll6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c2c  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00025bcc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025c54  20025c54  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f15a  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f55  00000000  00000000  0002f255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  000321b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b4c  00000000  00000000  000330b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002630e  00000000  00000000  00033c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e9f  00000000  00000000  00059f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9311  00000000  00000000  0006edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000048ac  00000000  00000000  001480c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014c970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bdc 	.word	0x08007bdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08007bdc 	.word	0x08007bdc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005a0:	f006 f936 	bl	8006810 <initialise_monitor_handles>
    LTCD__Init();
 80005a4:	f000 fede 	bl	8001364 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fe9b 	bl	80012e4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 ff7a 	bl	80014ac <LCD_Clear>
	RNG_Init();
 80005b8:	f001 faa6 	bl	8001b08 <RNG_Init>
	init_button_application();
 80005bc:	f000 fd2c 	bl	8001018 <init_button_application>
	init_button_interrupt_application();
 80005c0:	f000 fd30 	bl	8001024 <init_button_interrupt_application>
	LED_TIMER5_init();
 80005c4:	f001 fc7a 	bl	8001ebc <LED_TIMER5_init>

	hexti.Line = 0;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <ApplicationInit+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]

   #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ce:	f001 f844 	bl	800165a <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <ApplicationInit+0x44>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000b8 	.word	0x200000b8
 80005e0:	200000b0 	.word	0x200000b0

080005e4 <LCD_Touch_Polling_Demo>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo()
{
 80005e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e8:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80005ec:	af02      	add	r7, sp, #8
	struct Box_Boundaries p1_bounds;
	struct Box_Boundaries p2_bounds;
	struct Box_Boundaries player_select[2];
	uint16_t move_count = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
	uint32_t game_board[BOARD_DIMENSION][BOARD_DIMENSION]; //player x
	int screen_state = SCREEN_MENU;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	int player_turn = false;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	int winning_numb = NO_WINNER; //init to none
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	bool needs_to_increment = true;
 8000608:	2301      	movs	r3, #1
 800060a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237

	p1_bounds.left_x = 63;
 800060e:	233f      	movs	r3, #63	; 0x3f
 8000610:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	p1_bounds.top_y = 224;
 8000614:	23e0      	movs	r3, #224	; 0xe0
 8000616:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	p1_bounds.right_x = 190;
 800061a:	23be      	movs	r3, #190	; 0xbe
 800061c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	p1_bounds.bottom_y = 180;
 8000620:	23b4      	movs	r3, #180	; 0xb4
 8000622:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	p2_bounds.left_x = 63;
 8000626:	233f      	movs	r3, #63	; 0x3f
 8000628:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	p2_bounds.top_y = 155;
 800062c:	239b      	movs	r3, #155	; 0x9b
 800062e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	p2_bounds.right_x = 190;
 8000632:	23be      	movs	r3, #190	; 0xbe
 8000634:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	p2_bounds.bottom_y = 111;
 8000638:	236f      	movs	r3, #111	; 0x6f
 800063a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	player_select[0] = p1_bounds;
 800063e:	f507 76cc 	add.w	r6, r7, #408	; 0x198
 8000642:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	player_select[1] = p2_bounds;
 800064c:	f507 76d4 	add.w	r6, r7, #424	; 0x1a8
 8000650:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000656:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

	struct Box_Boundaries game_grid[3][3];
//	calc all box boundaries
	for(int x = 1; x < 4; x++){
 800065a:	2301      	movs	r3, #1
 800065c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8000660:	e063      	b.n	800072a <LCD_Touch_Polling_Demo+0x146>
		for(int y = 1; y < 4; y++){
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8000668:	e056      	b.n	8000718 <LCD_Touch_Polling_Demo+0x134>
			struct Box_Boundaries curr_grid;
			curr_grid.right_x = x * TOUCH_SCREEN_WIDTH/3;
 800066a:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 800066e:	4613      	mov	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4413      	add	r3, r2
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	461a      	mov	r2, r3
 8000678:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800067c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000680:	609a      	str	r2, [r3, #8]
			curr_grid.left_x = (x - 1) * TOUCH_SCREEN_WIDTH/3;
 8000682:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	461a      	mov	r2, r3
 8000692:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000696:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800069a:	601a      	str	r2, [r3, #0]
			curr_grid.top_y = y * TOUCH_SCREEN_HEIGHT/3;
 800069c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80006a0:	4613      	mov	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	019b      	lsls	r3, r3, #6
 80006a8:	4ace      	ldr	r2, [pc, #824]	; (80009e4 <LCD_Touch_Polling_Demo+0x400>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	17db      	asrs	r3, r3, #31
 80006b0:	1ad2      	subs	r2, r2, r3
 80006b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80006b6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80006ba:	605a      	str	r2, [r3, #4]
			curr_grid.bottom_y = (y - 1) * TOUCH_SCREEN_HEIGHT/3;
 80006bc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006c0:	1e5a      	subs	r2, r3, #1
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	019b      	lsls	r3, r3, #6
 80006ca:	4ac6      	ldr	r2, [pc, #792]	; (80009e4 <LCD_Touch_Polling_Demo+0x400>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80006d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80006dc:	60da      	str	r2, [r3, #12]

			game_grid[x - 1][y - 1] = curr_grid;
 80006de:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006e8:	1e58      	subs	r0, r3, #1
 80006ea:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80006ee:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	4403      	add	r3, r0
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	18ca      	adds	r2, r1, r3
 80006fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000702:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000706:	4616      	mov	r6, r2
 8000708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		for(int y = 1; y < 4; y++){
 800070e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000712:	3301      	adds	r3, #1
 8000714:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8000718:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800071c:	2b03      	cmp	r3, #3
 800071e:	dda4      	ble.n	800066a <LCD_Touch_Polling_Demo+0x86>
	for(int x = 1; x < 4; x++){
 8000720:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000724:	3301      	adds	r3, #1
 8000726:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800072a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800072e:	2b03      	cmp	r3, #3
 8000730:	dd97      	ble.n	8000662 <LCD_Touch_Polling_Demo+0x7e>
		}
	}

//	clear game_board
	for(int x = 0; x < BOARD_DIMENSION; x++){
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8000738:	e020      	b.n	800077c <LCD_Touch_Polling_Demo+0x198>
		for(int y = 0; y < BOARD_DIMENSION; y++){
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000740:	e013      	b.n	800076a <LCD_Touch_Polling_Demo+0x186>
			game_board[x][y] = 0;
 8000742:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000750:	4413      	add	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000758:	443b      	add	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	f843 2cd4 	str.w	r2, [r3, #-212]
		for(int y = 0; y < BOARD_DIMENSION; y++){
 8000760:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000764:	3301      	adds	r3, #1
 8000766:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800076a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800076e:	2b02      	cmp	r3, #2
 8000770:	dde7      	ble.n	8000742 <LCD_Touch_Polling_Demo+0x15e>
	for(int x = 0; x < BOARD_DIMENSION; x++){
 8000772:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800077c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000780:	2b02      	cmp	r3, #2
 8000782:	ddda      	ble.n	800073a <LCD_Touch_Polling_Demo+0x156>
	}


	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000784:	4898      	ldr	r0, [pc, #608]	; (80009e8 <LCD_Touch_Polling_Demo+0x404>)
 8000786:	f000 ff72 	bl	800166e <returnTouchStateAndLocation>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	f040 8329 	bne.w	8000de4 <LCD_Touch_Polling_Demo+0x800>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8000792:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <LCD_Touch_Polling_Demo+0x404>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	4b93      	ldr	r3, [pc, #588]	; (80009e8 <LCD_Touch_Polling_Demo+0x404>)
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	461a      	mov	r2, r3
 800079e:	4893      	ldr	r0, [pc, #588]	; (80009ec <LCD_Touch_Polling_Demo+0x408>)
 80007a0:	f006 f974 	bl	8006a8c <iprintf>


			struct Point touch_loc;
			touch_loc.x = StaticTouchData.x;
 80007a4:	4b90      	ldr	r3, [pc, #576]	; (80009e8 <LCD_Touch_Polling_Demo+0x404>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80007ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80007b2:	601a      	str	r2, [r3, #0]
			touch_loc.y = StaticTouchData.y;
 80007b4:	4b8c      	ldr	r3, [pc, #560]	; (80009e8 <LCD_Touch_Polling_Demo+0x404>)
 80007b6:	885b      	ldrh	r3, [r3, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80007be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80007c2:	605a      	str	r2, [r3, #4]

//			bool for if the player should switch
			bool changePlayer = false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223

			if(screen_state == SCREEN_MENU){
 80007ca:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d141      	bne.n	8000856 <LCD_Touch_Polling_Demo+0x272>
				needs_to_increment = true;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
				for(int i = 0; i < 2; i++){
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80007de:	e035      	b.n	800084c <LCD_Touch_Polling_Demo+0x268>
					if(checkTouchBounds(&touch_loc, player_select[i])){
 80007e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80007ea:	443b      	add	r3, r7
 80007ec:	3bb0      	subs	r3, #176	; 0xb0
 80007ee:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	9200      	str	r2, [sp, #0]
 80007f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f8:	f002 fcb4 	bl	8003164 <checkTouchBounds>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d01f      	beq.n	8000842 <LCD_Touch_Polling_Demo+0x25e>
						printf("Player %d box pressed!", i+1);
 8000802:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000806:	3301      	adds	r3, #1
 8000808:	4619      	mov	r1, r3
 800080a:	4879      	ldr	r0, [pc, #484]	; (80009f0 <LCD_Touch_Polling_Demo+0x40c>)
 800080c:	f006 f93e 	bl	8006a8c <iprintf>
						LCD_Clear(0, LCD_COLOR_WHITE);
 8000810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fe49 	bl	80014ac <LCD_Clear>
						Draw_Game();
 800081a:	f001 f8a5 	bl	8001968 <Draw_Game>

						if(i == 0){ //1P
 800081e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <LCD_Touch_Polling_Demo+0x24a>
							screen_state = SCREEN_1P;
 8000826:	2301      	movs	r3, #1
 8000828:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800082c:	e006      	b.n	800083c <LCD_Touch_Polling_Demo+0x258>
						}
						else if(i == 1){ //2P
 800082e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <LCD_Touch_Polling_Demo+0x258>
							screen_state = SCREEN_2P;
 8000836:	2303      	movs	r3, #3
 8000838:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
						}
						TIMER_start(TIM5_);
 800083c:	486d      	ldr	r0, [pc, #436]	; (80009f4 <LCD_Touch_Polling_Demo+0x410>)
 800083e:	f001 fad5 	bl	8001dec <TIMER_start>
				for(int i = 0; i < 2; i++){
 8000842:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000846:	3301      	adds	r3, #1
 8000848:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800084c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000850:	2b01      	cmp	r3, #1
 8000852:	ddc5      	ble.n	80007e0 <LCD_Touch_Polling_Demo+0x1fc>
 8000854:	e2b7      	b.n	8000dc6 <LCD_Touch_Polling_Demo+0x7e2>
					}
				}
			}
			else if(screen_state == SCREEN_2P || screen_state == SCREEN_1P){
 8000856:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800085a:	2b03      	cmp	r3, #3
 800085c:	d004      	beq.n	8000868 <LCD_Touch_Polling_Demo+0x284>
 800085e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000862:	2b01      	cmp	r3, #1
 8000864:	f040 82af 	bne.w	8000dc6 <LCD_Touch_Polling_Demo+0x7e2>
				for(int x = 0; x < 3; x++){
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800086e:	e2a5      	b.n	8000dbc <LCD_Touch_Polling_Demo+0x7d8>
					for(int y = 0; y < 3; y++){
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000876:	e297      	b.n	8000da8 <LCD_Touch_Polling_Demo+0x7c4>
						if(checkTouchBounds(&touch_loc, game_grid[x][y])){
 8000878:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800087c:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8000880:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800088e:	4413      	add	r3, r2
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	440b      	add	r3, r1
 8000894:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800089e:	f002 fc61 	bl	8003164 <checkTouchBounds>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f000 827a 	beq.w	8000d9e <LCD_Touch_Polling_Demo+0x7ba>
 80008aa:	466b      	mov	r3, sp
 80008ac:	461e      	mov	r6, r3

							printf("Grid Square x = %d y = %d pressed\n", x, y);
 80008ae:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80008b2:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80008b6:	4850      	ldr	r0, [pc, #320]	; (80009f8 <LCD_Touch_Polling_Demo+0x414>)
 80008b8:	f006 f8e8 	bl	8006a8c <iprintf>

							if(!game_board[x][y]){
 80008bc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80008d2:	443b      	add	r3, r7
 80008d4:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d144      	bne.n	8000966 <LCD_Touch_Polling_Demo+0x382>
								if(player_turn == PLAYER_O_BOOL){ //player O
 80008dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10f      	bne.n	8000904 <LCD_Touch_Polling_Demo+0x320>
									game_board[x][y] = PLAYER_O;
 80008e4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80008f2:	4413      	add	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80008fa:	443b      	add	r3, r7
 80008fc:	2202      	movs	r2, #2
 80008fe:	f843 2cd4 	str.w	r2, [r3, #-212]
 8000902:	e00e      	b.n	8000922 <LCD_Touch_Polling_Demo+0x33e>

								}
								else{ //player X
									game_board[x][y] = PLAYER_X;
 8000904:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800091a:	443b      	add	r3, r7
 800091c:	2201      	movs	r2, #1
 800091e:	f843 2cd4 	str.w	r2, [r3, #-212]
								}
								move_count++;
 8000922:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8000926:	3301      	adds	r3, #1
 8000928:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
								Draw_Move(player_turn, game_grid[x][y]);
 800092c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2d8      	uxtb	r0, r3
 800093a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800093e:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8000942:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000950:	4413      	add	r3, r2
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	440b      	add	r3, r1
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	9200      	str	r2, [sp, #0]
 800095a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800095c:	f001 f822 	bl	80019a4 <Draw_Move>
								changePlayer = true;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
							}

						    if(move_count == FULL_BOARD){
 8000966:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 800096a:	2b09      	cmp	r3, #9
 800096c:	d102      	bne.n	8000974 <LCD_Touch_Polling_Demo+0x390>
						    	winning_numb = TIE;
 800096e:	2303      	movs	r3, #3
 8000970:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
						    }



//							check win state
						    uint8_t num_win_states = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb

							uint16_t winning_states[num_win_states];
 800097a:	f897 11eb 	ldrb.w	r1, [r7, #491]	; 0x1eb
 800097e:	460b      	mov	r3, r1
 8000980:	3b01      	subs	r3, #1
 8000982:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000986:	b2cb      	uxtb	r3, r1
 8000988:	2200      	movs	r2, #0
 800098a:	461c      	mov	r4, r3
 800098c:	4615      	mov	r5, r2
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	012b      	lsls	r3, r5, #4
 8000998:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800099c:	0122      	lsls	r2, r4, #4
 800099e:	b2cb      	uxtb	r3, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	4698      	mov	r8, r3
 80009a4:	4691      	mov	r9, r2
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80009b2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80009b6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80009ba:	460b      	mov	r3, r1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	3307      	adds	r3, #7
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	ebad 0d03 	sub.w	sp, sp, r3
 80009c8:	ab02      	add	r3, sp, #8
 80009ca:	3301      	adds	r3, #1
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
						    uint8_t board_width = BOARD_DIMENSION;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

						//    set winning states to 0
						    for(int i = 0; i < num_win_states; i++){
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80009e0:	e018      	b.n	8000a14 <LCD_Touch_Polling_Demo+0x430>
 80009e2:	bf00      	nop
 80009e4:	55555556 	.word	0x55555556
 80009e8:	200000b0 	.word	0x200000b0
 80009ec:	08007bf4 	.word	0x08007bf4
 80009f0:	08007c08 	.word	0x08007c08
 80009f4:	40000c00 	.word	0x40000c00
 80009f8:	08007c20 	.word	0x08007c20
						    	winning_states[i] = 0;
 80009fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a00:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000a04:	2100      	movs	r1, #0
 8000a06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						    for(int i = 0; i < num_win_states; i++){
 8000a0a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000a0e:	3301      	adds	r3, #1
 8000a10:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000a14:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8000a18:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbed      	blt.n	80009fc <LCD_Touch_Polling_Demo+0x418>
						    }

						    uint16_t players[2] = {PLAYER_X, PLAYER_O};
 8000a20:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000a24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000a28:	4a99      	ldr	r2, [pc, #612]	; (8000c90 <LCD_Touch_Polling_Demo+0x6ac>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	601a      	str	r2, [r3, #0]
						    for(int j = 0; j < 2; j++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000a34:	e11f      	b.n	8000c76 <LCD_Touch_Polling_Demo+0x692>
						        for(int i = 0; i < BOARD_DIMENSION; i++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8000a3c:	e0e9      	b.n	8000c12 <LCD_Touch_Polling_Demo+0x62e>
						            if (game_board[0][i] == players[j]) winning_states[0]++;
 8000a3e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000a48:	443b      	add	r3, r7
 8000a4a:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8000a4e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000a52:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000a56:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000a5a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d107      	bne.n	8000a72 <LCD_Touch_Polling_Demo+0x48e>
 8000a62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a70:	801a      	strh	r2, [r3, #0]
						            if (game_board[1][i] == players[j]) winning_states[1]++;
 8000a72:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000a76:	3303      	adds	r3, #3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000a7e:	443b      	add	r3, r7
 8000a80:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8000a84:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000a88:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000a8c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000a90:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d107      	bne.n	8000aa8 <LCD_Touch_Polling_Demo+0x4c4>
 8000a98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a9c:	885b      	ldrh	r3, [r3, #2]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000aa6:	805a      	strh	r2, [r3, #2]
						            if (game_board[2][i] == players[j]) winning_states[2]++;
 8000aa8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000aac:	3306      	adds	r3, #6
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000ab4:	443b      	add	r3, r7
 8000ab6:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8000aba:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000abe:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000ac2:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000ac6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d107      	bne.n	8000ade <LCD_Touch_Polling_Demo+0x4fa>
 8000ace:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ad2:	889b      	ldrh	r3, [r3, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000adc:	809a      	strh	r2, [r3, #4]
						            if (game_board[i][0] == players[j]) winning_states[3]++;
 8000ade:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000aee:	443b      	add	r3, r7
 8000af0:	3bd4      	subs	r3, #212	; 0xd4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000af8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000afc:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000b00:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d107      	bne.n	8000b18 <LCD_Touch_Polling_Demo+0x534>
 8000b08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b0c:	88db      	ldrh	r3, [r3, #6]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b16:	80da      	strh	r2, [r3, #6]
						            if (game_board[i][1] == players[j]) winning_states[4]++;
 8000b18:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000b28:	443b      	add	r3, r7
 8000b2a:	3bd0      	subs	r3, #208	; 0xd0
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000b32:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000b36:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000b3a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d107      	bne.n	8000b52 <LCD_Touch_Polling_Demo+0x56e>
 8000b42:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b46:	891b      	ldrh	r3, [r3, #8]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b50:	811a      	strh	r2, [r3, #8]
						            if (game_board[i][2] == players[j]) winning_states[5]++;
 8000b52:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000b62:	443b      	add	r3, r7
 8000b64:	3bcc      	subs	r3, #204	; 0xcc
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000b6c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000b70:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000b74:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d107      	bne.n	8000b8c <LCD_Touch_Polling_Demo+0x5a8>
 8000b7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b80:	895b      	ldrh	r3, [r3, #10]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b8a:	815a      	strh	r2, [r3, #10]
						            if (game_board[i][i] == players[j]) winning_states[6]++;
 8000b8c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000b96:	443b      	add	r3, r7
 8000b98:	3bd4      	subs	r3, #212	; 0xd4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000ba0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000ba4:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000ba8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d107      	bne.n	8000bc0 <LCD_Touch_Polling_Demo+0x5dc>
 8000bb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bb4:	899b      	ldrh	r3, [r3, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bbe:	819a      	strh	r2, [r3, #12]
						            if (game_board[board_width - i - 1][i] == players[j]) winning_states[7]++;
 8000bc0:	f897 21df 	ldrb.w	r2, [r7, #479]	; 0x1df
 8000bc4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000bde:	443b      	add	r3, r7
 8000be0:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8000be4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8000be8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8000bec:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000bf0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d107      	bne.n	8000c08 <LCD_Touch_Polling_Demo+0x624>
 8000bf8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bfc:	89db      	ldrh	r3, [r3, #14]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c06:	81da      	strh	r2, [r3, #14]
						        for(int i = 0; i < BOARD_DIMENSION; i++){
 8000c08:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8000c12:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	f77f af11 	ble.w	8000a3e <LCD_Touch_Polling_Demo+0x45a>
						        }

						        for(int k = 0; k < num_win_states; k++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000c22:	e01d      	b.n	8000c60 <LCD_Touch_Polling_Demo+0x67c>
						            if(winning_states[k] == BOARD_DIMENSION) {
 8000c24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c28:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8000c2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d109      	bne.n	8000c48 <LCD_Touch_Polling_Demo+0x664>
						                winning_numb = players[j];
 8000c34:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000c38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000c3c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000c40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c44:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
						            }
						            winning_states[k] = 0;
 8000c48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c4c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8000c50:	2100      	movs	r1, #0
 8000c52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						        for(int k = 0; k < num_win_states; k++){
 8000c56:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000c60:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 8000c64:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbdb      	blt.n	8000c24 <LCD_Touch_Polling_Demo+0x640>
						    for(int j = 0; j < 2; j++){
 8000c6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000c70:	3301      	adds	r3, #1
 8000c72:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000c76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	f77f aedb 	ble.w	8000a36 <LCD_Touch_Polling_Demo+0x452>
						    }

														// if 1 player, automatically place 'O'
							int rand_x;
							int rand_y;
							if(screen_state == SCREEN_1P){
 8000c80:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d142      	bne.n	8000d0e <LCD_Touch_Polling_Demo+0x72a>
								int ran_sel_placement = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

								// while rand indices already have placement, re-call rand-int
								while(ran_sel_placement && move_count != FULL_BOARD && winning_numb == NO_WINNER){
 8000c8e:	e031      	b.n	8000cf4 <LCD_Touch_Polling_Demo+0x710>
 8000c90:	08007cb8 	.word	0x08007cb8
									HAL_Delay(100);
 8000c94:	2064      	movs	r0, #100	; 0x64
 8000c96:	f002 fb2b 	bl	80032f0 <HAL_Delay>
									rand_x = Get_Random_Number() % BOARD_DIMENSION;
 8000c9a:	f000 ff55 	bl	8001b48 <Get_Random_Number>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	4bcf      	ldr	r3, [pc, #828]	; (8000fe0 <LCD_Touch_Polling_Demo+0x9fc>)
 8000ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ca6:	085a      	lsrs	r2, r3, #1
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	1aca      	subs	r2, r1, r3
 8000cb0:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
									HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f002 fb1b 	bl	80032f0 <HAL_Delay>
									rand_y = Get_Random_Number() % BOARD_DIMENSION;
 8000cba:	f000 ff45 	bl	8001b48 <Get_Random_Number>
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	4bc7      	ldr	r3, [pc, #796]	; (8000fe0 <LCD_Touch_Polling_Demo+0x9fc>)
 8000cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8000cc6:	085a      	lsrs	r2, r3, #1
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	1aca      	subs	r2, r1, r3
 8000cd0:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc

									ran_sel_placement = game_board[rand_x][rand_y];
 8000cd4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000cea:	443b      	add	r3, r7
 8000cec:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8000cf0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
								while(ran_sel_placement && move_count != FULL_BOARD && winning_numb == NO_WINNER){
 8000cf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d008      	beq.n	8000d0e <LCD_Touch_Polling_Demo+0x72a>
 8000cfc:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8000d00:	2b09      	cmp	r3, #9
 8000d02:	d004      	beq.n	8000d0e <LCD_Touch_Polling_Demo+0x72a>
 8000d04:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d0c2      	beq.n	8000c94 <LCD_Touch_Polling_Demo+0x6b0>
								}
							}

//							drawing move logic

							if(screen_state == SCREEN_1P && changePlayer){
 8000d0e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d12e      	bne.n	8000d74 <LCD_Touch_Polling_Demo+0x790>
 8000d16:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d02a      	beq.n	8000d74 <LCD_Touch_Polling_Demo+0x790>
								Draw_Move(PLAYER_O_BOOL, game_grid[rand_x][rand_y]);
 8000d1e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000d22:	f5a3 71b2 	sub.w	r1, r3, #356	; 0x164
 8000d26:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000d34:	4413      	add	r3, r2
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	9200      	str	r2, [sp, #0]
 8000d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 fe2f 	bl	80019a4 <Draw_Move>
								game_board[rand_x][rand_y] = PLAYER_O;
 8000d46:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8000d54:	4413      	add	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000d5c:	443b      	add	r3, r7
 8000d5e:	2202      	movs	r2, #2
 8000d60:	f843 2cd4 	str.w	r2, [r3, #-212]
								move_count++;
 8000d64:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
								changePlayer = false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
							}

						    if(move_count == FULL_BOARD){
 8000d74:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8000d78:	2b09      	cmp	r3, #9
 8000d7a:	d102      	bne.n	8000d82 <LCD_Touch_Polling_Demo+0x79e>
						    	winning_numb = TIE;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
						    }

						    if(winning_numb != NO_WINNER) {
 8000d82:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8a:	d005      	beq.n	8000d98 <LCD_Touch_Polling_Demo+0x7b4>
								TIMER_stop(TIM5_);
 8000d8c:	4895      	ldr	r0, [pc, #596]	; (8000fe4 <LCD_Touch_Polling_Demo+0xa00>)
 8000d8e:	f001 f845 	bl	8001e1c <TIMER_stop>
								screen_state = SCREEN_END;
 8000d92:	2304      	movs	r3, #4
 8000d94:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
							}
								break;
 8000d98:	bf00      	nop
 8000d9a:	46b5      	mov	sp, r6
 8000d9c:	e009      	b.n	8000db2 <LCD_Touch_Polling_Demo+0x7ce>
					for(int y = 0; y < 3; y++){
 8000d9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000da8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	f77f ad63 	ble.w	8000878 <LCD_Touch_Polling_Demo+0x294>
				for(int x = 0; x < 3; x++){
 8000db2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000db6:	3301      	adds	r3, #1
 8000db8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000dbc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	f77f ad55 	ble.w	8000870 <LCD_Touch_Polling_Demo+0x28c>


						}
					}
				}
				if(changePlayer) player_turn = !player_turn;
 8000dc6:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8090 	beq.w	8000ef0 <LCD_Touch_Polling_Demo+0x90c>
 8000dd0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000de2:	e085      	b.n	8000ef0 <LCD_Touch_Polling_Demo+0x90c>
			}
		else if(screen_state == SCREEN_END){
 8000de4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d17e      	bne.n	8000eea <LCD_Touch_Polling_Demo+0x906>
			// change screen
			if(winning_numb != NO_WINNER){
 8000dec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d07c      	beq.n	8000ef0 <LCD_Touch_Polling_Demo+0x90c>

//				end check win state
			if (needs_to_increment){
 8000df6:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d03f      	beq.n	8000e7e <LCD_Touch_Polling_Demo+0x89a>
				LCD_Clear(0, LCD_COLOR_MAGENTA);
 8000dfe:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fb52 	bl	80014ac <LCD_Clear>
				switch(winning_numb){
 8000e08:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d026      	beq.n	8000e5e <LCD_Touch_Polling_Demo+0x87a>
 8000e10:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	dc2f      	bgt.n	8000e78 <LCD_Touch_Polling_Demo+0x894>
 8000e18:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d004      	beq.n	8000e2a <LCD_Touch_Polling_Demo+0x846>
 8000e20:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d00d      	beq.n	8000e44 <LCD_Touch_Polling_Demo+0x860>
 8000e28:	e026      	b.n	8000e78 <LCD_Touch_Polling_Demo+0x894>
					case PLAYER_X:
						writeWord_("X Wins!", 310, 100, true);
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	2264      	movs	r2, #100	; 0x64
 8000e2e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000e32:	486d      	ldr	r0, [pc, #436]	; (8000fe8 <LCD_Touch_Polling_Demo+0xa04>)
 8000e34:	f000 fce6 	bl	8001804 <writeWord_>
						x_win_history++;
 8000e38:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <LCD_Touch_Polling_Demo+0xa08>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a6b      	ldr	r2, [pc, #428]	; (8000fec <LCD_Touch_Polling_Demo+0xa08>)
 8000e40:	6013      	str	r3, [r2, #0]
						break;
 8000e42:	e019      	b.n	8000e78 <LCD_Touch_Polling_Demo+0x894>
					case PLAYER_O:
						writeWord_("O Wins!", 310, 100, true);
 8000e44:	2301      	movs	r3, #1
 8000e46:	2264      	movs	r2, #100	; 0x64
 8000e48:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000e4c:	4868      	ldr	r0, [pc, #416]	; (8000ff0 <LCD_Touch_Polling_Demo+0xa0c>)
 8000e4e:	f000 fcd9 	bl	8001804 <writeWord_>
						o_win_history++;
 8000e52:	4b68      	ldr	r3, [pc, #416]	; (8000ff4 <LCD_Touch_Polling_Demo+0xa10>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a66      	ldr	r2, [pc, #408]	; (8000ff4 <LCD_Touch_Polling_Demo+0xa10>)
 8000e5a:	6013      	str	r3, [r2, #0]
						break;
 8000e5c:	e00c      	b.n	8000e78 <LCD_Touch_Polling_Demo+0x894>
					case TIE:
						writeWord_("Tie!", 310, 100, true);
 8000e5e:	2301      	movs	r3, #1
 8000e60:	2264      	movs	r2, #100	; 0x64
 8000e62:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000e66:	4864      	ldr	r0, [pc, #400]	; (8000ff8 <LCD_Touch_Polling_Demo+0xa14>)
 8000e68:	f000 fccc 	bl	8001804 <writeWord_>
						tie_history++;
 8000e6c:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <LCD_Touch_Polling_Demo+0xa18>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <LCD_Touch_Polling_Demo+0xa18>)
 8000e74:	6013      	str	r3, [r2, #0]
						break;
 8000e76:	bf00      	nop
				}
				needs_to_increment = false;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
				}

				writeWord_("Game Record:", 280, 130, false);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2282      	movs	r2, #130	; 0x82
 8000e82:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e86:	485e      	ldr	r0, [pc, #376]	; (8001000 <LCD_Touch_Polling_Demo+0xa1c>)
 8000e88:	f000 fcbc 	bl	8001804 <writeWord_>
				char history_string[100];
				sprintf(history_string, "X: %d O: %d Tie: %d", x_win_history, o_win_history, tie_history);
 8000e8c:	4b57      	ldr	r3, [pc, #348]	; (8000fec <LCD_Touch_Polling_Demo+0xa08>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b58      	ldr	r3, [pc, #352]	; (8000ff4 <LCD_Touch_Polling_Demo+0xa10>)
 8000e92:	6819      	ldr	r1, [r3, #0]
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <LCD_Touch_Polling_Demo+0xa18>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4638      	mov	r0, r7
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4959      	ldr	r1, [pc, #356]	; (8001004 <LCD_Touch_Polling_Demo+0xa20>)
 8000ea0:	f005 fe62 	bl	8006b68 <siprintf>
				writeWord_(history_string, 280, 150, false);
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2296      	movs	r2, #150	; 0x96
 8000eaa:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000eae:	f000 fca9 	bl	8001804 <writeWord_>
				
				char timing_string[100];
				TIMER_stop(TIM5_);
 8000eb2:	484c      	ldr	r0, [pc, #304]	; (8000fe4 <LCD_Touch_Polling_Demo+0xa00>)
 8000eb4:	f000 ffb2 	bl	8001e1c <TIMER_stop>
				uint32_t game_length = TIMER_get_timer_value(TIM5_);
 8000eb8:	484a      	ldr	r0, [pc, #296]	; (8000fe4 <LCD_Touch_Polling_Demo+0xa00>)
 8000eba:	f000 ffd4 	bl	8001e66 <TIMER_get_timer_value>
 8000ebe:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
				sprintf(timing_string, "Length: %ld seconds", TIMER_convert_to_seconds(game_length));
 8000ec2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8000ec6:	f001 f843 	bl	8001f50 <TIMER_convert_to_seconds>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed0:	494d      	ldr	r1, [pc, #308]	; (8001008 <LCD_Touch_Polling_Demo+0xa24>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 fe48 	bl	8006b68 <siprintf>

				writeWord_(timing_string, 280, 170, false);
 8000ed8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000edc:	2300      	movs	r3, #0
 8000ede:	22aa      	movs	r2, #170	; 0xaa
 8000ee0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000ee4:	f000 fc8e 	bl	8001804 <writeWord_>
 8000ee8:	e002      	b.n	8000ef0 <LCD_Touch_Polling_Demo+0x90c>
		}

		} else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000eea:	4848      	ldr	r0, [pc, #288]	; (800100c <LCD_Touch_Polling_Demo+0xa28>)
 8000eec:	f005 fe34 	bl	8006b58 <puts>
		}

//		deal with button reset
		int scheduledEvents = getScheduledEvents();
 8000ef0:	f000 fe5a 	bl	8001ba8 <getScheduledEvents>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		if(scheduledEvents && RESET_GAME_SCREEN_EVENT){
 8000efa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f43f ac40 	beq.w	8000784 <LCD_Touch_Polling_Demo+0x1a0>
			LCD_Clear(0, LCD_COLOR_CYAN);
 8000f04:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 facf 	bl	80014ac <LCD_Clear>
			writeWord("Resetting Game", 260, 100);
 8000f0e:	2264      	movs	r2, #100	; 0x64
 8000f10:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f14:	483e      	ldr	r0, [pc, #248]	; (8001010 <LCD_Touch_Polling_Demo+0xa2c>)
 8000f16:	f000 fc45 	bl	80017a4 <writeWord>
			HAL_Delay(500);
 8000f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1e:	f002 f9e7 	bl	80032f0 <HAL_Delay>
			writeWord(".", 425, 100);
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	f240 11a9 	movw	r1, #425	; 0x1a9
 8000f28:	483a      	ldr	r0, [pc, #232]	; (8001014 <LCD_Touch_Polling_Demo+0xa30>)
 8000f2a:	f000 fc3b 	bl	80017a4 <writeWord>
			HAL_Delay(500);
 8000f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f32:	f002 f9dd 	bl	80032f0 <HAL_Delay>
			writeWord(".", 435, 100);
 8000f36:	2264      	movs	r2, #100	; 0x64
 8000f38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000f3c:	4835      	ldr	r0, [pc, #212]	; (8001014 <LCD_Touch_Polling_Demo+0xa30>)
 8000f3e:	f000 fc31 	bl	80017a4 <writeWord>
			HAL_Delay(500);
 8000f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f46:	f002 f9d3 	bl	80032f0 <HAL_Delay>
			writeWord(".", 445, 100);
 8000f4a:	2264      	movs	r2, #100	; 0x64
 8000f4c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8000f50:	4830      	ldr	r0, [pc, #192]	; (8001014 <LCD_Touch_Polling_Demo+0xa30>)
 8000f52:	f000 fc27 	bl	80017a4 <writeWord>
			HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f002 f9c9 	bl	80032f0 <HAL_Delay>
			drawMenu();
 8000f5e:	f000 fb93 	bl	8001688 <drawMenu>
			removeSchedulerEvent(RESET_GAME_SCREEN_EVENT);
 8000f62:	2040      	movs	r0, #64	; 0x40
 8000f64:	f000 fe3e 	bl	8001be4 <removeSchedulerEvent>
			screen_state = SCREEN_MENU;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			winning_numb = NO_WINNER;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			move_count = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
			player_turn = PLAYER_X_BOOL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			TIMER_reset(TIM5_);
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <LCD_Touch_Polling_Demo+0xa00>)
 8000f84:	f000 ff62 	bl	8001e4c <TIMER_reset>


			//	clear game_board
			for(int x = 0; x < BOARD_DIMENSION; x++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8000f8e:	e020      	b.n	8000fd2 <LCD_Touch_Polling_Demo+0x9ee>
				for(int y = 0; y < BOARD_DIMENSION; y++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000f96:	e013      	b.n	8000fc0 <LCD_Touch_Polling_Demo+0x9dc>
					game_board[x][y] = 0;
 8000f98:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000fae:	443b      	add	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f843 2cd4 	str.w	r2, [r3, #-212]
				for(int y = 0; y < BOARD_DIMENSION; y++){
 8000fb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000fc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	dde7      	ble.n	8000f98 <LCD_Touch_Polling_Demo+0x9b4>
			for(int x = 0; x < BOARD_DIMENSION; x++){
 8000fc8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8000fd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	ddda      	ble.n	8000f90 <LCD_Touch_Polling_Demo+0x9ac>
	while (1) {
 8000fda:	f7ff bbd3 	b.w	8000784 <LCD_Touch_Polling_Demo+0x1a0>
 8000fde:	bf00      	nop
 8000fe0:	aaaaaaab 	.word	0xaaaaaaab
 8000fe4:	40000c00 	.word	0x40000c00
 8000fe8:	08007c44 	.word	0x08007c44
 8000fec:	200000a4 	.word	0x200000a4
 8000ff0:	08007c4c 	.word	0x08007c4c
 8000ff4:	200000a8 	.word	0x200000a8
 8000ff8:	08007c54 	.word	0x08007c54
 8000ffc:	200000ac 	.word	0x200000ac
 8001000:	08007c5c 	.word	0x08007c5c
 8001004:	08007c6c 	.word	0x08007c6c
 8001008:	08007c80 	.word	0x08007c80
 800100c:	08007c94 	.word	0x08007c94
 8001010:	08007ca4 	.word	0x08007ca4
 8001014:	08007cb4 	.word	0x08007cb4

08001018 <init_button_application>:
		}

	}
}

void init_button_application(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	init_button();
 800101c:	f000 f83c 	bl	8001098 <init_button>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <init_button_interrupt_application>:

void init_RNG_application(){
	RNG_Init();
}

void init_button_interrupt_application(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	interrupt_init_button();
 8001028:	f000 f870 	bl	800110c <interrupt_init_button>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001034:	2006      	movs	r0, #6
 8001036:	f002 fac6 	bl	80035c6 <HAL_NVIC_DisableIRQ>
    addSchedulerEvent(RESET_GAME_SCREEN_EVENT);
 800103a:	2040      	movs	r0, #64	; 0x40
 800103c:	f000 fdc0 	bl	8001bc0 <addSchedulerEvent>
    printf("Resetting Screen!");
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <EXTI0_IRQHandler+0x34>)
 8001042:	f005 fd23 	bl	8006a8c <iprintf>
    HAL_EXTI_ClearPending(&hexti, GPIO_MODE_IT_RISING);
 8001046:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <EXTI0_IRQHandler+0x38>)
 800104c:	f002 fae4 	bl	8003618 <HAL_EXTI_ClearPending>
    __HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_LINE_0); // ??? or __HAL_GPIO_EXTI_CLEAR_IT()
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <EXTI0_IRQHandler+0x3c>)
 8001052:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001056:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001058:	2006      	movs	r0, #6
 800105a:	f002 faa6 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08007cbc 	.word	0x08007cbc
 8001068:	200000b8 	.word	0x200000b8
 800106c:	40013c00 	.word	0x40013c00

08001070 <TIM5_IRQHandler>:

void TIM5_IRQHandler(){ //??? should this be enabled or no
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8001074:	2032      	movs	r0, #50	; 0x32
 8001076:	f002 faa6 	bl	80035c6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_ClearPendingIRQ(TIM5_IRQn);
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f002 fabd 	bl	80035fa <HAL_NVIC_ClearPendingIRQ>
    IRQ_TIMx_clear_pending(UIF_INTERRUPT_FLAG, TIM5_);
 8001080:	4904      	ldr	r1, [pc, #16]	; (8001094 <TIM5_IRQHandler+0x24>)
 8001082:	2000      	movs	r0, #0
 8001084:	f000 ff4e 	bl	8001f24 <IRQ_TIMx_clear_pending>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f002 fa8e 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000c00 	.word	0x40000c00

08001098 <init_button>:
#include "Button_Driver.h"

void init_button(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef configure_Button = {};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
	enable_clock();
 80010ac:	f000 f814 	bl	80010d8 <enable_clock>

	configure_Button.Pin = GPIO_PIN_0; // ??? NEW pin number is zero, but 0x1?
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
	configure_Button.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
	configure_Button.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
	configure_Button.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
	// configure_Button.Alternate = GPIO_MODE_OUTPUT_PP; //??? should I not configure the alt register?

	HAL_GPIO_Init(GPIOA, &configure_Button);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <init_button+0x3c>)
 80010c6:	f002 fabf 	bl	8003648 <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000

080010d8 <enable_clock>:

void enable_clock(){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <enable_clock+0x30>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <enable_clock+0x30>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <enable_clock+0x30>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <interrupt_init_button>:

//	shouldnt get here
	return false;
}

void interrupt_init_button(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef configure_Button = {};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
	enable_clock();
 8001120:	f7ff ffda 	bl	80010d8 <enable_clock>

	configure_Button.Pin = GPIO_PIN_0; // ??? pin can't be zero?
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
	configure_Button.Mode = GPIO_MODE_IT_RISING;
 8001128:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112c:	60bb      	str	r3, [r7, #8]
	configure_Button.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	613b      	str	r3, [r7, #16]
	configure_Button.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	// configure_Button.GPIO_PinConfig.OPType = GPIO_OTYPER_PUSH_PULL;
	// configure_Button.GPIO_PinConfig.PinInterruptMode = GPIO_INTERRUPT_MODE_FALLING_AND_RISING_EDGE;

	HAL_GPIO_Init(GPIOA, &configure_Button);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <interrupt_init_button+0x44>)
 800113c:	f002 fa84 	bl	8003648 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001140:	2006      	movs	r0, #6
 8001142:	f002 fa32 	bl	80035aa <HAL_NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000

08001154 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <LCD_GPIO_Init+0x174>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <LCD_GPIO_Init+0x174>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <LCD_GPIO_Init+0x174>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <LCD_GPIO_Init+0x174>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <LCD_GPIO_Init+0x174>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <LCD_GPIO_Init+0x174>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800121e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001222:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001230:	230e      	movs	r3, #14
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4824      	ldr	r0, [pc, #144]	; (80012cc <LCD_GPIO_Init+0x178>)
 800123c:	f002 fa04 	bl	8003648 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001240:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001244:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <LCD_GPIO_Init+0x17c>)
 800124e:	f002 f9fb 	bl	8003648 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001252:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	481d      	ldr	r0, [pc, #116]	; (80012d4 <LCD_GPIO_Init+0x180>)
 8001260:	f002 f9f2 	bl	8003648 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001264:	2348      	movs	r3, #72	; 0x48
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <LCD_GPIO_Init+0x184>)
 8001270:	f002 f9ea 	bl	8003648 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <LCD_GPIO_Init+0x188>)
 8001282:	f002 f9e1 	bl	8003648 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001286:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800128a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <LCD_GPIO_Init+0x18c>)
 8001294:	f002 f9d8 	bl	8003648 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800129c:	2309      	movs	r3, #9
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <LCD_GPIO_Init+0x17c>)
 80012a8:	f002 f9ce 	bl	8003648 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <LCD_GPIO_Init+0x18c>)
 80012ba:	f002 f9c5 	bl	8003648 <HAL_GPIO_Init>
}
 80012be:	bf00      	nop
 80012c0:	3730      	adds	r7, #48	; 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800

080012e4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80012f2:	23f0      	movs	r3, #240	; 0xf0
 80012f4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80012fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012fe:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800130c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001312:	2305      	movs	r3, #5
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <LTCD_Layer_Init+0x78>)
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001320:	23f0      	movs	r3, #240	; 0xf0
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001324:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <LTCD_Layer_Init+0x7c>)
 8001346:	f003 fd45 	bl	8004dd4 <HAL_LTDC_ConfigLayer>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001350:	f000 f97e 	bl	8001650 <LCD_Error_Handler>
	}
}
 8001354:	bf00      	nop
 8001356:	3740      	adds	r7, #64	; 0x40
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000019c 	.word	0x2000019c
 8001360:	200000c0 	.word	0x200000c0

08001364 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <LTCD__Init+0xb0>)
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <LTCD__Init+0xb4>)
 800136c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <LTCD__Init+0xb0>)
 8001370:	2209      	movs	r2, #9
 8001372:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <LTCD__Init+0xb0>)
 8001376:	2201      	movs	r2, #1
 8001378:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <LTCD__Init+0xb0>)
 800137c:	221d      	movs	r2, #29
 800137e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <LTCD__Init+0xb0>)
 8001382:	2203      	movs	r2, #3
 8001384:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <LTCD__Init+0xb0>)
 8001388:	f240 120d 	movw	r2, #269	; 0x10d
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <LTCD__Init+0xb0>)
 8001390:	f240 1243 	movw	r2, #323	; 0x143
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <LTCD__Init+0xb0>)
 8001398:	f240 1217 	movw	r2, #279	; 0x117
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <LTCD__Init+0xb0>)
 80013a0:	f240 1247 	movw	r2, #327	; 0x147
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <LTCD__Init+0xb0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <LTCD__Init+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <LTCD__Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <LTCD__Init+0xb8>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <LTCD__Init+0xb8>)
 80013c6:	22c0      	movs	r2, #192	; 0xc0
 80013c8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <LTCD__Init+0xb8>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <LTCD__Init+0xb8>)
 80013d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <LTCD__Init+0xb8>)
 80013da:	f004 fb55 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <LTCD__Init+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <LTCD__Init+0xb0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <LTCD__Init+0xb0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LTCD__Init+0xb0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80013f6:	f7ff fead 	bl	8001154 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <LTCD__Init+0xb0>)
 80013fc:	f003 fc1a 	bl	8004c34 <HAL_LTDC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001406:	f000 f923 	bl	8001650 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800140a:	f000 fdb3 	bl	8001f74 <ili9341_Init>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000c0 	.word	0x200000c0
 8001418:	40016800 	.word	0x40016800
 800141c:	20000168 	.word	0x20000168

08001420 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001432:	88ba      	ldrh	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	461a      	mov	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4413      	add	r3, r2
 8001442:	4905      	ldr	r1, [pc, #20]	; (8001458 <LCD_Draw_Pixel+0x38>)
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000019c 	.word	0x2000019c

0800145c <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	81fb      	strh	r3, [r7, #14]
 800147e:	e00b      	b.n	8001498 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8001480:	89fa      	ldrh	r2, [r7, #14]
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	b299      	uxth	r1, r3
 8001488:	883a      	ldrh	r2, [r7, #0]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffc7 	bl	8001420 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	81fb      	strh	r3, [r7, #14]
 8001498:	89fa      	ldrh	r2, [r7, #14]
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3ef      	bcc.n	8001480 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
	...

080014ac <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10e      	bne.n	80014e0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e007      	b.n	80014d8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80014c8:	4908      	ldr	r1, [pc, #32]	; (80014ec <LCD_Clear+0x40>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	88ba      	ldrh	r2, [r7, #4]
 80014ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80014de:	d3f3      	bcc.n	80014c8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	2000019c 	.word	0x2000019c

080014f0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <LCD_SetTextColor+0x1c>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	8013      	strh	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000000 	.word	0x20000000

08001510 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <LCD_SetFont+0x1c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000198 	.word	0x20000198

08001530 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	603a      	str	r2, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	460b      	mov	r3, r1
 800153e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e04c      	b.n	80015e8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	e03f      	b.n	80015d4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <LCD_Draw_Char+0xd0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <LCD_Draw_Char+0xd4>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	b29b      	uxth	r3, r3
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	409a      	lsls	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	fa42 f303 	asr.w	r3, r2, r3
 800157c:	400b      	ands	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <LCD_Draw_Char+0x5c>
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <LCD_Draw_Char+0xd0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d920      	bls.n	80015ce <LCD_Draw_Char+0x9e>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	4413      	add	r3, r2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	fa42 f303 	asr.w	r3, r2, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <LCD_Draw_Char+0x80>
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <LCD_Draw_Char+0xd0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d80e      	bhi.n	80015ce <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4413      	add	r3, r2
 80015b8:	b298      	uxth	r0, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <LCD_Draw_Char+0xd8>)
 80015c6:	8812      	ldrh	r2, [r2, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff ff29 	bl	8001420 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <LCD_Draw_Char+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	889b      	ldrh	r3, [r3, #4]
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4293      	cmp	r3, r2
 80015e0:	d3b8      	bcc.n	8001554 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LCD_Draw_Char+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	88db      	ldrh	r3, [r3, #6]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d3ab      	bcc.n	800154e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000198 	.word	0x20000198
 8001604:	aaaaaaab 	.word	0xaaaaaaab
 8001608:	20000000 	.word	0x20000000

0800160c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	460b      	mov	r3, r1
 8001618:	80bb      	strh	r3, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	3b20      	subs	r3, #32
 8001622:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <LCD_DisplayChar+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <LCD_DisplayChar+0x40>)
 800162e:	6809      	ldr	r1, [r1, #0]
 8001630:	88c9      	ldrh	r1, [r1, #6]
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	441a      	add	r2, r3
 800163a:	88b9      	ldrh	r1, [r7, #4]
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff76 	bl	8001530 <LCD_Draw_Char>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000198 	.word	0x20000198

08001650 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <LCD_Error_Handler+0x8>

0800165a <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800165e:	f001 f9f5 	bl	8002a4c <STMPE811_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b02      	cmp	r3, #2
 8001666:	d000      	beq.n	800166a <InitializeLCDTouch+0x10>
  {
	 for(;;); // Hang code due to error in initialzation
 8001668:	e7fe      	b.n	8001668 <InitializeLCDTouch+0xe>
  }
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}

0800166e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f001 faa0 	bl	8002bbc <STMPE811_ReadTouch>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <drawMenu>:
#include "Menu.h"




void drawMenu(){
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
    LCD_Clear(0, LCD_COLOR_WHITE);
 800168e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff ff0a 	bl	80014ac <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_BLACK);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ff29 	bl	80014f0 <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 800169e:	483e      	ldr	r0, [pc, #248]	; (8001798 <drawMenu+0x110>)
 80016a0:	f7ff ff36 	bl	8001510 <LCD_SetFont>
	LCD_DisplayChar(90,270,'T');
 80016a4:	2254      	movs	r2, #84	; 0x54
 80016a6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016aa:	205a      	movs	r0, #90	; 0x5a
 80016ac:	f7ff ffae 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(100,270,'i');
 80016b0:	2269      	movs	r2, #105	; 0x69
 80016b2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f7ff ffa8 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(110,270,'c');
 80016bc:	2263      	movs	r2, #99	; 0x63
 80016be:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016c2:	206e      	movs	r0, #110	; 0x6e
 80016c4:	f7ff ffa2 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(120,270,'-');
 80016c8:	222d      	movs	r2, #45	; 0x2d
 80016ca:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f7ff ff9c 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(130,270,'T');
 80016d4:	2254      	movs	r2, #84	; 0x54
 80016d6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016da:	2082      	movs	r0, #130	; 0x82
 80016dc:	f7ff ff96 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(140,270,'a');
 80016e0:	2261      	movs	r2, #97	; 0x61
 80016e2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016e6:	208c      	movs	r0, #140	; 0x8c
 80016e8:	f7ff ff90 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(155,270,'c');
 80016ec:	2263      	movs	r2, #99	; 0x63
 80016ee:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016f2:	209b      	movs	r0, #155	; 0x9b
 80016f4:	f7ff ff8a 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(165,270,'T');
 80016f8:	2254      	movs	r2, #84	; 0x54
 80016fa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016fe:	20a5      	movs	r0, #165	; 0xa5
 8001700:	f7ff ff84 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(175,270,'o');
 8001704:	226f      	movs	r2, #111	; 0x6f
 8001706:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800170a:	20af      	movs	r0, #175	; 0xaf
 800170c:	f7ff ff7e 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(190,270,'e');
 8001710:	2265      	movs	r2, #101	; 0x65
 8001712:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001716:	20be      	movs	r0, #190	; 0xbe
 8001718:	f7ff ff78 	bl	800160c <LCD_DisplayChar>

	LCD_DisplayChar(172,290,'0');
 800171c:	2230      	movs	r2, #48	; 0x30
 800171e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001722:	20ac      	movs	r0, #172	; 0xac
 8001724:	f7ff ff72 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(187,290,'_');
 8001728:	225f      	movs	r2, #95	; 0x5f
 800172a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800172e:	20bb      	movs	r0, #187	; 0xbb
 8001730:	f7ff ff6c 	bl	800160c <LCD_DisplayChar>
	LCD_DisplayChar(202,290,'O');
 8001734:	224f      	movs	r2, #79	; 0x4f
 8001736:	f44f 7191 	mov.w	r1, #290	; 0x122
 800173a:	20ca      	movs	r0, #202	; 0xca
 800173c:	f7ff ff66 	bl	800160c <LCD_DisplayChar>

    writeWord("1 Player", 310, 100);
 8001740:	2264      	movs	r2, #100	; 0x64
 8001742:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <drawMenu+0x114>)
 8001748:	f000 f82c 	bl	80017a4 <writeWord>
    writeWord("2 Player", 310, 150);
 800174c:	2296      	movs	r2, #150	; 0x96
 800174e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <drawMenu+0x118>)
 8001754:	f000 f826 	bl	80017a4 <writeWord>

//    player 1 box
    struct Point boxTopLeft;
    boxTopLeft.x = 305;
 8001758:	f240 1331 	movw	r3, #305	; 0x131
 800175c:	613b      	str	r3, [r7, #16]
    boxTopLeft.y = 95;
 800175e:	235f      	movs	r3, #95	; 0x5f
 8001760:	617b      	str	r3, [r7, #20]
    drawBox(&boxTopLeft, 30, 108, LCD_COLOR_BLACK);
 8001762:	4638      	mov	r0, r7
 8001764:	f107 0110 	add.w	r1, r7, #16
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	236c      	movs	r3, #108	; 0x6c
 800176e:	221e      	movs	r2, #30
 8001770:	f000 f88a 	bl	8001888 <drawBox>

//    player 2 box
    boxTopLeft.x = 305;
 8001774:	f240 1331 	movw	r3, #305	; 0x131
 8001778:	613b      	str	r3, [r7, #16]
    boxTopLeft.y = 145;
 800177a:	2391      	movs	r3, #145	; 0x91
 800177c:	617b      	str	r3, [r7, #20]
    drawBox(&boxTopLeft, 30, 108, LCD_COLOR_BLACK);
 800177e:	4638      	mov	r0, r7
 8001780:	f107 0110 	add.w	r1, r7, #16
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	236c      	movs	r3, #108	; 0x6c
 800178a:	221e      	movs	r2, #30
 800178c:	f000 f87c 	bl	8001888 <drawBox>

}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000004 	.word	0x20000004
 800179c:	08007cd0 	.word	0x08007cd0
 80017a0:	08007cdc 	.word	0x08007cdc

080017a4 <writeWord>:

void writeWord(char* word, int start_x, int start_y){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
    int letter_distance = 12;
 80017b0:	230c      	movs	r3, #12
 80017b2:	617b      	str	r3, [r7, #20]
    char c = word[0];
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	77fb      	strb	r3, [r7, #31]
    int char_i = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
    while(c != '\0'){
 80017be:	e018      	b.n	80017f2 <writeWord+0x4e>
        LCD_DisplayChar(start_x + (char_i * letter_distance), start_y, c);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	fb12 f303 	smulbb	r3, r2, r3
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	b291      	uxth	r1, r2
 80017da:	7ffa      	ldrb	r2, [r7, #31]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff15 	bl	800160c <LCD_DisplayChar>
        char_i++;
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
        c = word[char_i];
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	77fb      	strb	r3, [r7, #31]
    while(c != '\0'){
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e3      	bne.n	80017c0 <writeWord+0x1c>
    }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <writeWord_>:

void writeWord_(char* word, int start_x, int start_y, bool fontLarge){
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	70fb      	strb	r3, [r7, #3]
    int letter_distance = 12;
 8001812:	230c      	movs	r3, #12
 8001814:	61fb      	str	r3, [r7, #28]


    if(fontLarge) {
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <writeWord_+0x24>
        LCD_SetFont(&Font16x24);
 800181c:	4818      	ldr	r0, [pc, #96]	; (8001880 <writeWord_+0x7c>)
 800181e:	f7ff fe77 	bl	8001510 <LCD_SetFont>
        letter_distance = 12;
 8001822:	230c      	movs	r3, #12
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e004      	b.n	8001832 <writeWord_+0x2e>
    }
    else{
         LCD_SetFont(&Font12x12);
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <writeWord_+0x80>)
 800182a:	f7ff fe71 	bl	8001510 <LCD_SetFont>
         letter_distance = 8;
 800182e:	2308      	movs	r3, #8
 8001830:	61fb      	str	r3, [r7, #28]
    }


    char c = word[0];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	76fb      	strb	r3, [r7, #27]
    int char_i = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
    while(c != '\0'){
 800183c:	e018      	b.n	8001870 <writeWord_+0x6c>
        LCD_DisplayChar(start_x + (char_i * letter_distance), start_y, c);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	b29a      	uxth	r2, r3
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	b29b      	uxth	r3, r3
 8001846:	fb12 f303 	smulbb	r3, r2, r3
 800184a:	b29a      	uxth	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	b291      	uxth	r1, r2
 8001858:	7efa      	ldrb	r2, [r7, #27]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fed6 	bl	800160c <LCD_DisplayChar>
        char_i++;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
        c = word[char_i];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	76fb      	strb	r3, [r7, #27]
    while(c != '\0'){
 8001870:	7efb      	ldrb	r3, [r7, #27]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e3      	bne.n	800183e <writeWord_+0x3a>
    }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000004 	.word	0x20000004
 8001884:	2000000c 	.word	0x2000000c

08001888 <drawBox>:

struct Box_Boundaries drawBox(struct Point* top_left, int vert_size, int horz_size, int color){
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
    struct Box_Boundaries bounds;
    bounds.left_x = top_left->x;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
    bounds.top_y = top_left->y;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	61fb      	str	r3, [r7, #28]
    struct Point bottom_right;
    bottom_right.x = top_left->x + horz_size;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
    bottom_right.y = top_left->y + vert_size;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
    bounds.bottom_y = bottom_right.y;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    bounds.right_x = bottom_right.x;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	623b      	str	r3, [r7, #32]

    LCD_Draw_Vertical_Line(top_left->x, top_left->y, vert_size, color);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b298      	uxth	r0, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	b299      	uxth	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f7ff fdc3 	bl	800145c <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(bottom_right.x, top_left->y, vert_size, color);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	b298      	uxth	r0, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	b299      	uxth	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f7ff fdb8 	bl	800145c <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(top_left->x, top_left->y, horz_size, color);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	f000 f813 	bl	8001922 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(top_left->x, bottom_right.y, horz_size + 1, color);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	6979      	ldr	r1, [r7, #20]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001908:	f000 f80b 	bl	8001922 <LCD_Draw_Horizontal_Line>
    return bounds;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	461c      	mov	r4, r3
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	372c      	adds	r7, #44	; 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}

08001922 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(int x, int y, int len, int color){
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
    for(int i = 0; i < len; i++) LCD_Draw_Vertical_Line(x + i, y, 1, color);
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00f      	b.n	8001956 <LCD_Draw_Horizontal_Line+0x34>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b29a      	uxth	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b298      	uxth	r0, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	b299      	uxth	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	2201      	movs	r2, #1
 800194c:	f7ff fd86 	bl	800145c <LCD_Draw_Vertical_Line>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbeb      	blt.n	8001936 <LCD_Draw_Horizontal_Line+0x14>
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <Draw_Game>:

void Draw_Game(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    LCD_Draw_Horizontal_Line(0, 107, 240, LCD_COLOR_BLACK);
 800196c:	2300      	movs	r3, #0
 800196e:	22f0      	movs	r2, #240	; 0xf0
 8001970:	216b      	movs	r1, #107	; 0x6b
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff ffd5 	bl	8001922 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(0, 214, 240, LCD_COLOR_BLACK);
 8001978:	2300      	movs	r3, #0
 800197a:	22f0      	movs	r2, #240	; 0xf0
 800197c:	21d6      	movs	r1, #214	; 0xd6
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ffcf 	bl	8001922 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(80, 0, 320, LCD_COLOR_BLACK);
 8001984:	2300      	movs	r3, #0
 8001986:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800198a:	2100      	movs	r1, #0
 800198c:	2050      	movs	r0, #80	; 0x50
 800198e:	f7ff fd65 	bl	800145c <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(160, 0, 320, LCD_COLOR_BLACK);
 8001992:	2300      	movs	r3, #0
 8001994:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001998:	2100      	movs	r1, #0
 800199a:	20a0      	movs	r0, #160	; 0xa0
 800199c:	f7ff fd5e 	bl	800145c <LCD_Draw_Vertical_Line>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <Draw_Move>:

void Draw_Move(bool player, struct Box_Boundaries box){
 80019a4:	b084      	sub	sp, #16
 80019a6:	b590      	push	{r4, r7, lr}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4604      	mov	r4, r0
 80019ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80019b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80019b6:	4623      	mov	r3, r4
 80019b8:	71fb      	strb	r3, [r7, #7]
	LCD_SetFont(&Font16x24);
 80019ba:	481f      	ldr	r0, [pc, #124]	; (8001a38 <Draw_Move+0x94>)
 80019bc:	f7ff fda8 	bl	8001510 <LCD_SetFont>
	int x_pos = box.left_x - 8 + (box.right_x - box.left_x) / 2; //8 account for font size to center
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f1a3 0208 	sub.w	r2, r3, #8
 80019c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	0fd9      	lsrs	r1, r3, #31
 80019ce:	440b      	add	r3, r1
 80019d0:	105b      	asrs	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
	int y_pos = box.bottom_y + (box.top_y - box.bottom_y) / 2;
 80019d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	1acb      	subs	r3, r1, r3
 80019de:	0fd9      	lsrs	r1, r3, #31
 80019e0:	440b      	add	r3, r1
 80019e2:	105b      	asrs	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
	if (player == 0) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'X');
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f083 0301 	eor.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <Draw_Move+0x68>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	b298      	uxth	r0, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2258      	movs	r2, #88	; 0x58
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff fe01 	bl	800160c <LCD_DisplayChar>
	else if (player == 1) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'O');
}
 8001a0a:	e00d      	b.n	8001a28 <Draw_Move+0x84>
	else if (player == 1) LCD_DisplayChar(x_pos, TOUCH_SCREEN_HEIGHT - y_pos, 'O');
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00a      	beq.n	8001a28 <Draw_Move+0x84>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	b298      	uxth	r0, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	224f      	movs	r2, #79	; 0x4f
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff fdf2 	bl	800160c <LCD_DisplayChar>
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a32:	b004      	add	sp, #16
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000004 	.word	0x20000004

08001a3c <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RNG_IsActiveFlag_DRDY>:
  * @rmtoll SR           DRDY          LL_RNG_IsActiveFlag_DRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DRDY(const RNG_TypeDef *RNGx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <LL_RNG_IsActiveFlag_DRDY+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_RNG_IsActiveFlag_DRDY+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RNG_IsActiveFlag_CEIS>:
  * @rmtoll SR           CEIS          LL_RNG_IsActiveFlag_CEIS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_CEIS(const RNG_TypeDef *RNGx)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_CEIS) == (RNG_SR_CEIS)) ? 1UL : 0UL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d101      	bne.n	8001a9a <LL_RNG_IsActiveFlag_CEIS+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_RNG_IsActiveFlag_CEIS+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_RNG_IsActiveFlag_SEIS>:
  * @rmtoll SR           SEIS          LL_RNG_IsActiveFlag_SEIS
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(const RNG_TypeDef *RNGx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d101      	bne.n	8001ac0 <LL_RNG_IsActiveFlag_SEIS+0x18>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <LL_RNG_IsActiveFlag_SEIS+0x1a>
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RNG_EnableIT>:
  * @rmtoll CR           IE            LL_RNG_EnableIT
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_EnableIT(RNG_TypeDef *RNGx)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f043 0208 	orr.w	r2, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_RNG_ReadRandData32>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData32
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(const RNG_TypeDef *RNGx)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <RNG_Init>:
 *
 *  Created on: Apr 28, 2024
 *      Author: tyler
 */

void RNG_Init(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <RNG_Init+0x38>)
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <RNG_Init+0x38>)
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <RNG_Init+0x38>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
    LL_RNG_Enable(RNG);
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <RNG_Init+0x3c>)
 8001b2c:	f7ff ff86 	bl	8001a3c <LL_RNG_Enable>
    LL_RNG_EnableIT(RNG);
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <RNG_Init+0x3c>)
 8001b32:	f7ff ffcc 	bl	8001ace <LL_RNG_EnableIT>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	50060800 	.word	0x50060800

08001b48 <Get_Random_Number>:

uint32_t Get_Random_Number(){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
    bool RNG_error_enabled = LL_RNG_IsActiveFlag_CEIS(RNG) || LL_RNG_IsActiveFlag_SEIS(RNG);
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <Get_Random_Number+0x5c>)
 8001b50:	f7ff ff97 	bl	8001a82 <LL_RNG_IsActiveFlag_CEIS>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <Get_Random_Number+0x1e>
 8001b5a:	4812      	ldr	r0, [pc, #72]	; (8001ba4 <Get_Random_Number+0x5c>)
 8001b5c:	f7ff ffa4 	bl	8001aa8 <LL_RNG_IsActiveFlag_SEIS>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <Get_Random_Number+0x22>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <Get_Random_Number+0x24>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]

    if(!RNG_error_enabled && LL_RNG_IsActiveFlag_DRDY(RNG)){
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <Get_Random_Number+0x50>
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <Get_Random_Number+0x5c>)
 8001b84:	f7ff ff6a 	bl	8001a5c <LL_RNG_IsActiveFlag_DRDY>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <Get_Random_Number+0x50>
        return LL_RNG_ReadRandData32(RNG);
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <Get_Random_Number+0x5c>)
 8001b90:	f7ff ffad 	bl	8001aee <LL_RNG_ReadRandData32>
 8001b94:	4603      	mov	r3, r0
 8001b96:	e001      	b.n	8001b9c <Get_Random_Number+0x54>
    }

    return -1; //not ready for reading
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	50060800 	.word	0x50060800

08001ba8 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <getScheduledEvents+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	2002599c 	.word	0x2002599c

08001bc0 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event_number){
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    scheduledEvents |= event_number;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <addSchedulerEvent+0x20>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <addSchedulerEvent+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	2002599c 	.word	0x2002599c

08001be4 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event_number){
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    scheduledEvents &= ~event_number;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <removeSchedulerEvent+0x24>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <removeSchedulerEvent+0x24>)
 8001bf8:	6013      	str	r3, [r2, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2002599c 	.word	0x2002599c

08001c0c <TIMER_init>:
 *      Author: tyler
 */
#include "Timer_Driver.h"


void TIMER_init(Timer_Handle_t* timer_handle){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	uint32_t temp;

//	clock div
	temp = timer_handle->timer_configuration.clock_division << CLOCK_DIVISION_OFFSET;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x3 << CLOCK_DIVISION_OFFSET);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c2a:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

//	auto reload value
	temp = timer_handle->timer_configuration.auto_reload_value;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_ARR = 0; // clear reg
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
	timer_handle->gp_timer->TIMx_ARR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c

// master mode
	temp = timer_handle->timer_configuration.master_mode << MASTER_MODE_OFFSET;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR2 &= ~(0x3 << MASTER_MODE_OFFSET);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001c68:	605a      	str	r2, [r3, #4]
	timer_handle->gp_timer->TIMx_CR2 |= temp << MASTER_MODE_OFFSET;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	011a      	lsls	r2, r3, #4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

// prescaler
	temp = timer_handle->timer_configuration.prescaler;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8a1b      	ldrh	r3, [r3, #16]
 8001c80:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_PSC = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
	timer_handle->gp_timer->TIMx_PSC = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28

// center aligned mode
	temp = timer_handle->timer_configuration.center_aligned_mode << CENTER_ALIGNED_MODE_SELECTION_OFFSET;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x3 << CENTER_ALIGNED_MODE_SELECTION_OFFSET);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ca8:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

// auto reload buffer enable
	temp = timer_handle->timer_configuration.auto_reload_buffer_enable << AUTORELOAD_PRELOAD_ENABLE_OFFSET;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7e1b      	ldrb	r3, [r3, #24]
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << AUTORELOAD_PRELOAD_ENABLE_OFFSET);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd0:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

// timer count down mode enable
	temp = timer_handle->timer_configuration.timer_count_down_mode_enable << DIRECTION_MODE_OFFSET;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7e5b      	ldrb	r3, [r3, #25]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << DIRECTION_MODE_OFFSET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0210 	bic.w	r2, r2, #16
 8001cf8:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

// interrupt update mode
	temp = timer_handle->timer_configuration.interrupt_update_enable << UPDATE_INTERRUPT_ENABLE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7e9b      	ldrb	r3, [r3, #26]
 8001d0e:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_DIER &= ~(0x1 << UPDATE_INTERRUPT_ENABLE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]
	timer_handle->gp_timer->TIMx_DIER |= temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]

// Update Disable
	temp = timer_handle->timer_configuration.update_event_disable << UPDATE_DISABLE_OFFSET;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7edb      	ldrb	r3, [r3, #27]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << UPDATE_DISABLE_OFFSET);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0202 	bic.w	r2, r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

// One Pulse Mode
	temp = timer_handle->timer_configuration.one_pulse_mode_enable << ONE_PULSE_MODE_OFFSET;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7f1b      	ldrb	r3, [r3, #28]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	60fb      	str	r3, [r7, #12]
	timer_handle->gp_timer->TIMx_CR1 &= ~(0x1 << ONE_PULSE_MODE_OFFSET);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0208 	bic.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
	timer_handle->gp_timer->TIMx_CR1 |= temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <TIMER_clock_control>:

void TIMER_clock_control(GPTIMR_RegDef_t* gp_timer, uint8_t enable_or_disable){
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
	if (gp_timer == TIM5_){
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <TIMER_clock_control+0x58>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d11a      	bne.n	8001dd6 <TIMER_clock_control+0x4a>
		if (enable_or_disable == ENABLE) __HAL_RCC_TIM5_CLK_ENABLE();
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10e      	bne.n	8001dc4 <TIMER_clock_control+0x38>
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <TIMER_clock_control+0x5c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <TIMER_clock_control+0x5c>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <TIMER_clock_control+0x5c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
		else if (enable_or_disable == DISABLE) __HAL_RCC_TIM5_CLK_DISABLE();
	}
}
 8001dc2:	e008      	b.n	8001dd6 <TIMER_clock_control+0x4a>
		else if (enable_or_disable == DISABLE) __HAL_RCC_TIM5_CLK_DISABLE();
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <TIMER_clock_control+0x4a>
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <TIMER_clock_control+0x5c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <TIMER_clock_control+0x5c>)
 8001dd0:	f023 0308 	bic.w	r3, r3, #8
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40023800 	.word	0x40023800

08001dec <TIMER_start>:

void TIMER_start(GPTIMR_RegDef_t* gp_timer){
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	temp = ENABLE << ENABLE_TIMER_OFFSET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
	gp_timer->TIMx_CR1 &= ~(0x1 << ENABLE_TIMER_OFFSET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0201 	bic.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	601a      	str	r2, [r3, #0]
	gp_timer->TIMx_CR1 |= temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <TIMER_stop>:

void TIMER_stop(GPTIMR_RegDef_t* gp_timer){
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	
	temp = DISABLE << ENABLE_TIMER_OFFSET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
	gp_timer->TIMx_CR1 &= ~(0x1 << ENABLE_TIMER_OFFSET);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 0201 	bic.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
	gp_timer->TIMx_CR1 |= temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <TIMER_reset>:

void TIMER_reset(GPTIMR_RegDef_t* gp_timer){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	gp_timer->TIMx_CNT = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <TIMER_get_timer_value>:

uint32_t TIMER_get_timer_value(GPTIMR_RegDef_t* gp_timer){
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
	return gp_timer->TIMx_CNT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <TIMER_interrupt_control>:

void TIMER_interrupt_control(GPTIMR_RegDef_t* gp_timer, uint8_t enable_or_disable){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
	if (gp_timer == TIM5_){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <TIMER_interrupt_control+0x38>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d10c      	bne.n	8001eae <TIMER_interrupt_control+0x2e>
		if (enable_or_disable == ENABLE) HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d103      	bne.n	8001ea2 <TIMER_interrupt_control+0x22>
 8001e9a:	2032      	movs	r0, #50	; 0x32
 8001e9c:	f001 fb85 	bl	80035aa <HAL_NVIC_EnableIRQ>
		else if(enable_or_disable == DISABLE) HAL_NVIC_DisableIRQ(TIM5_IRQn);
	}
}
 8001ea0:	e005      	b.n	8001eae <TIMER_interrupt_control+0x2e>
		else if(enable_or_disable == DISABLE) HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <TIMER_interrupt_control+0x2e>
 8001ea8:	2032      	movs	r0, #50	; 0x32
 8001eaa:	f001 fb8c 	bl	80035c6 <HAL_NVIC_DisableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40000c00 	.word	0x40000c00

08001ebc <LED_TIMER5_init>:


// TIMER 5
void LED_TIMER5_init(){
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b090      	sub	sp, #64	; 0x40
 8001ec0:	af00      	add	r7, sp, #0
    Timer_Handle_t TIM5_handle;
    TIM5_handle.gp_timer = TIM5_;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <LED_TIMER5_init+0x64>)
 8001ec4:	623b      	str	r3, [r7, #32]
    GPTimer_Config_t TIM5_config;

    TIM5_config.auto_reload_value = MAX_32INT;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	607b      	str	r3, [r7, #4]
    TIM5_config.master_mode = RESET; // ???
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
    TIM5_config.clock_division = DIVIDE_BY_ONE; // ???
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
    TIM5_config.prescaler = 0; // ???
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	823b      	strh	r3, [r7, #16]
    TIM5_config.center_aligned_mode = EDGE_ALIGNED_MODE; // default
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
    // TIM2_config.auto_reload_buffer_enable default
    TIM5_config.timer_count_down_mode_enable = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	767b      	strb	r3, [r7, #25]
    TIM5_config.interrupt_update_enable = ENABLE; // update request source ???
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	76bb      	strb	r3, [r7, #26]
    TIM5_config.update_event_disable = DISABLE; // update disable
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	76fb      	strb	r3, [r7, #27]
    TIM5_config.one_pulse_mode_enable = DISABLE; //counter stops counting at next update event
 8001ee8:	2300      	movs	r3, #0
 8001eea:	773b      	strb	r3, [r7, #28]

    TIM5_handle.timer_configuration = TIM5_config;
 8001eec:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001ef0:	1d3d      	adds	r5, r7, #4
 8001ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TIMER_clock_control(TIM5_, ENABLE);
 8001efe:	2101      	movs	r1, #1
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <LED_TIMER5_init+0x64>)
 8001f02:	f7ff ff43 	bl	8001d8c <TIMER_clock_control>
    TIMER_init(&TIM5_handle);
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fe7e 	bl	8001c0c <TIMER_init>
    TIMER_interrupt_control(TIM5_, ENABLE);
 8001f10:	2101      	movs	r1, #1
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <LED_TIMER5_init+0x64>)
 8001f14:	f7ff ffb4 	bl	8001e80 <TIMER_interrupt_control>
}
 8001f18:	bf00      	nop
 8001f1a:	3740      	adds	r7, #64	; 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	40000c00 	.word	0x40000c00

08001f24 <IRQ_TIMx_clear_pending>:

void LED_TIMER5_specific_start(uint32_t new_start_val){
    TIM5_->TIMx_CNT = new_start_val;
}

void IRQ_TIMx_clear_pending(uint8_t pinNumber, GPTIMR_RegDef_t* gp_timer){
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
    gp_timer->TIMx_SR &= ~(0x1 << pinNumber);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	43d2      	mvns	r2, r2
 8001f3e:	401a      	ands	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	611a      	str	r2, [r3, #16]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <TIMER_convert_to_seconds>:

uint32_t TIMER_convert_to_seconds(uint32_t timer_val){
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	return (timer_val + 1)/(CLOCK_FREQ * CLOCK_DIV);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <TIMER_convert_to_seconds+0x20>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0e1b      	lsrs	r3, r3, #24
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f78:	f000 f9fe 	bl	8002378 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f7c:	20ca      	movs	r0, #202	; 0xca
 8001f7e:	f000 f943 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f82:	20c3      	movs	r0, #195	; 0xc3
 8001f84:	f000 f94d 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f88:	2008      	movs	r0, #8
 8001f8a:	f000 f94a 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f8e:	2050      	movs	r0, #80	; 0x50
 8001f90:	f000 f947 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f94:	20cf      	movs	r0, #207	; 0xcf
 8001f96:	f000 f937 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f941 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001fa0:	20c1      	movs	r0, #193	; 0xc1
 8001fa2:	f000 f93e 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001fa6:	2030      	movs	r0, #48	; 0x30
 8001fa8:	f000 f93b 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001fac:	20ed      	movs	r0, #237	; 0xed
 8001fae:	f000 f92b 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	f000 f935 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f932 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001fbe:	2012      	movs	r0, #18
 8001fc0:	f000 f92f 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001fc4:	2081      	movs	r0, #129	; 0x81
 8001fc6:	f000 f92c 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001fca:	20e8      	movs	r0, #232	; 0xe8
 8001fcc:	f000 f91c 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001fd0:	2085      	movs	r0, #133	; 0x85
 8001fd2:	f000 f926 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f923 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fdc:	2078      	movs	r0, #120	; 0x78
 8001fde:	f000 f920 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001fe2:	20cb      	movs	r0, #203	; 0xcb
 8001fe4:	f000 f910 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001fe8:	2039      	movs	r0, #57	; 0x39
 8001fea:	f000 f91a 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001fee:	202c      	movs	r0, #44	; 0x2c
 8001ff0:	f000 f917 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f000 f914 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001ffa:	2034      	movs	r0, #52	; 0x34
 8001ffc:	f000 f911 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002000:	2002      	movs	r0, #2
 8002002:	f000 f90e 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002006:	20f7      	movs	r0, #247	; 0xf7
 8002008:	f000 f8fe 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800200c:	2020      	movs	r0, #32
 800200e:	f000 f908 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002012:	20ea      	movs	r0, #234	; 0xea
 8002014:	f000 f8f8 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002018:	2000      	movs	r0, #0
 800201a:	f000 f902 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f8ff 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002024:	20b1      	movs	r0, #177	; 0xb1
 8002026:	f000 f8ef 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f8f9 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002030:	201b      	movs	r0, #27
 8002032:	f000 f8f6 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002036:	20b6      	movs	r0, #182	; 0xb6
 8002038:	f000 f8e6 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 f8f0 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002042:	20a2      	movs	r0, #162	; 0xa2
 8002044:	f000 f8ed 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002048:	20c0      	movs	r0, #192	; 0xc0
 800204a:	f000 f8dd 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800204e:	2010      	movs	r0, #16
 8002050:	f000 f8e7 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002054:	20c1      	movs	r0, #193	; 0xc1
 8002056:	f000 f8d7 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800205a:	2010      	movs	r0, #16
 800205c:	f000 f8e1 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002060:	20c5      	movs	r0, #197	; 0xc5
 8002062:	f000 f8d1 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002066:	2045      	movs	r0, #69	; 0x45
 8002068:	f000 f8db 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800206c:	2015      	movs	r0, #21
 800206e:	f000 f8d8 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002072:	20c7      	movs	r0, #199	; 0xc7
 8002074:	f000 f8c8 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002078:	2090      	movs	r0, #144	; 0x90
 800207a:	f000 f8d2 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800207e:	2036      	movs	r0, #54	; 0x36
 8002080:	f000 f8c2 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002084:	20c8      	movs	r0, #200	; 0xc8
 8002086:	f000 f8cc 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800208a:	20f2      	movs	r0, #242	; 0xf2
 800208c:	f000 f8bc 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002090:	2000      	movs	r0, #0
 8002092:	f000 f8c6 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002096:	20b0      	movs	r0, #176	; 0xb0
 8002098:	f000 f8b6 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800209c:	20c2      	movs	r0, #194	; 0xc2
 800209e:	f000 f8c0 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80020a2:	20b6      	movs	r0, #182	; 0xb6
 80020a4:	f000 f8b0 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f000 f8ba 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80020ae:	20a7      	movs	r0, #167	; 0xa7
 80020b0:	f000 f8b7 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80020b4:	2027      	movs	r0, #39	; 0x27
 80020b6:	f000 f8b4 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80020ba:	2004      	movs	r0, #4
 80020bc:	f000 f8b1 	bl	8002222 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80020c0:	202a      	movs	r0, #42	; 0x2a
 80020c2:	f000 f8a1 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f8ab 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 f8a8 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f000 f8a5 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80020d8:	20ef      	movs	r0, #239	; 0xef
 80020da:	f000 f8a2 	bl	8002222 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80020de:	202b      	movs	r0, #43	; 0x2b
 80020e0:	f000 f892 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f000 f89c 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f899 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f000 f896 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80020f6:	203f      	movs	r0, #63	; 0x3f
 80020f8:	f000 f893 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80020fc:	20f6      	movs	r0, #246	; 0xf6
 80020fe:	f000 f883 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f88d 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f000 f88a 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800210e:	2006      	movs	r0, #6
 8002110:	f000 f887 	bl	8002222 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002114:	202c      	movs	r0, #44	; 0x2c
 8002116:	f000 f877 	bl	8002208 <ili9341_Write_Reg>
  LCD_Delay(200);
 800211a:	20c8      	movs	r0, #200	; 0xc8
 800211c:	f000 f9e8 	bl	80024f0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002120:	2026      	movs	r0, #38	; 0x26
 8002122:	f000 f871 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002126:	2001      	movs	r0, #1
 8002128:	f000 f87b 	bl	8002222 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800212c:	20e0      	movs	r0, #224	; 0xe0
 800212e:	f000 f86b 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f875 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002138:	2029      	movs	r0, #41	; 0x29
 800213a:	f000 f872 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800213e:	2024      	movs	r0, #36	; 0x24
 8002140:	f000 f86f 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002144:	200c      	movs	r0, #12
 8002146:	f000 f86c 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800214a:	200e      	movs	r0, #14
 800214c:	f000 f869 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002150:	2009      	movs	r0, #9
 8002152:	f000 f866 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002156:	204e      	movs	r0, #78	; 0x4e
 8002158:	f000 f863 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 f860 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002162:	203c      	movs	r0, #60	; 0x3c
 8002164:	f000 f85d 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002168:	2009      	movs	r0, #9
 800216a:	f000 f85a 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800216e:	2013      	movs	r0, #19
 8002170:	f000 f857 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002174:	2005      	movs	r0, #5
 8002176:	f000 f854 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800217a:	2017      	movs	r0, #23
 800217c:	f000 f851 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002180:	2011      	movs	r0, #17
 8002182:	f000 f84e 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f84b 	bl	8002222 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800218c:	20e1      	movs	r0, #225	; 0xe1
 800218e:	f000 f83b 	bl	8002208 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f845 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002198:	2016      	movs	r0, #22
 800219a:	f000 f842 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800219e:	201b      	movs	r0, #27
 80021a0:	f000 f83f 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80021a4:	2004      	movs	r0, #4
 80021a6:	f000 f83c 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80021aa:	2011      	movs	r0, #17
 80021ac:	f000 f839 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80021b0:	2007      	movs	r0, #7
 80021b2:	f000 f836 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80021b6:	2031      	movs	r0, #49	; 0x31
 80021b8:	f000 f833 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80021bc:	2033      	movs	r0, #51	; 0x33
 80021be:	f000 f830 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80021c2:	2042      	movs	r0, #66	; 0x42
 80021c4:	f000 f82d 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80021c8:	2005      	movs	r0, #5
 80021ca:	f000 f82a 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80021ce:	200c      	movs	r0, #12
 80021d0:	f000 f827 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80021d4:	200a      	movs	r0, #10
 80021d6:	f000 f824 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80021da:	2028      	movs	r0, #40	; 0x28
 80021dc:	f000 f821 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80021e0:	202f      	movs	r0, #47	; 0x2f
 80021e2:	f000 f81e 	bl	8002222 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f81b 	bl	8002222 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80021ec:	2011      	movs	r0, #17
 80021ee:	f000 f80b 	bl	8002208 <ili9341_Write_Reg>
  LCD_Delay(200);
 80021f2:	20c8      	movs	r0, #200	; 0xc8
 80021f4:	f000 f97c 	bl	80024f0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80021f8:	2029      	movs	r0, #41	; 0x29
 80021fa:	f000 f805 	bl	8002208 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	f000 f802 	bl	8002208 <ili9341_Write_Reg>
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f949 	bl	80024ac <LCD_IO_WriteReg>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f91a 	bl	8002468 <LCD_IO_WriteData>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002240:	4819      	ldr	r0, [pc, #100]	; (80022a8 <SPI_Init+0x6c>)
 8002242:	f003 ffd5 	bl	80061f0 <HAL_SPI_GetState>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d12b      	bne.n	80022a4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <SPI_Init+0x6c>)
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <SPI_Init+0x70>)
 8002250:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <SPI_Init+0x6c>)
 8002254:	2218      	movs	r2, #24
 8002256:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <SPI_Init+0x6c>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <SPI_Init+0x6c>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <SPI_Init+0x6c>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <SPI_Init+0x6c>)
 800226c:	2200      	movs	r2, #0
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <SPI_Init+0x6c>)
 8002272:	2207      	movs	r2, #7
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <SPI_Init+0x6c>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <SPI_Init+0x6c>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <SPI_Init+0x6c>)
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <SPI_Init+0x6c>)
 800228c:	2200      	movs	r2, #0
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SPI_Init+0x6c>)
 8002292:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002296:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <SPI_Init+0x6c>)
 800229a:	f000 f833 	bl	8002304 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800229e:	4802      	ldr	r0, [pc, #8]	; (80022a8 <SPI_Init+0x6c>)
 80022a0:	f003 fdb2 	bl	8005e08 <HAL_SPI_Init>
  }
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200259a0 	.word	0x200259a0
 80022ac:	40015000 	.word	0x40015000

080022b0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <SPI_Write+0x34>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1db9      	adds	r1, r7, #6
 80022c4:	2201      	movs	r2, #1
 80022c6:	4808      	ldr	r0, [pc, #32]	; (80022e8 <SPI_Write+0x38>)
 80022c8:	f003 fe4f 	bl	8005f6a <HAL_SPI_Transmit>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80022d6:	f000 f809 	bl	80022ec <SPI_Error>
  }
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014
 80022e8:	200259a0 	.word	0x200259a0

080022ec <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <SPI_Error+0x14>)
 80022f2:	f003 fe12 	bl	8005f1a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80022f6:	f7ff ffa1 	bl	800223c <SPI_Init>
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200259a0 	.word	0x200259a0

08002304 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <SPI_MspInit+0x6c>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <SPI_MspInit+0x6c>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	6453      	str	r3, [r2, #68]	; 0x44
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <SPI_MspInit+0x6c>)
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <SPI_MspInit+0x6c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <SPI_MspInit+0x6c>)
 8002332:	f043 0320 	orr.w	r3, r3, #32
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <SPI_MspInit+0x6c>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002344:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800234e:	2302      	movs	r3, #2
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002352:	2301      	movs	r3, #1
 8002354:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002356:	2305      	movs	r3, #5
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <SPI_MspInit+0x70>)
 8002362:	f001 f971 	bl	8003648 <HAL_GPIO_Init>
}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40021400 	.word	0x40021400

08002378 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <LCD_IO_Init+0xe0>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d164      	bne.n	8002450 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <LCD_IO_Init+0xe0>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <LCD_IO_Init+0xe4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a31      	ldr	r2, [pc, #196]	; (800245c <LCD_IO_Init+0xe4>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <LCD_IO_Init+0xe4>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80023a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4827      	ldr	r0, [pc, #156]	; (8002460 <LCD_IO_Init+0xe8>)
 80023c2:	f001 f941 	bl	8003648 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <LCD_IO_Init+0xe4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a23      	ldr	r2, [pc, #140]	; (800245c <LCD_IO_Init+0xe4>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <LCD_IO_Init+0xe4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	4619      	mov	r1, r3
 80023fa:	4819      	ldr	r0, [pc, #100]	; (8002460 <LCD_IO_Init+0xe8>)
 80023fc:	f001 f924 	bl	8003648 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <LCD_IO_Init+0xe4>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <LCD_IO_Init+0xe4>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <LCD_IO_Init+0xe4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800241c:	2304      	movs	r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002428:	2302      	movs	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4619      	mov	r1, r3
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <LCD_IO_Init+0xec>)
 8002434:	f001 f908 	bl	8003648 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002438:	2200      	movs	r2, #0
 800243a:	2104      	movs	r1, #4
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <LCD_IO_Init+0xec>)
 800243e:	f001 fbbb 	bl	8003bb8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002442:	2201      	movs	r2, #1
 8002444:	2104      	movs	r1, #4
 8002446:	4807      	ldr	r0, [pc, #28]	; (8002464 <LCD_IO_Init+0xec>)
 8002448:	f001 fbb6 	bl	8003bb8 <HAL_GPIO_WritePin>

    SPI_Init();
 800244c:	f7ff fef6 	bl	800223c <SPI_Init>
  }
}
 8002450:	bf00      	nop
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200259f8 	.word	0x200259f8
 800245c:	40023800 	.word	0x40023800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40020800 	.word	0x40020800

08002468 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002478:	480a      	ldr	r0, [pc, #40]	; (80024a4 <LCD_IO_WriteData+0x3c>)
 800247a:	f001 fb9d 	bl	8003bb8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800247e:	2200      	movs	r2, #0
 8002480:	2104      	movs	r1, #4
 8002482:	4809      	ldr	r0, [pc, #36]	; (80024a8 <LCD_IO_WriteData+0x40>)
 8002484:	f001 fb98 	bl	8003bb8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff10 	bl	80022b0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002490:	2201      	movs	r2, #1
 8002492:	2104      	movs	r1, #4
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <LCD_IO_WriteData+0x40>)
 8002496:	f001 fb8f 	bl	8003bb8 <HAL_GPIO_WritePin>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40020800 	.word	0x40020800

080024ac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024bc:	480a      	ldr	r0, [pc, #40]	; (80024e8 <LCD_IO_WriteReg+0x3c>)
 80024be:	f001 fb7b 	bl	8003bb8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80024c2:	2200      	movs	r2, #0
 80024c4:	2104      	movs	r1, #4
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <LCD_IO_WriteReg+0x40>)
 80024c8:	f001 fb76 	bl	8003bb8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff feed 	bl	80022b0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80024d6:	2201      	movs	r2, #1
 80024d8:	2104      	movs	r1, #4
 80024da:	4804      	ldr	r0, [pc, #16]	; (80024ec <LCD_IO_WriteReg+0x40>)
 80024dc:	f001 fb6c 	bl	8003bb8 <HAL_GPIO_WritePin>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40020800 	.word	0x40020800

080024f0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fef9 	bl	80032f0 <HAL_Delay>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0

  initialise_monitor_handles();
 800250a:	f004 f981 	bl	8006810 <initialise_monitor_handles>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800250e:	f000 fe7d 	bl	800320c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8002512:	f000 f80b 	bl	800252c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8002516:	f7fe f841 	bl	800059c <ApplicationInit>

//  LCD_Visual_Demo();
  HAL_Delay(1000);
 800251a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800251e:	f000 fee7 	bl	80032f0 <HAL_Delay>
  drawMenu();
 8002522:	f7ff f8b1 	bl	8001688 <drawMenu>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  LCD_Touch_Polling_Demo(); // This function Will not return
 8002526:	f7fe f85d 	bl	80005e4 <LCD_Touch_Polling_Demo>


  while (1)
 800252a:	e7fe      	b.n	800252a <main+0x24>

0800252c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b092      	sub	sp, #72	; 0x48
 8002530:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <SystemClockOverride+0x7c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <SystemClockOverride+0x7c>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <SystemClockOverride+0x7c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800254e:	2301      	movs	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002556:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002558:	2302      	movs	r3, #2
 800255a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800255c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002562:	2308      	movs	r3, #8
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002566:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800256c:	2302      	movs	r3, #2
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002570:	2307      	movs	r3, #7
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fe02 	bl	8005180 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800257c:	230f      	movs	r3, #15
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002580:	2302      	movs	r3, #2
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002598:	2105      	movs	r1, #5
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f868 	bl	8005670 <HAL_RCC_ClockConfig>
}
 80025a0:	bf00      	nop
 80025a2:	3748      	adds	r7, #72	; 0x48
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <Error_Handler+0x8>
	...

080025b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_MspInit+0x4c>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_MspInit+0x4c>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025f6:	2007      	movs	r0, #7
 80025f8:	f000 ffb0 	bl	800355c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_I2C_MspInit+0xc4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d14b      	bne.n	80026c2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002674:	2304      	movs	r3, #4
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4815      	ldr	r0, [pc, #84]	; (80026d4 <HAL_I2C_MspInit+0xcc>)
 8002680:	f000 ffe2 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002696:	2304      	movs	r3, #4
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <HAL_I2C_MspInit+0xd0>)
 80026a2:	f000 ffd1 	bl	8003648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 80026b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_I2C_MspInit+0xc8>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005c00 	.word	0x40005c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020000 	.word	0x40020000

080026dc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09a      	sub	sp, #104	; 0x68
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	2230      	movs	r2, #48	; 0x30
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fb2b 	bl	8006d58 <memset>
  if(hltdc->Instance==LTDC)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a81      	ldr	r2, [pc, #516]	; (800290c <HAL_LTDC_MspInit+0x230>)
 8002708:	4293      	cmp	r3, r2
 800270a:	f040 80fa 	bne.w	8002902 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800270e:	2308      	movs	r3, #8
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002712:	2332      	movs	r3, #50	; 0x32
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002716:	2302      	movs	r3, #2
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800271a:	2300      	movs	r3, #0
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f9b0 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800272e:	f7ff ff3d 	bl	80025ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a75      	ldr	r2, [pc, #468]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 800273c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002758:	f043 0320 	orr.w	r3, r3, #32
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a67      	ldr	r2, [pc, #412]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a60      	ldr	r2, [pc, #384]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a59      	ldr	r2, [pc, #356]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_LTDC_MspInit+0x234>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80027f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002808:	230e      	movs	r3, #14
 800280a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002810:	4619      	mov	r1, r3
 8002812:	4840      	ldr	r0, [pc, #256]	; (8002914 <HAL_LTDC_MspInit+0x238>)
 8002814:	f000 ff18 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002818:	f641 0358 	movw	r3, #6232	; 0x1858
 800281c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800282a:	230e      	movs	r3, #14
 800282c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002832:	4619      	mov	r1, r3
 8002834:	4838      	ldr	r0, [pc, #224]	; (8002918 <HAL_LTDC_MspInit+0x23c>)
 8002836:	f000 ff07 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800283a:	2303      	movs	r3, #3
 800283c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800284a:	2309      	movs	r3, #9
 800284c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002852:	4619      	mov	r1, r3
 8002854:	4831      	ldr	r0, [pc, #196]	; (800291c <HAL_LTDC_MspInit+0x240>)
 8002856:	f000 fef7 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800285a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800285e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800286c:	230e      	movs	r3, #14
 800286e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002874:	4619      	mov	r1, r3
 8002876:	4829      	ldr	r0, [pc, #164]	; (800291c <HAL_LTDC_MspInit+0x240>)
 8002878:	f000 fee6 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800287c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800288e:	230e      	movs	r3, #14
 8002890:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002896:	4619      	mov	r1, r3
 8002898:	4821      	ldr	r0, [pc, #132]	; (8002920 <HAL_LTDC_MspInit+0x244>)
 800289a:	f000 fed5 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800289e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80028a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028b0:	230e      	movs	r3, #14
 80028b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b8:	4619      	mov	r1, r3
 80028ba:	481a      	ldr	r0, [pc, #104]	; (8002924 <HAL_LTDC_MspInit+0x248>)
 80028bc:	f000 fec4 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80028c0:	2348      	movs	r3, #72	; 0x48
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028d0:	230e      	movs	r3, #14
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d8:	4619      	mov	r1, r3
 80028da:	4813      	ldr	r0, [pc, #76]	; (8002928 <HAL_LTDC_MspInit+0x24c>)
 80028dc:	f000 feb4 	bl	8003648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80028e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028f2:	2309      	movs	r3, #9
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028fa:	4619      	mov	r1, r3
 80028fc:	4808      	ldr	r0, [pc, #32]	; (8002920 <HAL_LTDC_MspInit+0x244>)
 80028fe:	f000 fea3 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002902:	bf00      	nop
 8002904:	3768      	adds	r7, #104	; 0x68
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40016800 	.word	0x40016800
 8002910:	40023800 	.word	0x40023800
 8002914:	40021400 	.word	0x40021400
 8002918:	40020000 	.word	0x40020000
 800291c:	40020400 	.word	0x40020400
 8002920:	40021800 	.word	0x40021800
 8002924:	40020800 	.word	0x40020800
 8002928:	40020c00 	.word	0x40020c00

0800292c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <HAL_SPI_MspInit+0x84>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12c      	bne.n	80029a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002986:	f44f 7360 	mov.w	r3, #896	; 0x380
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002998:	2305      	movs	r3, #5
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_SPI_MspInit+0x8c>)
 80029a4:	f000 fe50 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40015000 	.word	0x40015000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40021400 	.word	0x40021400

080029bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_SPI_MspDeInit+0x30>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_SPI_MspDeInit+0x34>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_SPI_MspDeInit+0x34>)
 80029d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80029da:	f44f 7160 	mov.w	r1, #896	; 0x380
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_SPI_MspDeInit+0x38>)
 80029e0:	f000 ffde 	bl	80039a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40015000 	.word	0x40015000
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40021400 	.word	0x40021400

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029fc:	e7fe      	b.n	80029fc <NMI_Handler+0x4>

080029fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f000 fc34 	bl	80032b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002a52:	f000 f9c9 	bl	8002de8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002a56:	f000 f98b 	bl	8002d70 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	2082      	movs	r0, #130	; 0x82
 8002a60:	f000 fa16 	bl	8002e90 <I2C3_Write>
    HAL_Delay(5);
 8002a64:	2005      	movs	r0, #5
 8002a66:	f000 fc43 	bl	80032f0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	2082      	movs	r0, #130	; 0x82
 8002a70:	f000 fa0e 	bl	8002e90 <I2C3_Write>
    HAL_Delay(2);
 8002a74:	2002      	movs	r0, #2
 8002a76:	f000 fc3b 	bl	80032f0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002a7a:	1cba      	adds	r2, r7, #2
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2082      	movs	r0, #130	; 0x82
 8002a82:	f000 fa55 	bl	8002f30 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f640 0211 	movw	r2, #2065	; 0x811
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d001      	beq.n	8002aa6 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e075      	b.n	8002b92 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	2082      	movs	r0, #130	; 0x82
 8002aac:	f000 f9f0 	bl	8002e90 <I2C3_Write>
    HAL_Delay(5);
 8002ab0:	2005      	movs	r0, #5
 8002ab2:	f000 fc1d 	bl	80032f0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2103      	movs	r1, #3
 8002aba:	2082      	movs	r0, #130	; 0x82
 8002abc:	f000 f9e8 	bl	8002e90 <I2C3_Write>
    HAL_Delay(2);
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f000 fc15 	bl	80032f0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002ac6:	2004      	movs	r0, #4
 8002ac8:	f000 f867 	bl	8002b9a <STMPE811_Read>
 8002acc:	4603      	mov	r3, r0
 8002ace:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002ad0:	797b      	ldrb	r3, [r7, #5]
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ad8:	797b      	ldrb	r3, [r7, #5]
 8002ada:	461a      	mov	r2, r3
 8002adc:	2104      	movs	r1, #4
 8002ade:	2082      	movs	r0, #130	; 0x82
 8002ae0:	f000 f9d6 	bl	8002e90 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002ae4:	2004      	movs	r0, #4
 8002ae6:	f000 f858 	bl	8002b9a <STMPE811_Read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	461a      	mov	r2, r3
 8002afa:	2104      	movs	r1, #4
 8002afc:	2082      	movs	r0, #130	; 0x82
 8002afe:	f000 f9c7 	bl	8002e90 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002b02:	2249      	movs	r2, #73	; 0x49
 8002b04:	2120      	movs	r1, #32
 8002b06:	2082      	movs	r0, #130	; 0x82
 8002b08:	f000 f9c2 	bl	8002e90 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f000 fbef 	bl	80032f0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002b12:	2201      	movs	r2, #1
 8002b14:	2121      	movs	r1, #33	; 0x21
 8002b16:	2082      	movs	r0, #130	; 0x82
 8002b18:	f000 f9ba 	bl	8002e90 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002b1c:	2017      	movs	r0, #23
 8002b1e:	f000 f83c 	bl	8002b9a <STMPE811_Read>
 8002b22:	4603      	mov	r3, r0
 8002b24:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002b26:	797b      	ldrb	r3, [r7, #5]
 8002b28:	f043 031e 	orr.w	r3, r3, #30
 8002b2c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002b2e:	797b      	ldrb	r3, [r7, #5]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2117      	movs	r1, #23
 8002b34:	2082      	movs	r0, #130	; 0x82
 8002b36:	f000 f9ab 	bl	8002e90 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002b3a:	229a      	movs	r2, #154	; 0x9a
 8002b3c:	2141      	movs	r1, #65	; 0x41
 8002b3e:	2082      	movs	r0, #130	; 0x82
 8002b40:	f000 f9a6 	bl	8002e90 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002b44:	2201      	movs	r2, #1
 8002b46:	214a      	movs	r1, #74	; 0x4a
 8002b48:	2082      	movs	r0, #130	; 0x82
 8002b4a:	f000 f9a1 	bl	8002e90 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	214b      	movs	r1, #75	; 0x4b
 8002b52:	2082      	movs	r0, #130	; 0x82
 8002b54:	f000 f99c 	bl	8002e90 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	214b      	movs	r1, #75	; 0x4b
 8002b5c:	2082      	movs	r0, #130	; 0x82
 8002b5e:	f000 f997 	bl	8002e90 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2156      	movs	r1, #86	; 0x56
 8002b66:	2082      	movs	r0, #130	; 0x82
 8002b68:	f000 f992 	bl	8002e90 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2158      	movs	r1, #88	; 0x58
 8002b70:	2082      	movs	r0, #130	; 0x82
 8002b72:	f000 f98d 	bl	8002e90 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002b76:	2203      	movs	r2, #3
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	2082      	movs	r0, #130	; 0x82
 8002b7c:	f000 f988 	bl	8002e90 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	210b      	movs	r1, #11
 8002b84:	2082      	movs	r0, #130	; 0x82
 8002b86:	f000 f983 	bl	8002e90 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b8a:	20c8      	movs	r0, #200	; 0xc8
 8002b8c:	f000 fbb0 	bl	80032f0 <HAL_Delay>

    return STMPE811_State_Ok;
 8002b90:	2302      	movs	r3, #2

}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002ba4:	f107 020f 	add.w	r2, r7, #15
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4619      	mov	r1, r3
 8002bac:	2082      	movs	r0, #130	; 0x82
 8002bae:	f000 f999 	bl	8002ee4 <I2C3_Read>

    return readData;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	791a      	ldrb	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002bcc:	2040      	movs	r0, #64	; 0x40
 8002bce:	f7ff ffe4 	bl	8002b9a <STMPE811_Read>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0e      	blt.n	8002bfc <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002be4:	2201      	movs	r2, #1
 8002be6:	214b      	movs	r1, #75	; 0x4b
 8002be8:	2082      	movs	r0, #130	; 0x82
 8002bea:	f000 f951 	bl	8002e90 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	214b      	movs	r1, #75	; 0x4b
 8002bf2:	2082      	movs	r0, #130	; 0x82
 8002bf4:	f000 f94c 	bl	8002e90 <I2C3_Write>

        return STMPE811_State_Released;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0a7      	b.n	8002d4c <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	799b      	ldrb	r3, [r3, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d117      	bne.n	8002c34 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f9b3 	bl	8002f74 <TM_STMPE811_ReadX>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	885b      	ldrh	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa06 	bl	8003030 <TM_STMPE811_ReadY>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	805a      	strh	r2, [r3, #2]
 8002c32:	e048      	b.n	8002cc6 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	799b      	ldrb	r3, [r3, #6]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d112      	bne.n	8002c62 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f997 	bl	8002f74 <TM_STMPE811_ReadX>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	885b      	ldrh	r3, [r3, #2]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f9ec 	bl	8003030 <TM_STMPE811_ReadY>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	805a      	strh	r2, [r3, #2]
 8002c60:	e031      	b.n	8002cc6 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	799b      	ldrb	r3, [r3, #6]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d115      	bne.n	8002c96 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	885b      	ldrh	r3, [r3, #2]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f980 	bl	8002f74 <TM_STMPE811_ReadX>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f9d5 	bl	8003030 <TM_STMPE811_ReadY>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	e017      	b.n	8002cc6 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d113      	bne.n	8002cc6 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f966 	bl	8002f74 <TM_STMPE811_ReadX>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f9b9 	bl	8003030 <TM_STMPE811_ReadY>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	214b      	movs	r1, #75	; 0x4b
 8002cca:	2082      	movs	r0, #130	; 0x82
 8002ccc:	f000 f8e0 	bl	8002e90 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	214b      	movs	r1, #75	; 0x4b
 8002cd4:	2082      	movs	r0, #130	; 0x82
 8002cd6:	f000 f8db 	bl	8002e90 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	799b      	ldrb	r3, [r3, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <STMPE811_ReadTouch+0x12e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d115      	bne.n	8002d16 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d027      	beq.n	8002d42 <STMPE811_ReadTouch+0x186>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	2bee      	cmp	r3, #238	; 0xee
 8002cf8:	d823      	bhi.n	8002d42 <STMPE811_ReadTouch+0x186>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	885b      	ldrh	r3, [r3, #2]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <STMPE811_ReadTouch+0x186>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	885b      	ldrh	r3, [r3, #2]
 8002d06:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002d0a:	d81a      	bhi.n	8002d42 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e01a      	b.n	8002d4c <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <STMPE811_ReadTouch+0x188>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002d26:	d80d      	bhi.n	8002d44 <STMPE811_ReadTouch+0x188>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	885b      	ldrh	r3, [r3, #2]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <STMPE811_ReadTouch+0x188>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	885b      	ldrh	r3, [r3, #2]
 8002d34:	2bee      	cmp	r3, #238	; 0xee
 8002d36:	d805      	bhi.n	8002d44 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e004      	b.n	8002d4c <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002d42:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <verifyHAL_I2C_IS_OKAY+0x18>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d000      	beq.n	8002d62 <verifyHAL_I2C_IS_OKAY+0xe>
    {
        while(1);
 8002d60:	e7fe      	b.n	8002d60 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20025a50 	.word	0x20025a50

08002d70 <I2C3_Init>:

static void I2C3_Init()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <I2C3_Init+0x68>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <I2C3_Init+0x68>)
 8002d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <I2C3_Init+0x68>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <I2C3_Init+0x6c>)
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <I2C3_Init+0x70>)
 8002d96:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <I2C3_Init+0x6c>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <I2C3_Init+0x74>)
 8002d9c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <I2C3_Init+0x6c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <I2C3_Init+0x6c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <I2C3_Init+0x6c>)
 8002dac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002db0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <I2C3_Init+0x6c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <I2C3_Init+0x6c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002dbe:	4807      	ldr	r0, [pc, #28]	; (8002ddc <I2C3_Init+0x6c>)
 8002dc0:	f000 ff14 	bl	8003bec <HAL_I2C_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d000      	beq.n	8002dd0 <I2C3_Init+0x60>
    {
        for(;;); // Catch error
 8002dce:	e7fe      	b.n	8002dce <I2C3_Init+0x5e>
    }
    return;
 8002dd0:	bf00      	nop
}
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	200259fc 	.word	0x200259fc
 8002de0:	40005c00 	.word	0x40005c00
 8002de4:	000186a0 	.word	0x000186a0

08002de8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <I2C3_MspInit+0x9c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <I2C3_MspInit+0xa0>)
 8002e54:	f000 fbf8 	bl	8003648 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5e:	2312      	movs	r3, #18
 8002e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	; (8002e8c <I2C3_MspInit+0xa4>)
 8002e76:	f000 fbe7 	bl	8003648 <HAL_GPIO_Init>
    
}
 8002e7a:	bf00      	nop
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020000 	.word	0x40020000

08002e90 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af04      	add	r7, sp, #16
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	717b      	strb	r3, [r7, #5]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002ea2:	793b      	ldrb	r3, [r7, #4]
 8002ea4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ea6:	797b      	ldrb	r3, [r7, #5]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	88f9      	ldrh	r1, [r7, #6]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <I2C3_Write+0x48>)
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	f107 030f 	add.w	r3, r7, #15
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4807      	ldr	r0, [pc, #28]	; (8002edc <I2C3_Write+0x4c>)
 8002ebe:	f000 ffd9 	bl	8003e74 <HAL_I2C_Mem_Write>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <I2C3_Write+0x50>)
 8002ec8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002eca:	f7ff ff43 	bl	8002d54 <verifyHAL_I2C_IS_OKAY>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0003d090 	.word	0x0003d090
 8002edc:	200259fc 	.word	0x200259fc
 8002ee0:	20025a50 	.word	0x20025a50

08002ee4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af04      	add	r7, sp, #16
 8002eea:	4603      	mov	r3, r0
 8002eec:	603a      	str	r2, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	b299      	uxth	r1, r3
 8002ef8:	79bb      	ldrb	r3, [r7, #6]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <I2C3_Read+0x40>)
 8002efe:	9302      	str	r3, [sp, #8]
 8002f00:	2301      	movs	r3, #1
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4807      	ldr	r0, [pc, #28]	; (8002f28 <I2C3_Read+0x44>)
 8002f0c:	f001 f8ac 	bl	8004068 <HAL_I2C_Mem_Read>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <I2C3_Read+0x48>)
 8002f16:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002f18:	f7ff ff1c 	bl	8002d54 <verifyHAL_I2C_IS_OKAY>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0003d090 	.word	0x0003d090
 8002f28:	200259fc 	.word	0x200259fc
 8002f2c:	20025a50 	.word	0x20025a50

08002f30 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af04      	add	r7, sp, #16
 8002f36:	603a      	str	r2, [r7, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	71bb      	strb	r3, [r7, #6]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	b299      	uxth	r1, r3
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <I2C3_MulitByteRead+0x3c>)
 8002f50:	9302      	str	r3, [sp, #8]
 8002f52:	88bb      	ldrh	r3, [r7, #4]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <I2C3_MulitByteRead+0x40>)
 8002f5e:	f001 f883 	bl	8004068 <HAL_I2C_Mem_Read>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	0003d090 	.word	0x0003d090
 8002f70:	200259fc 	.word	0x200259fc

08002f74 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002f7e:	204d      	movs	r0, #77	; 0x4d
 8002f80:	f7ff fe0b 	bl	8002b9a <STMPE811_Read>
 8002f84:	4603      	mov	r3, r0
 8002f86:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002f88:	204e      	movs	r0, #78	; 0x4e
 8002f8a:	f7ff fe06 	bl	8002b9a <STMPE811_Read>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f92:	7a7b      	ldrb	r3, [r7, #9]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	7a3b      	ldrb	r3, [r7, #8]
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	dc06      	bgt.n	8002fba <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	81fb      	strh	r3, [r7, #14]
 8002fb8:	e005      	b.n	8002fc6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002fba:	89fb      	ldrh	r3, [r7, #14]
 8002fbc:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <TM_STMPE811_ReadX+0xb8>)
 8002fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8002fd0:	441a      	add	r2, r3
 8002fd2:	10d2      	asrs	r2, r2, #3
 8002fd4:	17db      	asrs	r3, r3, #31
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fde:	2bef      	cmp	r3, #239	; 0xef
 8002fe0:	dd02      	ble.n	8002fe8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002fe2:	23ef      	movs	r3, #239	; 0xef
 8002fe4:	81fb      	strh	r3, [r7, #14]
 8002fe6:	e005      	b.n	8002ff4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002fe8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da01      	bge.n	8002ff4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ff4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	dd05      	ble.n	800300a <TM_STMPE811_ReadX+0x96>
 8002ffe:	89fa      	ldrh	r2, [r7, #14]
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	b21b      	sxth	r3, r3
 8003008:	e004      	b.n	8003014 <TM_STMPE811_ReadX+0xa0>
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21b      	sxth	r3, r3
 8003014:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003016:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800301a:	2b04      	cmp	r3, #4
 800301c:	dd01      	ble.n	8003022 <TM_STMPE811_ReadX+0xae>
        return val;
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	e000      	b.n	8003024 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003022:	88fb      	ldrh	r3, [r7, #6]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	88888889 	.word	0x88888889

08003030 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800303a:	204f      	movs	r0, #79	; 0x4f
 800303c:	f7ff fdad 	bl	8002b9a <STMPE811_Read>
 8003040:	4603      	mov	r3, r0
 8003042:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003044:	2050      	movs	r0, #80	; 0x50
 8003046:	f7ff fda8 	bl	8002b9a <STMPE811_Read>
 800304a:	4603      	mov	r3, r0
 800304c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800304e:	7a7b      	ldrb	r3, [r7, #9]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	b21a      	sxth	r2, r3
 8003054:	7a3b      	ldrb	r3, [r7, #8]
 8003056:	b21b      	sxth	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003062:	b29b      	uxth	r3, r3
 8003064:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800306a:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <TM_STMPE811_ReadY+0xa0>)
 800306c:	fb82 1203 	smull	r1, r2, r2, r3
 8003070:	1052      	asrs	r2, r2, #1
 8003072:	17db      	asrs	r3, r3, #31
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800307c:	2b00      	cmp	r3, #0
 800307e:	dc02      	bgt.n	8003086 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	81fb      	strh	r3, [r7, #14]
 8003084:	e007      	b.n	8003096 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800308e:	db02      	blt.n	8003096 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003090:	f240 133f 	movw	r3, #319	; 0x13f
 8003094:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003096:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	429a      	cmp	r2, r3
 800309e:	dd05      	ble.n	80030ac <TM_STMPE811_ReadY+0x7c>
 80030a0:	89fa      	ldrh	r2, [r7, #14]
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	e004      	b.n	80030b6 <TM_STMPE811_ReadY+0x86>
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80030b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	dd01      	ble.n	80030c4 <TM_STMPE811_ReadY+0x94>
        return val;
 80030c0:	89fb      	ldrh	r3, [r7, #14]
 80030c2:	e000      	b.n	80030c6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80030c4:	88fb      	ldrh	r3, [r7, #6]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2e8ba2e9 	.word	0x2e8ba2e9

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f003 fe76 	bl	8006df4 <__errno>
 8003108:	4603      	mov	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <_sbrk+0x64>)
 8003124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20030000 	.word	0x20030000
 8003134:	00000400 	.word	0x00000400
 8003138:	20025a54 	.word	0x20025a54
 800313c:	20025c58 	.word	0x20025c58

08003140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <SystemInit+0x20>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <SystemInit+0x20>)
 800314c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <checkTouchBounds>:
#include "touchLogic.h"

bool checkTouchBounds(struct Point* touch_loc, struct Box_Boundaries bounds){
 8003164:	b084      	sub	sp, #16
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	f107 0014 	add.w	r0, r7, #20
 8003172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // checks to see if Point input is in the given box boundaries
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	dc10      	bgt.n	80031a2 <checkTouchBounds+0x3e>
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	dd0b      	ble.n	80031a2 <checkTouchBounds+0x3e>
            (bounds.top_y >= touch_loc->y && bounds.bottom_y < touch_loc->y));
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 8003190:	429a      	cmp	r2, r3
 8003192:	db06      	blt.n	80031a2 <checkTouchBounds+0x3e>
            (bounds.top_y >= touch_loc->y && bounds.bottom_y < touch_loc->y));
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	da01      	bge.n	80031a2 <checkTouchBounds+0x3e>
    return ((bounds.left_x <= touch_loc->x && bounds.right_x > touch_loc->x) &&
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <checkTouchBounds+0x40>
 80031a2:	2300      	movs	r3, #0
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	b004      	add	sp, #16
 80031b6:	4770      	bx	lr

080031b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031bc:	f7ff ffc0 	bl	8003140 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031c2:	490d      	ldr	r1, [pc, #52]	; (80031f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031d8:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031e6:	f003 fe0b 	bl	8006e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ea:	f7ff f98c 	bl	8002506 <main>
  bx  lr    
 80031ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80031f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80031fc:	08009830 	.word	0x08009830
  ldr r2, =_sbss
 8003200:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003204:	20025c54 	.word	0x20025c54

08003208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC_IRQHandler>
	...

0800320c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_Init+0x40>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_Init+0x40>)
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_Init+0x40>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003234:	2003      	movs	r0, #3
 8003236:	f000 f991 	bl	800355c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323a:	2000      	movs	r0, #0
 800323c:	f000 f808 	bl	8003250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003240:	f7ff f9ba 	bl	80025b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00

08003250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_InitTick+0x54>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_InitTick+0x58>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003266:	fbb3 f3f1 	udiv	r3, r3, r1
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f9b7 	bl	80035e2 <HAL_SYSTICK_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d80a      	bhi.n	800329a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f000 f971 	bl	8003572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <HAL_InitTick+0x5c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000018 	.word	0x20000018
 80032a8:	20000020 	.word	0x20000020
 80032ac:	2000001c 	.word	0x2000001c

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000020 	.word	0x20000020
 80032d4:	20025a58 	.word	0x20025a58

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20025a58 	.word	0x20025a58

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_Delay+0x44>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000020 	.word	0x20000020

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db12      	blt.n	8003410 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	490a      	ldr	r1, [pc, #40]	; (800341c <__NVIC_DisableIRQ+0x44>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	3320      	adds	r3, #32
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003404:	f3bf 8f4f 	dsb	sy
}
 8003408:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800340a:	f3bf 8f6f 	isb	sy
}
 800340e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0c      	blt.n	800344c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <__NVIC_ClearPendingIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	db0a      	blt.n	8003486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	490c      	ldr	r1, [pc, #48]	; (80034a8 <__NVIC_SetPriority+0x4c>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	440b      	add	r3, r1
 8003480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003484:	e00a      	b.n	800349c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <__NVIC_SetPriority+0x50>)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3b04      	subs	r3, #4
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	440b      	add	r3, r1
 800349a:	761a      	strb	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1c3 0307 	rsb	r3, r3, #7
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf28      	it	cs
 80034ce:	2304      	movcs	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d902      	bls.n	80034e0 <NVIC_EncodePriority+0x30>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3b03      	subs	r3, #3
 80034de:	e000      	b.n	80034e2 <NVIC_EncodePriority+0x32>
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43d9      	mvns	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	4313      	orrs	r3, r2
         );
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003528:	d301      	bcc.n	800352e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352a:	2301      	movs	r3, #1
 800352c:	e00f      	b.n	800354e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <SysTick_Config+0x40>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003536:	210f      	movs	r1, #15
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f7ff ff8e 	bl	800345c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SysTick_Config+0x40>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <SysTick_Config+0x40>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000e010 	.word	0xe000e010

0800355c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fee7 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003584:	f7ff fefc 	bl	8003380 <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff8e 	bl	80034b0 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5d 	bl	800345c <__NVIC_SetPriority>
}
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff feef 	bl	800339c <__NVIC_EnableIRQ>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff feff 	bl	80033d8 <__NVIC_DisableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff94 	bl	8003518 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff09 	bl	8003420 <__NVIC_ClearPendingIRQ>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2201      	movs	r2, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_EXTI_ClearPending+0x2c>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6153      	str	r3, [r2, #20]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40013c00 	.word	0x40013c00

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e177      	b.n	8003954 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003664:	2201      	movs	r2, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8166 	bne.w	800394e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003696:	2b02      	cmp	r3, #2
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d017      	beq.n	8003738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80c0 	beq.w	800394e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_GPIO_Init+0x324>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_GPIO_Init+0x324>)
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_GPIO_Init+0x324>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ea:	4a61      	ldr	r2, [pc, #388]	; (8003970 <HAL_GPIO_Init+0x328>)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_GPIO_Init+0x32c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d037      	beq.n	8003886 <HAL_GPIO_Init+0x23e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_GPIO_Init+0x330>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d031      	beq.n	8003882 <HAL_GPIO_Init+0x23a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a56      	ldr	r2, [pc, #344]	; (800397c <HAL_GPIO_Init+0x334>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02b      	beq.n	800387e <HAL_GPIO_Init+0x236>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a55      	ldr	r2, [pc, #340]	; (8003980 <HAL_GPIO_Init+0x338>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d025      	beq.n	800387a <HAL_GPIO_Init+0x232>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a54      	ldr	r2, [pc, #336]	; (8003984 <HAL_GPIO_Init+0x33c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <HAL_GPIO_Init+0x22e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a53      	ldr	r2, [pc, #332]	; (8003988 <HAL_GPIO_Init+0x340>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d019      	beq.n	8003872 <HAL_GPIO_Init+0x22a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <HAL_GPIO_Init+0x344>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_GPIO_Init+0x226>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a51      	ldr	r2, [pc, #324]	; (8003990 <HAL_GPIO_Init+0x348>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00d      	beq.n	800386a <HAL_GPIO_Init+0x222>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a50      	ldr	r2, [pc, #320]	; (8003994 <HAL_GPIO_Init+0x34c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <HAL_GPIO_Init+0x21e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <HAL_GPIO_Init+0x350>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_GPIO_Init+0x21a>
 800385e:	2309      	movs	r3, #9
 8003860:	e012      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003862:	230a      	movs	r3, #10
 8003864:	e010      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003866:	2308      	movs	r3, #8
 8003868:	e00e      	b.n	8003888 <HAL_GPIO_Init+0x240>
 800386a:	2307      	movs	r3, #7
 800386c:	e00c      	b.n	8003888 <HAL_GPIO_Init+0x240>
 800386e:	2306      	movs	r3, #6
 8003870:	e00a      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003872:	2305      	movs	r3, #5
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003876:	2304      	movs	r3, #4
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x240>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x240>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x240>
 8003886:	2300      	movs	r3, #0
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003898:	4935      	ldr	r1, [pc, #212]	; (8003970 <HAL_GPIO_Init+0x328>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_GPIO_Init+0x354>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_GPIO_Init+0x354>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_GPIO_Init+0x354>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <HAL_GPIO_Init+0x354>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_GPIO_Init+0x354>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_GPIO_Init+0x354>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_GPIO_Init+0x354>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_GPIO_Init+0x354>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	f67f ae84 	bls.w	8003664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40021400 	.word	0x40021400
 800398c:	40021800 	.word	0x40021800
 8003990:	40021c00 	.word	0x40021c00
 8003994:	40022000 	.word	0x40022000
 8003998:	40022400 	.word	0x40022400
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e0d9      	b.n	8003b70 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039bc:	2201      	movs	r2, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	f040 80c9 	bne.w	8003b6a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039d8:	4a6b      	ldr	r2, [pc, #428]	; (8003b88 <HAL_GPIO_DeInit+0x1e8>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <HAL_GPIO_DeInit+0x1ec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d037      	beq.n	8003a72 <HAL_GPIO_DeInit+0xd2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <HAL_GPIO_DeInit+0x1f0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d031      	beq.n	8003a6e <HAL_GPIO_DeInit+0xce>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a61      	ldr	r2, [pc, #388]	; (8003b94 <HAL_GPIO_DeInit+0x1f4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d02b      	beq.n	8003a6a <HAL_GPIO_DeInit+0xca>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a60      	ldr	r2, [pc, #384]	; (8003b98 <HAL_GPIO_DeInit+0x1f8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d025      	beq.n	8003a66 <HAL_GPIO_DeInit+0xc6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a5f      	ldr	r2, [pc, #380]	; (8003b9c <HAL_GPIO_DeInit+0x1fc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <HAL_GPIO_DeInit+0xc2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	; (8003ba0 <HAL_GPIO_DeInit+0x200>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_DeInit+0xbe>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ba4 <HAL_GPIO_DeInit+0x204>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_DeInit+0xba>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <HAL_GPIO_DeInit+0x208>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_DeInit+0xb6>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_GPIO_DeInit+0x20c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_DeInit+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_GPIO_DeInit+0x210>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_DeInit+0xae>
 8003a4a:	2309      	movs	r3, #9
 8003a4c:	e012      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a4e:	230a      	movs	r3, #10
 8003a50:	e010      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a52:	2308      	movs	r3, #8
 8003a54:	e00e      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e00c      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00a      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a5e:	2305      	movs	r3, #5
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_DeInit+0xd4>
 8003a72:	2300      	movs	r3, #0
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d132      	bne.n	8003aea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4949      	ldr	r1, [pc, #292]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a92:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	4946      	ldr	r1, [pc, #280]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003aa0:	4b44      	ldr	r3, [pc, #272]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	4942      	ldr	r1, [pc, #264]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	493f      	ldr	r1, [pc, #252]	; (8003bb4 <HAL_GPIO_DeInit+0x214>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003acc:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_GPIO_DeInit+0x1e8>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	43da      	mvns	r2, r3
 8003adc:	482a      	ldr	r0, [pc, #168]	; (8003b88 <HAL_GPIO_DeInit+0x1e8>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2103      	movs	r1, #3
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	220f      	movs	r2, #15
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	08d2      	lsrs	r2, r2, #3
 8003b20:	4019      	ands	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2103      	movs	r1, #3
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	2101      	movs	r1, #1
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	401a      	ands	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	f67f af22 	bls.w	80039bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40020000 	.word	0x40020000
 8003b90:	40020400 	.word	0x40020400
 8003b94:	40020800 	.word	0x40020800
 8003b98:	40020c00 	.word	0x40020c00
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40021400 	.word	0x40021400
 8003ba4:	40021800 	.word	0x40021800
 8003ba8:	40021c00 	.word	0x40021c00
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40022400 	.word	0x40022400
 8003bb4:	40013c00 	.word	0x40013c00

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd4:	e003      	b.n	8003bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e12b      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fcf8 	bl	8002608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c50:	f001 ff06 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a81      	ldr	r2, [pc, #516]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d807      	bhi.n	8003c70 <HAL_I2C_Init+0x84>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a80      	ldr	r2, [pc, #512]	; (8003e64 <HAL_I2C_Init+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e006      	b.n	8003c7e <HAL_I2C_Init+0x92>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a7d      	ldr	r2, [pc, #500]	; (8003e68 <HAL_I2C_Init+0x27c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0e7      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <HAL_I2C_Init+0x280>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <HAL_I2C_Init+0xd4>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e009      	b.n	8003cd4 <HAL_I2C_Init+0xe8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a69      	ldr	r2, [pc, #420]	; (8003e70 <HAL_I2C_Init+0x284>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	495c      	ldr	r1, [pc, #368]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d819      	bhi.n	8003d28 <HAL_I2C_Init+0x13c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e59      	subs	r1, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d02:	1c59      	adds	r1, r3, #1
 8003d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d08:	400b      	ands	r3, r1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_I2C_Init+0x138>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1e59      	subs	r1, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	e051      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d24:	2304      	movs	r3, #4
 8003d26:	e04f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_I2C_Init+0x168>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e58      	subs	r0, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e012      	b.n	8003d7a <HAL_I2C_Init+0x18e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Init+0x196>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e022      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10e      	bne.n	8003da8 <HAL_I2C_Init+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e58      	subs	r0, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	440b      	add	r3, r1
 8003d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	e00f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	0099      	lsls	r1, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6809      	ldr	r1, [r1, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6911      	ldr	r1, [r2, #16]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68d2      	ldr	r2, [r2, #12]
 8003e02:	4311      	orrs	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	000186a0 	.word	0x000186a0
 8003e64:	001e847f 	.word	0x001e847f
 8003e68:	003d08ff 	.word	0x003d08ff
 8003e6c:	431bde83 	.word	0x431bde83
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8e:	f7ff fa23 	bl	80032d8 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	f040 80d9 	bne.w	8004054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2319      	movs	r3, #25
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	496d      	ldr	r1, [pc, #436]	; (8004060 <HAL_I2C_Mem_Write+0x1ec>)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fc8b 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0cc      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Mem_Write+0x56>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0c5      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d007      	beq.n	8003ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2221      	movs	r2, #33	; 0x21
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2240      	movs	r2, #64	; 0x40
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a4d      	ldr	r2, [pc, #308]	; (8004064 <HAL_I2C_Mem_Write+0x1f0>)
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f32:	88f8      	ldrh	r0, [r7, #6]
 8003f34:	893a      	ldrh	r2, [r7, #8]
 8003f36:	8979      	ldrh	r1, [r7, #10]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	4603      	mov	r3, r0
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fac2 	bl	80044cc <I2C_RequestMemoryWrite>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d052      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e081      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fd50 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d107      	bne.n	8003f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06b      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_I2C_Mem_Write+0x180>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d017      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1aa      	bne.n	8003f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fd43 	bl	8004a8c <I2C_WaitOnBTFFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e016      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	00100002 	.word	0x00100002
 8004064:	ffff0000 	.word	0xffff0000

08004068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004082:	f7ff f929 	bl	80032d8 <HAL_GetTick>
 8004086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b20      	cmp	r3, #32
 8004092:	f040 8214 	bne.w	80044be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2319      	movs	r3, #25
 800409c:	2201      	movs	r2, #1
 800409e:	497b      	ldr	r1, [pc, #492]	; (800428c <HAL_I2C_Mem_Read+0x224>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fb91 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
 80040ae:	e207      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_I2C_Mem_Read+0x56>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e200      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d007      	beq.n	80040e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2222      	movs	r2, #34	; 0x22
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2240      	movs	r2, #64	; 0x40
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <HAL_I2C_Mem_Read+0x228>)
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004126:	88f8      	ldrh	r0, [r7, #6]
 8004128:	893a      	ldrh	r2, [r7, #8]
 800412a:	8979      	ldrh	r1, [r7, #10]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	4603      	mov	r3, r0
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa5e 	bl	80045f8 <I2C_RequestMemoryRead>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1bc      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d113      	bne.n	8004176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e190      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	2b01      	cmp	r3, #1
 800417c:	d11b      	bne.n	80041b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e170      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d11b      	bne.n	80041f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	e150      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800420c:	e144      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	2b03      	cmp	r3, #3
 8004214:	f200 80f1 	bhi.w	80043fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b01      	cmp	r3, #1
 800421e:	d123      	bne.n	8004268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fc79 	bl	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e145      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004266:	e117      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	2b02      	cmp	r3, #2
 800426e:	d14e      	bne.n	800430e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2200      	movs	r2, #0
 8004278:	4906      	ldr	r1, [pc, #24]	; (8004294 <HAL_I2C_Mem_Read+0x22c>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 faa4 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e11a      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
 800428a:	bf00      	nop
 800428c:	00100002 	.word	0x00100002
 8004290:	ffff0000 	.word	0xffff0000
 8004294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800430c:	e0c4      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	2200      	movs	r2, #0
 8004316:	496c      	ldr	r1, [pc, #432]	; (80044c8 <HAL_I2C_Mem_Read+0x460>)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa55 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0cb      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	2200      	movs	r2, #0
 8004372:	4955      	ldr	r1, [pc, #340]	; (80044c8 <HAL_I2C_Mem_Read+0x460>)
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fa27 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e09d      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f8:	e04e      	b.n	8004498 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fb8c 	bl	8004b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e058      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d124      	bne.n	8004498 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b03      	cmp	r3, #3
 8004454:	d107      	bne.n	8004466 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	f47f aeb6 	bne.w	800420e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	00010004 	.word	0x00010004

080044cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	817b      	strh	r3, [r7, #10]
 80044de:	460b      	mov	r3, r1
 80044e0:	813b      	strh	r3, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f960 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d103      	bne.n	8004526 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e05f      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	492d      	ldr	r1, [pc, #180]	; (80045f4 <I2C_RequestMemoryWrite+0x128>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f9bb 	bl	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e04c      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	6a39      	ldr	r1, [r7, #32]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fa46 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b04      	cmp	r3, #4
 800457c:	d107      	bne.n	800458e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e02b      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e021      	b.n	80045e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a4:	893b      	ldrh	r3, [r7, #8]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa20 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e005      	b.n	80045ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	00010002 	.word	0x00010002

080045f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004620:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2200      	movs	r2, #0
 800463a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8c2 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d103      	bne.n	8004662 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0aa      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	4952      	ldr	r1, [pc, #328]	; (80047c4 <I2C_RequestMemoryRead+0x1cc>)
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f91d 	bl	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e097      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a4:	6a39      	ldr	r1, [r7, #32]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f9a8 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d107      	bne.n	80046ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e076      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046d4:	893b      	ldrh	r3, [r7, #8]
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	611a      	str	r2, [r3, #16]
 80046de:	e021      	b.n	8004724 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046e0:	893b      	ldrh	r3, [r7, #8]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f0:	6a39      	ldr	r1, [r7, #32]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f982 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b04      	cmp	r3, #4
 8004704:	d107      	bne.n	8004716 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e050      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800471a:	893b      	ldrh	r3, [r7, #8]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	6a39      	ldr	r1, [r7, #32]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f967 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2b04      	cmp	r3, #4
 800473a:	d107      	bne.n	800474c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e035      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2200      	movs	r2, #0
 8004768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f82b 	bl	80047c8 <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d103      	bne.n	8004790 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e013      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004794:	897b      	ldrh	r3, [r7, #10]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	6a3a      	ldr	r2, [r7, #32]
 80047a8:	4906      	ldr	r1, [pc, #24]	; (80047c4 <I2C_RequestMemoryRead+0x1cc>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f886 	bl	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	00010002 	.word	0x00010002

080047c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d8:	e048      	b.n	800486c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d044      	beq.n	800486c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fd79 	bl	80032d8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d139      	bne.n	800486c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10d      	bne.n	800481e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	43da      	mvns	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	e00c      	b.n	8004838 <I2C_WaitOnFlagUntilTimeout+0x70>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d116      	bne.n	800486c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e023      	b.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10d      	bne.n	8004892 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	e00c      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	43da      	mvns	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d093      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ca:	e071      	b.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	d123      	bne.n	8004924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0204 	orr.w	r2, r3, #4
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e067      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d041      	beq.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492c:	f7fe fcd4 	bl	80032d8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d302      	bcc.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d136      	bne.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10c      	bne.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	e00b      	b.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	43da      	mvns	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e021      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10c      	bne.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4013      	ands	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e00b      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f af6d 	bne.w	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8e3 	bl	8004bd6 <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e034      	b.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d028      	beq.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fe fc59 	bl	80032d8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11d      	bne.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d016      	beq.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d1c3      	bne.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a98:	e034      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f89b 	bl	8004bd6 <I2C_IsAcknowledgeFailed>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e034      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d028      	beq.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe fc11 	bl	80032d8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11d      	bne.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d016      	beq.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e007      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d1c3      	bne.n	8004a9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b28:	e049      	b.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d119      	bne.n	8004b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0210 	mvn.w	r2, #16
 8004b40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e030      	b.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fe fbb4 	bl	80032d8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11d      	bne.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d016      	beq.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e007      	b.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d1ae      	bne.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bec:	d11b      	bne.n	8004c26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0bf      	b.n	8004dc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd fd3e 	bl	80026dc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004c76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_LTDC_Init+0x19c>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68d9      	ldr	r1, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <HAL_LTDC_Init+0x19c>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68d9      	ldr	r1, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6919      	ldr	r1, [r3, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_LTDC_Init+0x19c>)
 8004d04:	400b      	ands	r3, r1
 8004d06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6919      	ldr	r1, [r3, #16]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6959      	ldr	r1, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <HAL_LTDC_Init+0x19c>)
 8004d32:	400b      	ands	r3, r1
 8004d34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6959      	ldr	r1, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0206 	orr.w	r2, r2, #6
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	f000f800 	.word	0xf000f800

08004dd4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004dd4:	b5b0      	push	{r4, r5, r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_LTDC_ConfigLayer+0x1a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e02c      	b.n	8004e48 <HAL_LTDC_ConfigLayer+0x74>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2134      	movs	r1, #52	; 0x34
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4614      	mov	r4, r2
 8004e12:	461d      	mov	r5, r3
 8004e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f811 	bl	8004e50 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}

08004e50 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	0c1b      	lsrs	r3, r3, #16
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	4413      	add	r3, r2
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	01db      	lsls	r3, r3, #7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3384      	adds	r3, #132	; 0x84
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	4611      	mov	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	01d2      	lsls	r2, r2, #7
 8004e8c:	440a      	add	r2, r1
 8004e8e:	3284      	adds	r2, #132	; 0x84
 8004e90:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e94:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ea6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ea8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3384      	adds	r3, #132	; 0x84
 8004eb8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ebe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ece:	4413      	add	r3, r2
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	4413      	add	r3, r2
 8004ee0:	3384      	adds	r3, #132	; 0x84
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	01d2      	lsls	r2, r2, #7
 8004eee:	440a      	add	r2, r1
 8004ef0:	3284      	adds	r2, #132	; 0x84
 8004ef2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ef6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f06:	4413      	add	r3, r2
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	01db      	lsls	r3, r3, #7
 8004f14:	440b      	add	r3, r1
 8004f16:	3384      	adds	r3, #132	; 0x84
 8004f18:	4619      	mov	r1, r3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	; 0x84
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4611      	mov	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	01d2      	lsls	r2, r2, #7
 8004f3a:	440a      	add	r2, r1
 8004f3c:	3284      	adds	r2, #132	; 0x84
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	01db      	lsls	r3, r3, #7
 8004f4e:	4413      	add	r3, r2
 8004f50:	3384      	adds	r3, #132	; 0x84
 8004f52:	461a      	mov	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	01db      	lsls	r3, r3, #7
 8004f80:	4413      	add	r3, r2
 8004f82:	3384      	adds	r3, #132	; 0x84
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	01db      	lsls	r3, r3, #7
 8004f90:	4413      	add	r3, r2
 8004f92:	3384      	adds	r3, #132	; 0x84
 8004f94:	461a      	mov	r2, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	01db      	lsls	r3, r3, #7
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3384      	adds	r3, #132	; 0x84
 8004fb8:	4619      	mov	r1, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	4413      	add	r3, r2
 8004fcc:	3384      	adds	r3, #132	; 0x84
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	01d2      	lsls	r2, r2, #7
 8004fda:	440a      	add	r2, r1
 8004fdc:	3284      	adds	r2, #132	; 0x84
 8004fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fe2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	01db      	lsls	r3, r3, #7
 8004fee:	4413      	add	r3, r2
 8004ff0:	3384      	adds	r3, #132	; 0x84
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	4413      	add	r3, r2
 8005006:	3384      	adds	r3, #132	; 0x84
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	4611      	mov	r1, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	01d2      	lsls	r2, r2, #7
 8005014:	440a      	add	r2, r1
 8005016:	3284      	adds	r2, #132	; 0x84
 8005018:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	6809      	ldr	r1, [r1, #0]
 800502e:	4608      	mov	r0, r1
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	01c9      	lsls	r1, r1, #7
 8005034:	4401      	add	r1, r0
 8005036:	3184      	adds	r1, #132	; 0x84
 8005038:	4313      	orrs	r3, r2
 800503a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	01db      	lsls	r3, r3, #7
 8005046:	4413      	add	r3, r2
 8005048:	3384      	adds	r3, #132	; 0x84
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4413      	add	r3, r2
 8005058:	3384      	adds	r3, #132	; 0x84
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	01db      	lsls	r3, r3, #7
 800506a:	4413      	add	r3, r2
 800506c:	3384      	adds	r3, #132	; 0x84
 800506e:	461a      	mov	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800507e:	2304      	movs	r3, #4
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e01b      	b.n	80050bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800508c:	2303      	movs	r3, #3
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e014      	b.n	80050bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d00b      	beq.n	80050b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d007      	beq.n	80050b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d003      	beq.n	80050b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d102      	bne.n	80050b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050b2:	2302      	movs	r3, #2
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e001      	b.n	80050bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050b8:	2301      	movs	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	01db      	lsls	r3, r3, #7
 80050c6:	4413      	add	r3, r2
 80050c8:	3384      	adds	r3, #132	; 0x84
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	4611      	mov	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	01d2      	lsls	r2, r2, #7
 80050d6:	440a      	add	r2, r1
 80050d8:	3284      	adds	r2, #132	; 0x84
 80050da:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80050de:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1acb      	subs	r3, r1, r3
 80050f6:	69f9      	ldr	r1, [r7, #28]
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	6809      	ldr	r1, [r1, #0]
 8005102:	4608      	mov	r0, r1
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	01c9      	lsls	r1, r1, #7
 8005108:	4401      	add	r1, r0
 800510a:	3184      	adds	r1, #132	; 0x84
 800510c:	4313      	orrs	r3, r2
 800510e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	01db      	lsls	r3, r3, #7
 800511a:	4413      	add	r3, r2
 800511c:	3384      	adds	r3, #132	; 0x84
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	4611      	mov	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	01d2      	lsls	r2, r2, #7
 800512a:	440a      	add	r2, r1
 800512c:	3284      	adds	r2, #132	; 0x84
 800512e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	01db      	lsls	r3, r3, #7
 8005142:	4413      	add	r3, r2
 8005144:	3384      	adds	r3, #132	; 0x84
 8005146:	461a      	mov	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	01db      	lsls	r3, r3, #7
 8005158:	4413      	add	r3, r2
 800515a:	3384      	adds	r3, #132	; 0x84
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	4611      	mov	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	01d2      	lsls	r2, r2, #7
 8005168:	440a      	add	r2, r1
 800516a:	3284      	adds	r2, #132	; 0x84
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e267      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d075      	beq.n	800528a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051aa:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d112      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051b6:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c2:	d10b      	bne.n	80051dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05b      	beq.n	8005288 <HAL_RCC_OscConfig+0x108>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d157      	bne.n	8005288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e242      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d106      	bne.n	80051f4 <HAL_RCC_OscConfig+0x74>
 80051e6:	4b76      	ldr	r3, [pc, #472]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a75      	ldr	r2, [pc, #468]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e01d      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x98>
 80051fe:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6f      	ldr	r2, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6c      	ldr	r2, [pc, #432]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0xb0>
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800521e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a65      	ldr	r2, [pc, #404]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800522a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800522e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fe f84e 	bl	80032d8 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005240:	f7fe f84a 	bl	80032d8 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e207      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b5b      	ldr	r3, [pc, #364]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0xc0>
 800525e:	e014      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe f83a 	bl	80032d8 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7fe f836 	bl	80032d8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1f3      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0xe8>
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d063      	beq.n	800535e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005296:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a2:	4b47      	ldr	r3, [pc, #284]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ae:	4b44      	ldr	r3, [pc, #272]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d116      	bne.n	80052e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	4b41      	ldr	r3, [pc, #260]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e1c7      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4937      	ldr	r1, [pc, #220]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e6:	e03a      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d020      	beq.n	8005332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd ffef 	bl	80032d8 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052fe:	f7fd ffeb 	bl	80032d8 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e1a8      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4925      	ldr	r1, [pc, #148]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 800532c:	4313      	orrs	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
 8005330:	e015      	b.n	800535e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_RCC_OscConfig+0x244>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fd ffce 	bl	80032d8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005340:	f7fd ffca 	bl	80032d8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e187      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d036      	beq.n	80053d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fd ffae 	bl	80032d8 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005380:	f7fd ffaa 	bl	80032d8 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e167      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_OscConfig+0x240>)
 8005394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x200>
 800539e:	e01b      	b.n	80053d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_OscConfig+0x248>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a6:	f7fd ff97 	bl	80032d8 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ac:	e00e      	b.n	80053cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ae:	f7fd ff93 	bl	80032d8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d907      	bls.n	80053cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e150      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	42470000 	.word	0x42470000
 80053c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ea      	bne.n	80053ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8097 	beq.w	8005514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ea:	4b81      	ldr	r3, [pc, #516]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	4b7d      	ldr	r3, [pc, #500]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	4a7c      	ldr	r2, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005404:	6413      	str	r3, [r2, #64]	; 0x40
 8005406:	4b7a      	ldr	r3, [pc, #488]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b77      	ldr	r3, [pc, #476]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d118      	bne.n	8005454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a73      	ldr	r2, [pc, #460]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542e:	f7fd ff53 	bl	80032d8 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005436:	f7fd ff4f 	bl	80032d8 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e10c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCC_OscConfig+0x474>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x2ea>
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	e01c      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0x30c>
 8005472:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a5e      	ldr	r2, [pc, #376]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a5b      	ldr	r2, [pc, #364]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0x324>
 800548c:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	4b55      	ldr	r3, [pc, #340]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a54      	ldr	r2, [pc, #336]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 0304 	bic.w	r3, r3, #4
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fd ff14 	bl	80032d8 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fd ff10 	bl	80032d8 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0cb      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ca:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0ee      	beq.n	80054b4 <HAL_RCC_OscConfig+0x334>
 80054d6:	e014      	b.n	8005502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fd fefe 	bl	80032d8 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fd fefa 	bl	80032d8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0b5      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ee      	bne.n	80054e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d105      	bne.n	8005514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	4a38      	ldr	r2, [pc, #224]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a1 	beq.w	8005660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 030c 	and.w	r3, r3, #12
 8005526:	2b08      	cmp	r3, #8
 8005528:	d05c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d141      	bne.n	80055b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fd fece 	bl	80032d8 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7fd feca 	bl	80032d8 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e087      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	019b      	lsls	r3, r3, #6
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	3b01      	subs	r3, #1
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	061b      	lsls	r3, r3, #24
 8005582:	491b      	ldr	r1, [pc, #108]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fd fea3 	bl	80032d8 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005596:	f7fd fe9f 	bl	80032d8 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e05c      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x416>
 80055b4:	e054      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd fe8c 	bl	80032d8 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fd fe88 	bl	80032d8 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e045      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x444>
 80055e2:	e03d      	b.n	8005660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e038      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000
 80055f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x4ec>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d028      	beq.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d121      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d11a      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	4293      	cmp	r3, r2
 8005636:	d111      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	3b01      	subs	r3, #1
 8005646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d107      	bne.n	800565c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023800 	.word	0x40023800

08005670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cc      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90c      	bls.n	80056ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d044      	beq.n	8005790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e067      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fd fdba 	bl	80032d8 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fd fdb6 	bl	80032d8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d20c      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f821 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490a      	ldr	r1, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fd1a 	bl	8003250 <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00
 800582c:	40023800 	.word	0x40023800
 8005830:	080097b8 	.word	0x080097b8
 8005834:	20000018 	.word	0x20000018
 8005838:	2000001c 	.word	0x2000001c

0800583c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b094      	sub	sp, #80	; 0x50
 8005842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	2300      	movs	r3, #0
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584c:	2300      	movs	r3, #0
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005854:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b08      	cmp	r3, #8
 800585e:	d00d      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x40>
 8005860:	2b08      	cmp	r3, #8
 8005862:	f200 80e1 	bhi.w	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x34>
 800586a:	2b04      	cmp	r3, #4
 800586c:	d003      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x3a>
 800586e:	e0db      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005874:	e0db      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800587a:	e0d8      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005886:	4b6d      	ldr	r3, [pc, #436]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d063      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005892:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	2200      	movs	r2, #0
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
 800589c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	2300      	movs	r3, #0
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	0159      	lsls	r1, r3, #5
 80058bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c0:	0150      	lsls	r0, r2, #5
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4621      	mov	r1, r4
 80058c8:	1a51      	subs	r1, r2, r1
 80058ca:	6139      	str	r1, [r7, #16]
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb63 0301 	sbc.w	r3, r3, r1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e0:	4659      	mov	r1, fp
 80058e2:	018b      	lsls	r3, r1, #6
 80058e4:	4651      	mov	r1, sl
 80058e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ea:	4651      	mov	r1, sl
 80058ec:	018a      	lsls	r2, r1, #6
 80058ee:	4651      	mov	r1, sl
 80058f0:	ebb2 0801 	subs.w	r8, r2, r1
 80058f4:	4659      	mov	r1, fp
 80058f6:	eb63 0901 	sbc.w	r9, r3, r1
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800590e:	4690      	mov	r8, r2
 8005910:	4699      	mov	r9, r3
 8005912:	4623      	mov	r3, r4
 8005914:	eb18 0303 	adds.w	r3, r8, r3
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	462b      	mov	r3, r5
 800591c:	eb49 0303 	adc.w	r3, r9, r3
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800592e:	4629      	mov	r1, r5
 8005930:	024b      	lsls	r3, r1, #9
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005938:	4621      	mov	r1, r4
 800593a:	024a      	lsls	r2, r1, #9
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005942:	2200      	movs	r2, #0
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800594c:	f7fa fca8 	bl	80002a0 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	e058      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595a:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	2200      	movs	r2, #0
 8005962:	4618      	mov	r0, r3
 8005964:	4611      	mov	r1, r2
 8005966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	2300      	movs	r3, #0
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	f04f 0000 	mov.w	r0, #0
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	0159      	lsls	r1, r3, #5
 8005982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005986:	0150      	lsls	r0, r2, #5
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4641      	mov	r1, r8
 800598e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005992:	4649      	mov	r1, r9
 8005994:	eb63 0b01 	sbc.w	fp, r3, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059ac:	ebb2 040a 	subs.w	r4, r2, sl
 80059b0:	eb63 050b 	sbc.w	r5, r3, fp
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	00eb      	lsls	r3, r5, #3
 80059be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c2:	00e2      	lsls	r2, r4, #3
 80059c4:	4614      	mov	r4, r2
 80059c6:	461d      	mov	r5, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	18e3      	adds	r3, r4, r3
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	464b      	mov	r3, r9
 80059d0:	eb45 0303 	adc.w	r3, r5, r3
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e2:	4629      	mov	r1, r5
 80059e4:	028b      	lsls	r3, r1, #10
 80059e6:	4621      	mov	r1, r4
 80059e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ec:	4621      	mov	r1, r4
 80059ee:	028a      	lsls	r2, r1, #10
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f6:	2200      	movs	r2, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	61fa      	str	r2, [r7, #28]
 80059fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a00:	f7fa fc4e 	bl	80002a0 <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	3301      	adds	r3, #1
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3750      	adds	r7, #80	; 0x50
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	007a1200 	.word	0x007a1200

08005a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000018 	.word	0x20000018

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a64:	f7ff fff0 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	080097c8 	.word	0x080097c8

08005a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d075      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005abc:	4b91      	ldr	r3, [pc, #580]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ac2:	f7fd fc09 	bl	80032d8 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aca:	f7fd fc05 	bl	80032d8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e189      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005adc:	4b8a      	ldr	r3, [pc, #552]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	019a      	lsls	r2, r3, #6
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	4981      	ldr	r1, [pc, #516]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01f      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b14:	4b7c      	ldr	r3, [pc, #496]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	0f1b      	lsrs	r3, r3, #28
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	071b      	lsls	r3, r3, #28
 8005b34:	4974      	ldr	r1, [pc, #464]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b3c:	4b72      	ldr	r3, [pc, #456]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b42:	f023 021f 	bic.w	r2, r3, #31
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	496e      	ldr	r1, [pc, #440]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	019a      	lsls	r2, r3, #6
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	071b      	lsls	r3, r3, #28
 8005b74:	4964      	ldr	r1, [pc, #400]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b7c:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b82:	f7fd fba9 	bl	80032d8 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b8a:	f7fd fba5 	bl	80032d8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e129      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b9c:	4b5a      	ldr	r3, [pc, #360]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d079      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bc0:	4b52      	ldr	r3, [pc, #328]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc6:	f7fd fb87 	bl	80032d8 <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bce:	f7fd fb83 	bl	80032d8 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e107      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005be0:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bec:	d0ef      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d020      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bfa:	4b43      	ldr	r3, [pc, #268]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	0f1b      	lsrs	r3, r3, #28
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	019a      	lsls	r2, r3, #6
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	061b      	lsls	r3, r3, #24
 8005c14:	431a      	orrs	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	071b      	lsls	r3, r3, #28
 8005c1a:	493b      	ldr	r1, [pc, #236]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c22:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	4934      	ldr	r1, [pc, #208]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01e      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c48:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	0e1b      	lsrs	r3, r3, #24
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	019a      	lsls	r2, r3, #6
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	061b      	lsls	r3, r3, #24
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	071b      	lsls	r3, r3, #28
 8005c68:	4927      	ldr	r1, [pc, #156]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	4922      	ldr	r1, [pc, #136]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8c:	f7fd fb24 	bl	80032d8 <HAL_GetTick>
 8005c90:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c94:	f7fd fb20 	bl	80032d8 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0a4      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cb2:	d1ef      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 808b 	beq.w	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cea:	f7fd faf5 	bl	80032d8 <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf0:	e010      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fd faf1 	bl	80032d8 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d909      	bls.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e075      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d04:	42470068 	.word	0x42470068
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	42470070 	.word	0x42470070
 8005d10:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d14:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0e8      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d20:	4b36      	ldr	r3, [pc, #216]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02f      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d028      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d3e:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d48:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d54:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d5a:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d114      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fd fab7 	bl	80032d8 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fd fab3 	bl	80032d8 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e035      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ee      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db2:	4912      	ldr	r1, [pc, #72]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dc4:	6093      	str	r3, [r2, #8]
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd2:	490a      	ldr	r1, [pc, #40]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005dec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40007000 	.word	0x40007000
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	42470e40 	.word	0x42470e40
 8005e04:	424711e0 	.word	0x424711e0

08005e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e07b      	b.n	8005f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d108      	bne.n	8005e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e2a:	d009      	beq.n	8005e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	61da      	str	r2, [r3, #28]
 8005e32:	e005      	b.n	8005e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fc fd66 	bl	800292c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	f003 0104 	and.w	r1, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	f003 0210 	and.w	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01a      	b.n	8005f62 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fc fd39 	bl	80029bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b088      	sub	sp, #32
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_SPI_Transmit+0x22>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e12d      	b.n	80061e8 <HAL_SPI_Transmit+0x27e>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f94:	f7fd f9a0 	bl	80032d8 <HAL_GetTick>
 8005f98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d002      	beq.n	8005fb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
 8005fac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fae:	e116      	b.n	80061de <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_Transmit+0x52>
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc0:	e10d      	b.n	80061de <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d10f      	bne.n	800602a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d007      	beq.n	8006048 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006050:	d14f      	bne.n	80060f2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_SPI_Transmit+0xf6>
 800605a:	8afb      	ldrh	r3, [r7, #22]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d142      	bne.n	80060e6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006084:	e02f      	b.n	80060e6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d112      	bne.n	80060ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060b8:	e015      	b.n	80060e6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fd f90d 	bl	80032d8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Transmit+0x168>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit+0x16e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80060e4:	e07b      	b.n	80061de <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ca      	bne.n	8006086 <HAL_SPI_Transmit+0x11c>
 80060f0:	e050      	b.n	8006194 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Transmit+0x196>
 80060fa:	8afb      	ldrh	r3, [r7, #22]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d144      	bne.n	800618a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006126:	e030      	b.n	800618a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b02      	cmp	r3, #2
 8006134:	d113      	bne.n	800615e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	86da      	strh	r2, [r3, #54]	; 0x36
 800615c:	e015      	b.n	800618a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615e:	f7fd f8bb 	bl	80032d8 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d803      	bhi.n	8006176 <HAL_SPI_Transmit+0x20c>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d102      	bne.n	800617c <HAL_SPI_Transmit+0x212>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006188:	e029      	b.n	80061de <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1c9      	bne.n	8006128 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f8bf 	bl	800631c <SPI_EndRxTxTransaction>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e003      	b.n	80061de <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800621c:	f7fd f85c 	bl	80032d8 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	4413      	add	r3, r2
 800622a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800622c:	f7fd f854 	bl	80032d8 <HAL_GetTick>
 8006230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	015b      	lsls	r3, r3, #5
 8006238:	0d1b      	lsrs	r3, r3, #20
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006242:	e054      	b.n	80062ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d050      	beq.n	80062ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800624c:	f7fd f844 	bl	80032d8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	429a      	cmp	r2, r3
 800625a:	d902      	bls.n	8006262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d13d      	bne.n	80062de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d111      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d004      	beq.n	8006290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d107      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a8:	d10f      	bne.n	80062ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e017      	b.n	800630e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	429a      	cmp	r2, r3
 800630a:	d19b      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000018 	.word	0x20000018

0800631c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2201      	movs	r2, #1
 8006330:	2102      	movs	r1, #2
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff6a 	bl	800620c <SPI_WaitFlagStateUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e032      	b.n	80063b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <SPI_EndRxTxTransaction+0xa0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <SPI_EndRxTxTransaction+0xa4>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	0d5b      	lsrs	r3, r3, #21
 800635a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636c:	d112      	bne.n	8006394 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff ff47 	bl	800620c <SPI_WaitFlagStateUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d016      	beq.n	80063b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f043 0220 	orr.w	r2, r3, #32
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e00f      	b.n	80063b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	3b01      	subs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d0f2      	beq.n	8006394 <SPI_EndRxTxTransaction+0x78>
 80063ae:	e000      	b.n	80063b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80063b0:	bf00      	nop
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000018 	.word	0x20000018
 80063c0:	165e9f81 	.word	0x165e9f81

080063c4 <findslot>:
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <findslot+0x2c>)
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	b118      	cbz	r0, 80063d6 <findslot+0x12>
 80063ce:	6a03      	ldr	r3, [r0, #32]
 80063d0:	b90b      	cbnz	r3, 80063d6 <findslot+0x12>
 80063d2:	f000 fb25 	bl	8006a20 <__sinit>
 80063d6:	2c13      	cmp	r4, #19
 80063d8:	d807      	bhi.n	80063ea <findslot+0x26>
 80063da:	4806      	ldr	r0, [pc, #24]	; (80063f4 <findslot+0x30>)
 80063dc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80063e0:	3201      	adds	r2, #1
 80063e2:	d002      	beq.n	80063ea <findslot+0x26>
 80063e4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	2000      	movs	r0, #0
 80063ec:	e7fc      	b.n	80063e8 <findslot+0x24>
 80063ee:	bf00      	nop
 80063f0:	20000084 	.word	0x20000084
 80063f4:	20025a68 	.word	0x20025a68

080063f8 <error>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	f000 fcfa 	bl	8006df4 <__errno>
 8006400:	2613      	movs	r6, #19
 8006402:	4605      	mov	r5, r0
 8006404:	2700      	movs	r7, #0
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	beab      	bkpt	0x00ab
 800640c:	4606      	mov	r6, r0
 800640e:	602e      	str	r6, [r5, #0]
 8006410:	4620      	mov	r0, r4
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006414 <checkerror>:
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d101      	bne.n	800641c <checkerror+0x8>
 8006418:	f7ff bfee 	b.w	80063f8 <error>
 800641c:	4770      	bx	lr

0800641e <_swiread>:
 800641e:	b530      	push	{r4, r5, lr}
 8006420:	b085      	sub	sp, #20
 8006422:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006426:	9203      	str	r2, [sp, #12]
 8006428:	2406      	movs	r4, #6
 800642a:	ad01      	add	r5, sp, #4
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	beab      	bkpt	0x00ab
 8006432:	4604      	mov	r4, r0
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff ffed 	bl	8006414 <checkerror>
 800643a:	b005      	add	sp, #20
 800643c:	bd30      	pop	{r4, r5, pc}

0800643e <_read>:
 800643e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006440:	4615      	mov	r5, r2
 8006442:	9101      	str	r1, [sp, #4]
 8006444:	f7ff ffbe 	bl	80063c4 <findslot>
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	4604      	mov	r4, r0
 800644c:	b938      	cbnz	r0, 800645e <_read+0x20>
 800644e:	f000 fcd1 	bl	8006df4 <__errno>
 8006452:	2309      	movs	r3, #9
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	b003      	add	sp, #12
 800645c:	bd30      	pop	{r4, r5, pc}
 800645e:	6800      	ldr	r0, [r0, #0]
 8006460:	462a      	mov	r2, r5
 8006462:	f7ff ffdc 	bl	800641e <_swiread>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d0f7      	beq.n	800645a <_read+0x1c>
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	1a2a      	subs	r2, r5, r0
 800646e:	4413      	add	r3, r2
 8006470:	6063      	str	r3, [r4, #4]
 8006472:	4610      	mov	r0, r2
 8006474:	e7f1      	b.n	800645a <_read+0x1c>

08006476 <_swilseek>:
 8006476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006478:	460c      	mov	r4, r1
 800647a:	4616      	mov	r6, r2
 800647c:	f7ff ffa2 	bl	80063c4 <findslot>
 8006480:	4605      	mov	r5, r0
 8006482:	b940      	cbnz	r0, 8006496 <_swilseek+0x20>
 8006484:	f000 fcb6 	bl	8006df4 <__errno>
 8006488:	2309      	movs	r3, #9
 800648a:	6003      	str	r3, [r0, #0]
 800648c:	f04f 34ff 	mov.w	r4, #4294967295
 8006490:	4620      	mov	r0, r4
 8006492:	b003      	add	sp, #12
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006496:	2e02      	cmp	r6, #2
 8006498:	d903      	bls.n	80064a2 <_swilseek+0x2c>
 800649a:	f000 fcab 	bl	8006df4 <__errno>
 800649e:	2316      	movs	r3, #22
 80064a0:	e7f3      	b.n	800648a <_swilseek+0x14>
 80064a2:	2e01      	cmp	r6, #1
 80064a4:	d112      	bne.n	80064cc <_swilseek+0x56>
 80064a6:	6843      	ldr	r3, [r0, #4]
 80064a8:	18e4      	adds	r4, r4, r3
 80064aa:	d4f6      	bmi.n	800649a <_swilseek+0x24>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	260a      	movs	r6, #10
 80064b0:	e9cd 3400 	strd	r3, r4, [sp]
 80064b4:	466f      	mov	r7, sp
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	beab      	bkpt	0x00ab
 80064bc:	4606      	mov	r6, r0
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff ffa8 	bl	8006414 <checkerror>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	dbe1      	blt.n	800648c <_swilseek+0x16>
 80064c8:	606c      	str	r4, [r5, #4]
 80064ca:	e7e1      	b.n	8006490 <_swilseek+0x1a>
 80064cc:	2e02      	cmp	r6, #2
 80064ce:	6803      	ldr	r3, [r0, #0]
 80064d0:	d1ec      	bne.n	80064ac <_swilseek+0x36>
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	260c      	movs	r6, #12
 80064d6:	466f      	mov	r7, sp
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	beab      	bkpt	0x00ab
 80064de:	4606      	mov	r6, r0
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff ff97 	bl	8006414 <checkerror>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d0d0      	beq.n	800648c <_swilseek+0x16>
 80064ea:	4404      	add	r4, r0
 80064ec:	e7de      	b.n	80064ac <_swilseek+0x36>

080064ee <_lseek>:
 80064ee:	f7ff bfc2 	b.w	8006476 <_swilseek>

080064f2 <_swiwrite>:
 80064f2:	b530      	push	{r4, r5, lr}
 80064f4:	b085      	sub	sp, #20
 80064f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80064fa:	9203      	str	r2, [sp, #12]
 80064fc:	2405      	movs	r4, #5
 80064fe:	ad01      	add	r5, sp, #4
 8006500:	4620      	mov	r0, r4
 8006502:	4629      	mov	r1, r5
 8006504:	beab      	bkpt	0x00ab
 8006506:	4604      	mov	r4, r0
 8006508:	4620      	mov	r0, r4
 800650a:	f7ff ff83 	bl	8006414 <checkerror>
 800650e:	b005      	add	sp, #20
 8006510:	bd30      	pop	{r4, r5, pc}

08006512 <_write>:
 8006512:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006514:	4615      	mov	r5, r2
 8006516:	9101      	str	r1, [sp, #4]
 8006518:	f7ff ff54 	bl	80063c4 <findslot>
 800651c:	9901      	ldr	r1, [sp, #4]
 800651e:	4604      	mov	r4, r0
 8006520:	b930      	cbnz	r0, 8006530 <_write+0x1e>
 8006522:	f000 fc67 	bl	8006df4 <__errno>
 8006526:	2309      	movs	r3, #9
 8006528:	6003      	str	r3, [r0, #0]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	e012      	b.n	8006556 <_write+0x44>
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	462a      	mov	r2, r5
 8006534:	f7ff ffdd 	bl	80064f2 <_swiwrite>
 8006538:	2800      	cmp	r0, #0
 800653a:	dbf6      	blt.n	800652a <_write+0x18>
 800653c:	6862      	ldr	r2, [r4, #4]
 800653e:	1a2b      	subs	r3, r5, r0
 8006540:	441a      	add	r2, r3
 8006542:	42a8      	cmp	r0, r5
 8006544:	6062      	str	r2, [r4, #4]
 8006546:	d105      	bne.n	8006554 <_write+0x42>
 8006548:	2000      	movs	r0, #0
 800654a:	b003      	add	sp, #12
 800654c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006550:	f7ff bf52 	b.w	80063f8 <error>
 8006554:	4618      	mov	r0, r3
 8006556:	b003      	add	sp, #12
 8006558:	bd30      	pop	{r4, r5, pc}

0800655a <_swiclose>:
 800655a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800655c:	2402      	movs	r4, #2
 800655e:	9001      	str	r0, [sp, #4]
 8006560:	ad01      	add	r5, sp, #4
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	beab      	bkpt	0x00ab
 8006568:	4604      	mov	r4, r0
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff ff52 	bl	8006414 <checkerror>
 8006570:	b003      	add	sp, #12
 8006572:	bd30      	pop	{r4, r5, pc}

08006574 <_close>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4605      	mov	r5, r0
 8006578:	f7ff ff24 	bl	80063c4 <findslot>
 800657c:	4604      	mov	r4, r0
 800657e:	b930      	cbnz	r0, 800658e <_close+0x1a>
 8006580:	f000 fc38 	bl	8006df4 <__errno>
 8006584:	2309      	movs	r3, #9
 8006586:	6003      	str	r3, [r0, #0]
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	bd38      	pop	{r3, r4, r5, pc}
 800658e:	3d01      	subs	r5, #1
 8006590:	2d01      	cmp	r5, #1
 8006592:	d809      	bhi.n	80065a8 <_close+0x34>
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <_close+0x48>)
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	429a      	cmp	r2, r3
 800659c:	d104      	bne.n	80065a8 <_close+0x34>
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	6003      	str	r3, [r0, #0]
 80065a4:	2000      	movs	r0, #0
 80065a6:	e7f1      	b.n	800658c <_close+0x18>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	f7ff ffd6 	bl	800655a <_swiclose>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d1ec      	bne.n	800658c <_close+0x18>
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	e7e8      	b.n	800658c <_close+0x18>
 80065ba:	bf00      	nop
 80065bc:	20025a68 	.word	0x20025a68

080065c0 <_swistat>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	f7ff fefe 	bl	80063c4 <findslot>
 80065c8:	4605      	mov	r5, r0
 80065ca:	b930      	cbnz	r0, 80065da <_swistat+0x1a>
 80065cc:	f000 fc12 	bl	8006df4 <__errno>
 80065d0:	2309      	movs	r3, #9
 80065d2:	6003      	str	r3, [r0, #0]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065e0:	6063      	str	r3, [r4, #4]
 80065e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e6:	64a3      	str	r3, [r4, #72]	; 0x48
 80065e8:	260c      	movs	r6, #12
 80065ea:	4630      	mov	r0, r6
 80065ec:	4629      	mov	r1, r5
 80065ee:	beab      	bkpt	0x00ab
 80065f0:	4605      	mov	r5, r0
 80065f2:	4628      	mov	r0, r5
 80065f4:	f7ff ff0e 	bl	8006414 <checkerror>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	bf1c      	itt	ne
 80065fc:	6120      	strne	r0, [r4, #16]
 80065fe:	2000      	movne	r0, #0
 8006600:	e7ea      	b.n	80065d8 <_swistat+0x18>

08006602 <_fstat>:
 8006602:	460b      	mov	r3, r1
 8006604:	b510      	push	{r4, lr}
 8006606:	2100      	movs	r1, #0
 8006608:	4604      	mov	r4, r0
 800660a:	2258      	movs	r2, #88	; 0x58
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fba3 	bl	8006d58 <memset>
 8006612:	4601      	mov	r1, r0
 8006614:	4620      	mov	r0, r4
 8006616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661a:	f7ff bfd1 	b.w	80065c0 <_swistat>

0800661e <_stat>:
 800661e:	b538      	push	{r3, r4, r5, lr}
 8006620:	460d      	mov	r5, r1
 8006622:	4604      	mov	r4, r0
 8006624:	2258      	movs	r2, #88	; 0x58
 8006626:	2100      	movs	r1, #0
 8006628:	4628      	mov	r0, r5
 800662a:	f000 fb95 	bl	8006d58 <memset>
 800662e:	4620      	mov	r0, r4
 8006630:	2100      	movs	r1, #0
 8006632:	f000 f811 	bl	8006658 <_swiopen>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	4604      	mov	r4, r0
 800663a:	d00b      	beq.n	8006654 <_stat+0x36>
 800663c:	686b      	ldr	r3, [r5, #4]
 800663e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006642:	606b      	str	r3, [r5, #4]
 8006644:	4629      	mov	r1, r5
 8006646:	f7ff ffbb 	bl	80065c0 <_swistat>
 800664a:	4605      	mov	r5, r0
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff ff91 	bl	8006574 <_close>
 8006652:	462c      	mov	r4, r5
 8006654:	4620      	mov	r0, r4
 8006656:	bd38      	pop	{r3, r4, r5, pc}

08006658 <_swiopen>:
 8006658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800665c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006708 <_swiopen+0xb0>
 8006660:	b097      	sub	sp, #92	; 0x5c
 8006662:	4607      	mov	r7, r0
 8006664:	460e      	mov	r6, r1
 8006666:	2500      	movs	r5, #0
 8006668:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800666c:	1c61      	adds	r1, r4, #1
 800666e:	d037      	beq.n	80066e0 <_swiopen+0x88>
 8006670:	3501      	adds	r5, #1
 8006672:	2d14      	cmp	r5, #20
 8006674:	d1f8      	bne.n	8006668 <_swiopen+0x10>
 8006676:	f000 fbbd 	bl	8006df4 <__errno>
 800667a:	2318      	movs	r3, #24
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	f04f 34ff 	mov.w	r4, #4294967295
 8006682:	e03d      	b.n	8006700 <_swiopen+0xa8>
 8006684:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8006688:	f240 6301 	movw	r3, #1537	; 0x601
 800668c:	07b2      	lsls	r2, r6, #30
 800668e:	bf48      	it	mi
 8006690:	f044 0402 	orrmi.w	r4, r4, #2
 8006694:	421e      	tst	r6, r3
 8006696:	bf18      	it	ne
 8006698:	f044 0404 	orrne.w	r4, r4, #4
 800669c:	0733      	lsls	r3, r6, #28
 800669e:	bf48      	it	mi
 80066a0:	f024 0404 	bicmi.w	r4, r4, #4
 80066a4:	4638      	mov	r0, r7
 80066a6:	bf48      	it	mi
 80066a8:	f044 0408 	orrmi.w	r4, r4, #8
 80066ac:	9700      	str	r7, [sp, #0]
 80066ae:	f7f9 fd9f 	bl	80001f0 <strlen>
 80066b2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80066b6:	2401      	movs	r4, #1
 80066b8:	4620      	mov	r0, r4
 80066ba:	4649      	mov	r1, r9
 80066bc:	beab      	bkpt	0x00ab
 80066be:	4604      	mov	r4, r0
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	db08      	blt.n	80066d6 <_swiopen+0x7e>
 80066c4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80066c8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80066d2:	462c      	mov	r4, r5
 80066d4:	e014      	b.n	8006700 <_swiopen+0xa8>
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff fe8e 	bl	80063f8 <error>
 80066dc:	4604      	mov	r4, r0
 80066de:	e00f      	b.n	8006700 <_swiopen+0xa8>
 80066e0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80066e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80066e8:	46e9      	mov	r9, sp
 80066ea:	d1cb      	bne.n	8006684 <_swiopen+0x2c>
 80066ec:	4649      	mov	r1, r9
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7ff ff95 	bl	800661e <_stat>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d0c5      	beq.n	8006684 <_swiopen+0x2c>
 80066f8:	f000 fb7c 	bl	8006df4 <__errno>
 80066fc:	2311      	movs	r3, #17
 80066fe:	6003      	str	r3, [r0, #0]
 8006700:	4620      	mov	r0, r4
 8006702:	b017      	add	sp, #92	; 0x5c
 8006704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006708:	20025a68 	.word	0x20025a68

0800670c <_get_semihosting_exts>:
 800670c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	482a      	ldr	r0, [pc, #168]	; (80067c0 <_get_semihosting_exts+0xb4>)
 8006716:	2100      	movs	r1, #0
 8006718:	4615      	mov	r5, r2
 800671a:	f7ff ff9d 	bl	8006658 <_swiopen>
 800671e:	462a      	mov	r2, r5
 8006720:	4604      	mov	r4, r0
 8006722:	2100      	movs	r1, #0
 8006724:	4630      	mov	r0, r6
 8006726:	f000 fb17 	bl	8006d58 <memset>
 800672a:	1c63      	adds	r3, r4, #1
 800672c:	d016      	beq.n	800675c <_get_semihosting_exts+0x50>
 800672e:	4620      	mov	r0, r4
 8006730:	f7ff fe48 	bl	80063c4 <findslot>
 8006734:	f04f 080c 	mov.w	r8, #12
 8006738:	4681      	mov	r9, r0
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	beab      	bkpt	0x00ab
 8006740:	4680      	mov	r8, r0
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fe66 	bl	8006414 <checkerror>
 8006748:	2803      	cmp	r0, #3
 800674a:	dd02      	ble.n	8006752 <_get_semihosting_exts+0x46>
 800674c:	1ec3      	subs	r3, r0, #3
 800674e:	42ab      	cmp	r3, r5
 8006750:	dc08      	bgt.n	8006764 <_get_semihosting_exts+0x58>
 8006752:	4620      	mov	r0, r4
 8006754:	f7ff ff0e 	bl	8006574 <_close>
 8006758:	f04f 34ff 	mov.w	r4, #4294967295
 800675c:	4620      	mov	r0, r4
 800675e:	b003      	add	sp, #12
 8006760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006764:	2204      	movs	r2, #4
 8006766:	eb0d 0102 	add.w	r1, sp, r2
 800676a:	4620      	mov	r0, r4
 800676c:	f7ff fe67 	bl	800643e <_read>
 8006770:	2803      	cmp	r0, #3
 8006772:	ddee      	ble.n	8006752 <_get_semihosting_exts+0x46>
 8006774:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006778:	2b53      	cmp	r3, #83	; 0x53
 800677a:	d1ea      	bne.n	8006752 <_get_semihosting_exts+0x46>
 800677c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006780:	2b48      	cmp	r3, #72	; 0x48
 8006782:	d1e6      	bne.n	8006752 <_get_semihosting_exts+0x46>
 8006784:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006788:	2b46      	cmp	r3, #70	; 0x46
 800678a:	d1e2      	bne.n	8006752 <_get_semihosting_exts+0x46>
 800678c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006790:	2b42      	cmp	r3, #66	; 0x42
 8006792:	d1de      	bne.n	8006752 <_get_semihosting_exts+0x46>
 8006794:	2201      	movs	r2, #1
 8006796:	4639      	mov	r1, r7
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff fe6c 	bl	8006476 <_swilseek>
 800679e:	2800      	cmp	r0, #0
 80067a0:	dbd7      	blt.n	8006752 <_get_semihosting_exts+0x46>
 80067a2:	462a      	mov	r2, r5
 80067a4:	4631      	mov	r1, r6
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff fe49 	bl	800643e <_read>
 80067ac:	4605      	mov	r5, r0
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff fee0 	bl	8006574 <_close>
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7ff fe2d 	bl	8006414 <checkerror>
 80067ba:	4604      	mov	r4, r0
 80067bc:	e7ce      	b.n	800675c <_get_semihosting_exts+0x50>
 80067be:	bf00      	nop
 80067c0:	080097d0 	.word	0x080097d0

080067c4 <initialise_semihosting_exts>:
 80067c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067c6:	4d0a      	ldr	r5, [pc, #40]	; (80067f0 <initialise_semihosting_exts+0x2c>)
 80067c8:	4c0a      	ldr	r4, [pc, #40]	; (80067f4 <initialise_semihosting_exts+0x30>)
 80067ca:	2100      	movs	r1, #0
 80067cc:	2201      	movs	r2, #1
 80067ce:	a801      	add	r0, sp, #4
 80067d0:	6029      	str	r1, [r5, #0]
 80067d2:	6022      	str	r2, [r4, #0]
 80067d4:	f7ff ff9a 	bl	800670c <_get_semihosting_exts>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dd07      	ble.n	80067ec <initialise_semihosting_exts+0x28>
 80067dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067e0:	f003 0201 	and.w	r2, r3, #1
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	602a      	str	r2, [r5, #0]
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	b003      	add	sp, #12
 80067ee:	bd30      	pop	{r4, r5, pc}
 80067f0:	20000024 	.word	0x20000024
 80067f4:	20000028 	.word	0x20000028

080067f8 <_has_ext_stdout_stderr>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4c04      	ldr	r4, [pc, #16]	; (800680c <_has_ext_stdout_stderr+0x14>)
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da01      	bge.n	8006806 <_has_ext_stdout_stderr+0xe>
 8006802:	f7ff ffdf 	bl	80067c4 <initialise_semihosting_exts>
 8006806:	6820      	ldr	r0, [r4, #0]
 8006808:	bd10      	pop	{r4, pc}
 800680a:	bf00      	nop
 800680c:	20000028 	.word	0x20000028

08006810 <initialise_monitor_handles>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	b085      	sub	sp, #20
 8006816:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80068c8 <initialise_monitor_handles+0xb8>
 800681a:	f8cd 9004 	str.w	r9, [sp, #4]
 800681e:	2303      	movs	r3, #3
 8006820:	2400      	movs	r4, #0
 8006822:	9303      	str	r3, [sp, #12]
 8006824:	af01      	add	r7, sp, #4
 8006826:	9402      	str	r4, [sp, #8]
 8006828:	2501      	movs	r5, #1
 800682a:	4628      	mov	r0, r5
 800682c:	4639      	mov	r1, r7
 800682e:	beab      	bkpt	0x00ab
 8006830:	4605      	mov	r5, r0
 8006832:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80068cc <initialise_monitor_handles+0xbc>
 8006836:	4623      	mov	r3, r4
 8006838:	4c20      	ldr	r4, [pc, #128]	; (80068bc <initialise_monitor_handles+0xac>)
 800683a:	f8c8 5000 	str.w	r5, [r8]
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006846:	3301      	adds	r3, #1
 8006848:	2b14      	cmp	r3, #20
 800684a:	d1fa      	bne.n	8006842 <initialise_monitor_handles+0x32>
 800684c:	f7ff ffd4 	bl	80067f8 <_has_ext_stdout_stderr>
 8006850:	4d1b      	ldr	r5, [pc, #108]	; (80068c0 <initialise_monitor_handles+0xb0>)
 8006852:	b1d0      	cbz	r0, 800688a <initialise_monitor_handles+0x7a>
 8006854:	f04f 0a03 	mov.w	sl, #3
 8006858:	2304      	movs	r3, #4
 800685a:	f8cd 9004 	str.w	r9, [sp, #4]
 800685e:	2601      	movs	r6, #1
 8006860:	f8cd a00c 	str.w	sl, [sp, #12]
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	beab      	bkpt	0x00ab
 800686c:	4683      	mov	fp, r0
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <initialise_monitor_handles+0xb4>)
 8006870:	f8cd 9004 	str.w	r9, [sp, #4]
 8006874:	f8c3 b000 	str.w	fp, [r3]
 8006878:	2308      	movs	r3, #8
 800687a:	f8cd a00c 	str.w	sl, [sp, #12]
 800687e:	9302      	str	r3, [sp, #8]
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	beab      	bkpt	0x00ab
 8006886:	4606      	mov	r6, r0
 8006888:	602e      	str	r6, [r5, #0]
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	bf02      	ittt	eq
 8006890:	4b0c      	ldreq	r3, [pc, #48]	; (80068c4 <initialise_monitor_handles+0xb4>)
 8006892:	681b      	ldreq	r3, [r3, #0]
 8006894:	602b      	streq	r3, [r5, #0]
 8006896:	2600      	movs	r6, #0
 8006898:	f8d8 3000 	ldr.w	r3, [r8]
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	6066      	str	r6, [r4, #4]
 80068a0:	f7ff ffaa 	bl	80067f8 <_has_ext_stdout_stderr>
 80068a4:	b130      	cbz	r0, 80068b4 <initialise_monitor_handles+0xa4>
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <initialise_monitor_handles+0xb4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80068b4:	b005      	add	sp, #20
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	bf00      	nop
 80068bc:	20025a68 	.word	0x20025a68
 80068c0:	20025a5c 	.word	0x20025a5c
 80068c4:	20025a64 	.word	0x20025a64
 80068c8:	080097e6 	.word	0x080097e6
 80068cc:	20025a60 	.word	0x20025a60

080068d0 <_isatty>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	f7ff fd77 	bl	80063c4 <findslot>
 80068d6:	2509      	movs	r5, #9
 80068d8:	4604      	mov	r4, r0
 80068da:	b920      	cbnz	r0, 80068e6 <_isatty+0x16>
 80068dc:	f000 fa8a 	bl	8006df4 <__errno>
 80068e0:	6005      	str	r5, [r0, #0]
 80068e2:	4620      	mov	r0, r4
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	4628      	mov	r0, r5
 80068e8:	4621      	mov	r1, r4
 80068ea:	beab      	bkpt	0x00ab
 80068ec:	4604      	mov	r4, r0
 80068ee:	2c01      	cmp	r4, #1
 80068f0:	d0f7      	beq.n	80068e2 <_isatty+0x12>
 80068f2:	f000 fa7f 	bl	8006df4 <__errno>
 80068f6:	2400      	movs	r4, #0
 80068f8:	4605      	mov	r5, r0
 80068fa:	2613      	movs	r6, #19
 80068fc:	4630      	mov	r0, r6
 80068fe:	4621      	mov	r1, r4
 8006900:	beab      	bkpt	0x00ab
 8006902:	4606      	mov	r6, r0
 8006904:	602e      	str	r6, [r5, #0]
 8006906:	e7ec      	b.n	80068e2 <_isatty+0x12>

08006908 <std>:
 8006908:	2300      	movs	r3, #0
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	e9c0 3300 	strd	r3, r3, [r0]
 8006912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006916:	6083      	str	r3, [r0, #8]
 8006918:	8181      	strh	r1, [r0, #12]
 800691a:	6643      	str	r3, [r0, #100]	; 0x64
 800691c:	81c2      	strh	r2, [r0, #14]
 800691e:	6183      	str	r3, [r0, #24]
 8006920:	4619      	mov	r1, r3
 8006922:	2208      	movs	r2, #8
 8006924:	305c      	adds	r0, #92	; 0x5c
 8006926:	f000 fa17 	bl	8006d58 <memset>
 800692a:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <std+0x58>)
 800692c:	6263      	str	r3, [r4, #36]	; 0x24
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <std+0x5c>)
 8006930:	62a3      	str	r3, [r4, #40]	; 0x28
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <std+0x60>)
 8006934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <std+0x64>)
 8006938:	6323      	str	r3, [r4, #48]	; 0x30
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <std+0x68>)
 800693c:	6224      	str	r4, [r4, #32]
 800693e:	429c      	cmp	r4, r3
 8006940:	d006      	beq.n	8006950 <std+0x48>
 8006942:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006946:	4294      	cmp	r4, r2
 8006948:	d002      	beq.n	8006950 <std+0x48>
 800694a:	33d0      	adds	r3, #208	; 0xd0
 800694c:	429c      	cmp	r4, r3
 800694e:	d105      	bne.n	800695c <std+0x54>
 8006950:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f000 ba76 	b.w	8006e48 <__retarget_lock_init_recursive>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	bf00      	nop
 8006960:	08006ba9 	.word	0x08006ba9
 8006964:	08006bcb 	.word	0x08006bcb
 8006968:	08006c03 	.word	0x08006c03
 800696c:	08006c27 	.word	0x08006c27
 8006970:	20025b08 	.word	0x20025b08

08006974 <stdio_exit_handler>:
 8006974:	4a02      	ldr	r2, [pc, #8]	; (8006980 <stdio_exit_handler+0xc>)
 8006976:	4903      	ldr	r1, [pc, #12]	; (8006984 <stdio_exit_handler+0x10>)
 8006978:	4803      	ldr	r0, [pc, #12]	; (8006988 <stdio_exit_handler+0x14>)
 800697a:	f000 b869 	b.w	8006a50 <_fwalk_sglue>
 800697e:	bf00      	nop
 8006980:	2000002c 	.word	0x2000002c
 8006984:	080079a5 	.word	0x080079a5
 8006988:	20000038 	.word	0x20000038

0800698c <cleanup_stdio>:
 800698c:	6841      	ldr	r1, [r0, #4]
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <cleanup_stdio+0x34>)
 8006990:	4299      	cmp	r1, r3
 8006992:	b510      	push	{r4, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	d001      	beq.n	800699c <cleanup_stdio+0x10>
 8006998:	f001 f804 	bl	80079a4 <_fflush_r>
 800699c:	68a1      	ldr	r1, [r4, #8]
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <cleanup_stdio+0x38>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <cleanup_stdio+0x1e>
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 fffd 	bl	80079a4 <_fflush_r>
 80069aa:	68e1      	ldr	r1, [r4, #12]
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <cleanup_stdio+0x3c>)
 80069ae:	4299      	cmp	r1, r3
 80069b0:	d004      	beq.n	80069bc <cleanup_stdio+0x30>
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b8:	f000 bff4 	b.w	80079a4 <_fflush_r>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	bf00      	nop
 80069c0:	20025b08 	.word	0x20025b08
 80069c4:	20025b70 	.word	0x20025b70
 80069c8:	20025bd8 	.word	0x20025bd8

080069cc <global_stdio_init.part.0>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <global_stdio_init.part.0+0x30>)
 80069d0:	4c0b      	ldr	r4, [pc, #44]	; (8006a00 <global_stdio_init.part.0+0x34>)
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <global_stdio_init.part.0+0x38>)
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	4620      	mov	r0, r4
 80069d8:	2200      	movs	r2, #0
 80069da:	2104      	movs	r1, #4
 80069dc:	f7ff ff94 	bl	8006908 <std>
 80069e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80069e4:	2201      	movs	r2, #1
 80069e6:	2109      	movs	r1, #9
 80069e8:	f7ff ff8e 	bl	8006908 <std>
 80069ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80069f0:	2202      	movs	r2, #2
 80069f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f6:	2112      	movs	r1, #18
 80069f8:	f7ff bf86 	b.w	8006908 <std>
 80069fc:	20025c40 	.word	0x20025c40
 8006a00:	20025b08 	.word	0x20025b08
 8006a04:	08006975 	.word	0x08006975

08006a08 <__sfp_lock_acquire>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__sfp_lock_acquire+0x8>)
 8006a0a:	f000 ba1e 	b.w	8006e4a <__retarget_lock_acquire_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20025c49 	.word	0x20025c49

08006a14 <__sfp_lock_release>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__sfp_lock_release+0x8>)
 8006a16:	f000 ba19 	b.w	8006e4c <__retarget_lock_release_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	20025c49 	.word	0x20025c49

08006a20 <__sinit>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	4604      	mov	r4, r0
 8006a24:	f7ff fff0 	bl	8006a08 <__sfp_lock_acquire>
 8006a28:	6a23      	ldr	r3, [r4, #32]
 8006a2a:	b11b      	cbz	r3, 8006a34 <__sinit+0x14>
 8006a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a30:	f7ff bff0 	b.w	8006a14 <__sfp_lock_release>
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <__sinit+0x28>)
 8006a36:	6223      	str	r3, [r4, #32]
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <__sinit+0x2c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f5      	bne.n	8006a2c <__sinit+0xc>
 8006a40:	f7ff ffc4 	bl	80069cc <global_stdio_init.part.0>
 8006a44:	e7f2      	b.n	8006a2c <__sinit+0xc>
 8006a46:	bf00      	nop
 8006a48:	0800698d 	.word	0x0800698d
 8006a4c:	20025c40 	.word	0x20025c40

08006a50 <_fwalk_sglue>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	4607      	mov	r7, r0
 8006a56:	4688      	mov	r8, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a60:	f1b9 0901 	subs.w	r9, r9, #1
 8006a64:	d505      	bpl.n	8006a72 <_fwalk_sglue+0x22>
 8006a66:	6824      	ldr	r4, [r4, #0]
 8006a68:	2c00      	cmp	r4, #0
 8006a6a:	d1f7      	bne.n	8006a5c <_fwalk_sglue+0xc>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a72:	89ab      	ldrh	r3, [r5, #12]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d907      	bls.n	8006a88 <_fwalk_sglue+0x38>
 8006a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	d003      	beq.n	8006a88 <_fwalk_sglue+0x38>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	4306      	orrs	r6, r0
 8006a88:	3568      	adds	r5, #104	; 0x68
 8006a8a:	e7e9      	b.n	8006a60 <_fwalk_sglue+0x10>

08006a8c <iprintf>:
 8006a8c:	b40f      	push	{r0, r1, r2, r3}
 8006a8e:	b507      	push	{r0, r1, r2, lr}
 8006a90:	4906      	ldr	r1, [pc, #24]	; (8006aac <iprintf+0x20>)
 8006a92:	ab04      	add	r3, sp, #16
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	6881      	ldr	r1, [r0, #8]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	f000 fc51 	bl	8007344 <_vfiprintf_r>
 8006aa2:	b003      	add	sp, #12
 8006aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa8:	b004      	add	sp, #16
 8006aaa:	4770      	bx	lr
 8006aac:	20000084 	.word	0x20000084

08006ab0 <_puts_r>:
 8006ab0:	6a03      	ldr	r3, [r0, #32]
 8006ab2:	b570      	push	{r4, r5, r6, lr}
 8006ab4:	6884      	ldr	r4, [r0, #8]
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	460e      	mov	r6, r1
 8006aba:	b90b      	cbnz	r3, 8006ac0 <_puts_r+0x10>
 8006abc:	f7ff ffb0 	bl	8006a20 <__sinit>
 8006ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac2:	07db      	lsls	r3, r3, #31
 8006ac4:	d405      	bmi.n	8006ad2 <_puts_r+0x22>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0598      	lsls	r0, r3, #22
 8006aca:	d402      	bmi.n	8006ad2 <_puts_r+0x22>
 8006acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ace:	f000 f9bc 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	0719      	lsls	r1, r3, #28
 8006ad6:	d513      	bpl.n	8006b00 <_puts_r+0x50>
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	b18b      	cbz	r3, 8006b00 <_puts_r+0x50>
 8006adc:	3e01      	subs	r6, #1
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	b9e9      	cbnz	r1, 8006b26 <_puts_r+0x76>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da2e      	bge.n	8006b4c <_puts_r+0x9c>
 8006aee:	4622      	mov	r2, r4
 8006af0:	210a      	movs	r1, #10
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 f89b 	bl	8006c2e <__swbuf_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d007      	beq.n	8006b0c <_puts_r+0x5c>
 8006afc:	250a      	movs	r5, #10
 8006afe:	e007      	b.n	8006b10 <_puts_r+0x60>
 8006b00:	4621      	mov	r1, r4
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f8d0 	bl	8006ca8 <__swsetup_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d0e7      	beq.n	8006adc <_puts_r+0x2c>
 8006b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b12:	07da      	lsls	r2, r3, #31
 8006b14:	d405      	bmi.n	8006b22 <_puts_r+0x72>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	059b      	lsls	r3, r3, #22
 8006b1a:	d402      	bmi.n	8006b22 <_puts_r+0x72>
 8006b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b1e:	f000 f995 	bl	8006e4c <__retarget_lock_release_recursive>
 8006b22:	4628      	mov	r0, r5
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	da04      	bge.n	8006b34 <_puts_r+0x84>
 8006b2a:	69a2      	ldr	r2, [r4, #24]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	dc06      	bgt.n	8006b3e <_puts_r+0x8e>
 8006b30:	290a      	cmp	r1, #10
 8006b32:	d004      	beq.n	8006b3e <_puts_r+0x8e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	7019      	strb	r1, [r3, #0]
 8006b3c:	e7cf      	b.n	8006ade <_puts_r+0x2e>
 8006b3e:	4622      	mov	r2, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 f874 	bl	8006c2e <__swbuf_r>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d1c9      	bne.n	8006ade <_puts_r+0x2e>
 8006b4a:	e7df      	b.n	8006b0c <_puts_r+0x5c>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	250a      	movs	r5, #10
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	701d      	strb	r5, [r3, #0]
 8006b56:	e7db      	b.n	8006b10 <_puts_r+0x60>

08006b58 <puts>:
 8006b58:	4b02      	ldr	r3, [pc, #8]	; (8006b64 <puts+0xc>)
 8006b5a:	4601      	mov	r1, r0
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	f7ff bfa7 	b.w	8006ab0 <_puts_r>
 8006b62:	bf00      	nop
 8006b64:	20000084 	.word	0x20000084

08006b68 <siprintf>:
 8006b68:	b40e      	push	{r1, r2, r3}
 8006b6a:	b500      	push	{lr}
 8006b6c:	b09c      	sub	sp, #112	; 0x70
 8006b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b70:	9002      	str	r0, [sp, #8]
 8006b72:	9006      	str	r0, [sp, #24]
 8006b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b78:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <siprintf+0x38>)
 8006b7a:	9107      	str	r1, [sp, #28]
 8006b7c:	9104      	str	r1, [sp, #16]
 8006b7e:	4909      	ldr	r1, [pc, #36]	; (8006ba4 <siprintf+0x3c>)
 8006b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b84:	9105      	str	r1, [sp, #20]
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	a902      	add	r1, sp, #8
 8006b8c:	f000 fab2 	bl	80070f4 <_svfiprintf_r>
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	b01c      	add	sp, #112	; 0x70
 8006b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b9c:	b003      	add	sp, #12
 8006b9e:	4770      	bx	lr
 8006ba0:	20000084 	.word	0x20000084
 8006ba4:	ffff0208 	.word	0xffff0208

08006ba8 <__sread>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	f000 f8fc 	bl	8006dac <_read_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfab      	itete	ge
 8006bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrhlt	r3, [r4, #12]
 8006bbc:	181b      	addge	r3, r3, r0
 8006bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bc2:	bfac      	ite	ge
 8006bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc6:	81a3      	strhlt	r3, [r4, #12]
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <__swrite>:
 8006bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	461f      	mov	r7, r3
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	05db      	lsls	r3, r3, #23
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4616      	mov	r6, r2
 8006bda:	d505      	bpl.n	8006be8 <__swrite+0x1e>
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2302      	movs	r3, #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	f000 f8d0 	bl	8006d88 <_lseek_r>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f000 b8e7 	b.w	8006dd0 <_write_r>

08006c02 <__sseek>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 f8bd 	bl	8006d88 <_lseek_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	bf15      	itete	ne
 8006c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strheq	r3, [r4, #12]
 8006c20:	bf18      	it	ne
 8006c22:	81a3      	strhne	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__sclose>:
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 b89d 	b.w	8006d68 <_close_r>

08006c2e <__swbuf_r>:
 8006c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c30:	460e      	mov	r6, r1
 8006c32:	4614      	mov	r4, r2
 8006c34:	4605      	mov	r5, r0
 8006c36:	b118      	cbz	r0, 8006c40 <__swbuf_r+0x12>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	b90b      	cbnz	r3, 8006c40 <__swbuf_r+0x12>
 8006c3c:	f7ff fef0 	bl	8006a20 <__sinit>
 8006c40:	69a3      	ldr	r3, [r4, #24]
 8006c42:	60a3      	str	r3, [r4, #8]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	071a      	lsls	r2, r3, #28
 8006c48:	d525      	bpl.n	8006c96 <__swbuf_r+0x68>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b31b      	cbz	r3, 8006c96 <__swbuf_r+0x68>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	6922      	ldr	r2, [r4, #16]
 8006c52:	1a98      	subs	r0, r3, r2
 8006c54:	6963      	ldr	r3, [r4, #20]
 8006c56:	b2f6      	uxtb	r6, r6
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	4637      	mov	r7, r6
 8006c5c:	dc04      	bgt.n	8006c68 <__swbuf_r+0x3a>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fe9f 	bl	80079a4 <_fflush_r>
 8006c66:	b9e0      	cbnz	r0, 8006ca2 <__swbuf_r+0x74>
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	701e      	strb	r6, [r3, #0]
 8006c76:	6962      	ldr	r2, [r4, #20]
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d004      	beq.n	8006c88 <__swbuf_r+0x5a>
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	07db      	lsls	r3, r3, #31
 8006c82:	d506      	bpl.n	8006c92 <__swbuf_r+0x64>
 8006c84:	2e0a      	cmp	r6, #10
 8006c86:	d104      	bne.n	8006c92 <__swbuf_r+0x64>
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fe8a 	bl	80079a4 <_fflush_r>
 8006c90:	b938      	cbnz	r0, 8006ca2 <__swbuf_r+0x74>
 8006c92:	4638      	mov	r0, r7
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 f805 	bl	8006ca8 <__swsetup_r>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0d5      	beq.n	8006c4e <__swbuf_r+0x20>
 8006ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ca6:	e7f4      	b.n	8006c92 <__swbuf_r+0x64>

08006ca8 <__swsetup_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <__swsetup_r+0xac>)
 8006cac:	4605      	mov	r5, r0
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	b118      	cbz	r0, 8006cbc <__swsetup_r+0x14>
 8006cb4:	6a03      	ldr	r3, [r0, #32]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <__swsetup_r+0x14>
 8006cb8:	f7ff feb2 	bl	8006a20 <__sinit>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc2:	0718      	lsls	r0, r3, #28
 8006cc4:	d422      	bmi.n	8006d0c <__swsetup_r+0x64>
 8006cc6:	06d9      	lsls	r1, r3, #27
 8006cc8:	d407      	bmi.n	8006cda <__swsetup_r+0x32>
 8006cca:	2309      	movs	r3, #9
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	e034      	b.n	8006d44 <__swsetup_r+0x9c>
 8006cda:	0758      	lsls	r0, r3, #29
 8006cdc:	d512      	bpl.n	8006d04 <__swsetup_r+0x5c>
 8006cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce0:	b141      	cbz	r1, 8006cf4 <__swsetup_r+0x4c>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__swsetup_r+0x48>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 f8b0 	bl	8006e50 <_free_r>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f043 0308 	orr.w	r3, r3, #8
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	b94b      	cbnz	r3, 8006d24 <__swsetup_r+0x7c>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1a:	d003      	beq.n	8006d24 <__swsetup_r+0x7c>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 fe8e 	bl	8007a40 <__smakebuf_r>
 8006d24:	89a0      	ldrh	r0, [r4, #12]
 8006d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d2a:	f010 0301 	ands.w	r3, r0, #1
 8006d2e:	d00a      	beq.n	8006d46 <__swsetup_r+0x9e>
 8006d30:	2300      	movs	r3, #0
 8006d32:	60a3      	str	r3, [r4, #8]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	425b      	negs	r3, r3
 8006d38:	61a3      	str	r3, [r4, #24]
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	b943      	cbnz	r3, 8006d50 <__swsetup_r+0xa8>
 8006d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d42:	d1c4      	bne.n	8006cce <__swsetup_r+0x26>
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	0781      	lsls	r1, r0, #30
 8006d48:	bf58      	it	pl
 8006d4a:	6963      	ldrpl	r3, [r4, #20]
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	e7f4      	b.n	8006d3a <__swsetup_r+0x92>
 8006d50:	2000      	movs	r0, #0
 8006d52:	e7f7      	b.n	8006d44 <__swsetup_r+0x9c>
 8006d54:	20000084 	.word	0x20000084

08006d58 <memset>:
 8006d58:	4402      	add	r2, r0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d100      	bne.n	8006d62 <memset+0xa>
 8006d60:	4770      	bx	lr
 8006d62:	f803 1b01 	strb.w	r1, [r3], #1
 8006d66:	e7f9      	b.n	8006d5c <memset+0x4>

08006d68 <_close_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d06      	ldr	r5, [pc, #24]	; (8006d84 <_close_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7ff fbfe 	bl	8006574 <_close>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_close_r+0x1a>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_close_r+0x1a>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20025c44 	.word	0x20025c44

08006d88 <_lseek_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d07      	ldr	r5, [pc, #28]	; (8006da8 <_lseek_r+0x20>)
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	4608      	mov	r0, r1
 8006d90:	4611      	mov	r1, r2
 8006d92:	2200      	movs	r2, #0
 8006d94:	602a      	str	r2, [r5, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f7ff fba9 	bl	80064ee <_lseek>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_lseek_r+0x1e>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_lseek_r+0x1e>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20025c44 	.word	0x20025c44

08006dac <_read_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_read_r+0x20>)
 8006db0:	4604      	mov	r4, r0
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f7ff fb3f 	bl	800643e <_read>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_read_r+0x1e>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_read_r+0x1e>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20025c44 	.word	0x20025c44

08006dd0 <_write_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d07      	ldr	r5, [pc, #28]	; (8006df0 <_write_r+0x20>)
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	4611      	mov	r1, r2
 8006dda:	2200      	movs	r2, #0
 8006ddc:	602a      	str	r2, [r5, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f7ff fb97 	bl	8006512 <_write>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_write_r+0x1e>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_write_r+0x1e>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	20025c44 	.word	0x20025c44

08006df4 <__errno>:
 8006df4:	4b01      	ldr	r3, [pc, #4]	; (8006dfc <__errno+0x8>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000084 	.word	0x20000084

08006e00 <__libc_init_array>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4d0d      	ldr	r5, [pc, #52]	; (8006e38 <__libc_init_array+0x38>)
 8006e04:	4c0d      	ldr	r4, [pc, #52]	; (8006e3c <__libc_init_array+0x3c>)
 8006e06:	1b64      	subs	r4, r4, r5
 8006e08:	10a4      	asrs	r4, r4, #2
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	42a6      	cmp	r6, r4
 8006e0e:	d109      	bne.n	8006e24 <__libc_init_array+0x24>
 8006e10:	4d0b      	ldr	r5, [pc, #44]	; (8006e40 <__libc_init_array+0x40>)
 8006e12:	4c0c      	ldr	r4, [pc, #48]	; (8006e44 <__libc_init_array+0x44>)
 8006e14:	f000 fee2 	bl	8007bdc <_init>
 8006e18:	1b64      	subs	r4, r4, r5
 8006e1a:	10a4      	asrs	r4, r4, #2
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	42a6      	cmp	r6, r4
 8006e20:	d105      	bne.n	8006e2e <__libc_init_array+0x2e>
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e28:	4798      	blx	r3
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	e7ee      	b.n	8006e0c <__libc_init_array+0xc>
 8006e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e32:	4798      	blx	r3
 8006e34:	3601      	adds	r6, #1
 8006e36:	e7f2      	b.n	8006e1e <__libc_init_array+0x1e>
 8006e38:	08009828 	.word	0x08009828
 8006e3c:	08009828 	.word	0x08009828
 8006e40:	08009828 	.word	0x08009828
 8006e44:	0800982c 	.word	0x0800982c

08006e48 <__retarget_lock_init_recursive>:
 8006e48:	4770      	bx	lr

08006e4a <__retarget_lock_acquire_recursive>:
 8006e4a:	4770      	bx	lr

08006e4c <__retarget_lock_release_recursive>:
 8006e4c:	4770      	bx	lr
	...

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d044      	beq.n	8006ee0 <_free_r+0x90>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f000 f8df 	bl	8007028 <__malloc_lock>
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <_free_r+0x94>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x30>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	f000 b8da 	b.w	8007034 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x46>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x22>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x50>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x46>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1855      	adds	r5, r2, r1
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x70>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	4421      	add	r1, r4
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x26>
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	440c      	add	r4, r1
 8006ebc:	6014      	str	r4, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x26>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x26>
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1949      	addeq	r1, r1, r5
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x26>
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	20025c4c 	.word	0x20025c4c

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 fe1c 	bl	8007b30 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fe17 	bl	8007b30 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 fe0c 	bl	8007b30 <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	20025c50 	.word	0x20025c50

08006f28 <_malloc_r>:
 8006f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007024 <_malloc_r+0xfc>
 8006f54:	f000 f868 	bl	8007028 <__malloc_lock>
 8006f58:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5c:	461c      	mov	r4, r3
 8006f5e:	bb5c      	cbnz	r4, 8006fb8 <_malloc_r+0x90>
 8006f60:	4629      	mov	r1, r5
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff ffc0 	bl	8006ee8 <sbrk_aligned>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	d155      	bne.n	800701a <_malloc_r+0xf2>
 8006f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f72:	4626      	mov	r6, r4
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d145      	bne.n	8007004 <_malloc_r+0xdc>
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d048      	beq.n	800700e <_malloc_r+0xe6>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4638      	mov	r0, r7
 8006f82:	eb04 0903 	add.w	r9, r4, r3
 8006f86:	f000 fdd3 	bl	8007b30 <_sbrk_r>
 8006f8a:	4581      	cmp	r9, r0
 8006f8c:	d13f      	bne.n	800700e <_malloc_r+0xe6>
 8006f8e:	6821      	ldr	r1, [r4, #0]
 8006f90:	1a6d      	subs	r5, r5, r1
 8006f92:	4629      	mov	r1, r5
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7ff ffa7 	bl	8006ee8 <sbrk_aligned>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d037      	beq.n	800700e <_malloc_r+0xe6>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	442b      	add	r3, r5
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d038      	beq.n	800701e <_malloc_r+0xf6>
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	42a2      	cmp	r2, r4
 8006fb0:	d12b      	bne.n	800700a <_malloc_r+0xe2>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	e00f      	b.n	8006fd8 <_malloc_r+0xb0>
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	1b52      	subs	r2, r2, r5
 8006fbc:	d41f      	bmi.n	8006ffe <_malloc_r+0xd6>
 8006fbe:	2a0b      	cmp	r2, #11
 8006fc0:	d917      	bls.n	8006ff2 <_malloc_r+0xca>
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	6025      	str	r5, [r4, #0]
 8006fc8:	bf18      	it	ne
 8006fca:	6059      	strne	r1, [r3, #4]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	bf08      	it	eq
 8006fd0:	f8c8 1000 	streq.w	r1, [r8]
 8006fd4:	5162      	str	r2, [r4, r5]
 8006fd6:	604b      	str	r3, [r1, #4]
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f104 060b 	add.w	r6, r4, #11
 8006fde:	f000 f829 	bl	8007034 <__malloc_unlock>
 8006fe2:	f026 0607 	bic.w	r6, r6, #7
 8006fe6:	1d23      	adds	r3, r4, #4
 8006fe8:	1af2      	subs	r2, r6, r3
 8006fea:	d0ae      	beq.n	8006f4a <_malloc_r+0x22>
 8006fec:	1b9b      	subs	r3, r3, r6
 8006fee:	50a3      	str	r3, [r4, r2]
 8006ff0:	e7ab      	b.n	8006f4a <_malloc_r+0x22>
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	6862      	ldr	r2, [r4, #4]
 8006ff6:	d1dd      	bne.n	8006fb4 <_malloc_r+0x8c>
 8006ff8:	f8c8 2000 	str.w	r2, [r8]
 8006ffc:	e7ec      	b.n	8006fd8 <_malloc_r+0xb0>
 8006ffe:	4623      	mov	r3, r4
 8007000:	6864      	ldr	r4, [r4, #4]
 8007002:	e7ac      	b.n	8006f5e <_malloc_r+0x36>
 8007004:	4634      	mov	r4, r6
 8007006:	6876      	ldr	r6, [r6, #4]
 8007008:	e7b4      	b.n	8006f74 <_malloc_r+0x4c>
 800700a:	4613      	mov	r3, r2
 800700c:	e7cc      	b.n	8006fa8 <_malloc_r+0x80>
 800700e:	230c      	movs	r3, #12
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4638      	mov	r0, r7
 8007014:	f000 f80e 	bl	8007034 <__malloc_unlock>
 8007018:	e797      	b.n	8006f4a <_malloc_r+0x22>
 800701a:	6025      	str	r5, [r4, #0]
 800701c:	e7dc      	b.n	8006fd8 <_malloc_r+0xb0>
 800701e:	605b      	str	r3, [r3, #4]
 8007020:	deff      	udf	#255	; 0xff
 8007022:	bf00      	nop
 8007024:	20025c4c 	.word	0x20025c4c

08007028 <__malloc_lock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_lock+0x8>)
 800702a:	f7ff bf0e 	b.w	8006e4a <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	20025c48 	.word	0x20025c48

08007034 <__malloc_unlock>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__malloc_unlock+0x8>)
 8007036:	f7ff bf09 	b.w	8006e4c <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	20025c48 	.word	0x20025c48

08007040 <__ssputs_r>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	688e      	ldr	r6, [r1, #8]
 8007046:	461f      	mov	r7, r3
 8007048:	42be      	cmp	r6, r7
 800704a:	680b      	ldr	r3, [r1, #0]
 800704c:	4682      	mov	sl, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4690      	mov	r8, r2
 8007052:	d82c      	bhi.n	80070ae <__ssputs_r+0x6e>
 8007054:	898a      	ldrh	r2, [r1, #12]
 8007056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800705a:	d026      	beq.n	80070aa <__ssputs_r+0x6a>
 800705c:	6965      	ldr	r5, [r4, #20]
 800705e:	6909      	ldr	r1, [r1, #16]
 8007060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007064:	eba3 0901 	sub.w	r9, r3, r1
 8007068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800706c:	1c7b      	adds	r3, r7, #1
 800706e:	444b      	add	r3, r9
 8007070:	106d      	asrs	r5, r5, #1
 8007072:	429d      	cmp	r5, r3
 8007074:	bf38      	it	cc
 8007076:	461d      	movcc	r5, r3
 8007078:	0553      	lsls	r3, r2, #21
 800707a:	d527      	bpl.n	80070cc <__ssputs_r+0x8c>
 800707c:	4629      	mov	r1, r5
 800707e:	f7ff ff53 	bl	8006f28 <_malloc_r>
 8007082:	4606      	mov	r6, r0
 8007084:	b360      	cbz	r0, 80070e0 <__ssputs_r+0xa0>
 8007086:	6921      	ldr	r1, [r4, #16]
 8007088:	464a      	mov	r2, r9
 800708a:	f000 fd61 	bl	8007b50 <memcpy>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	6126      	str	r6, [r4, #16]
 800709c:	6165      	str	r5, [r4, #20]
 800709e:	444e      	add	r6, r9
 80070a0:	eba5 0509 	sub.w	r5, r5, r9
 80070a4:	6026      	str	r6, [r4, #0]
 80070a6:	60a5      	str	r5, [r4, #8]
 80070a8:	463e      	mov	r6, r7
 80070aa:	42be      	cmp	r6, r7
 80070ac:	d900      	bls.n	80070b0 <__ssputs_r+0x70>
 80070ae:	463e      	mov	r6, r7
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	4632      	mov	r2, r6
 80070b4:	4641      	mov	r1, r8
 80070b6:	f000 fcff 	bl	8007ab8 <memmove>
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	1b9b      	subs	r3, r3, r6
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	4433      	add	r3, r6
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	2000      	movs	r0, #0
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	462a      	mov	r2, r5
 80070ce:	f000 fd4d 	bl	8007b6c <_realloc_r>
 80070d2:	4606      	mov	r6, r0
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d1e0      	bne.n	800709a <__ssputs_r+0x5a>
 80070d8:	6921      	ldr	r1, [r4, #16]
 80070da:	4650      	mov	r0, sl
 80070dc:	f7ff feb8 	bl	8006e50 <_free_r>
 80070e0:	230c      	movs	r3, #12
 80070e2:	f8ca 3000 	str.w	r3, [sl]
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	e7e9      	b.n	80070c8 <__ssputs_r+0x88>

080070f4 <_svfiprintf_r>:
 80070f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	4698      	mov	r8, r3
 80070fa:	898b      	ldrh	r3, [r1, #12]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	b09d      	sub	sp, #116	; 0x74
 8007100:	4607      	mov	r7, r0
 8007102:	460d      	mov	r5, r1
 8007104:	4614      	mov	r4, r2
 8007106:	d50e      	bpl.n	8007126 <_svfiprintf_r+0x32>
 8007108:	690b      	ldr	r3, [r1, #16]
 800710a:	b963      	cbnz	r3, 8007126 <_svfiprintf_r+0x32>
 800710c:	2140      	movs	r1, #64	; 0x40
 800710e:	f7ff ff0b 	bl	8006f28 <_malloc_r>
 8007112:	6028      	str	r0, [r5, #0]
 8007114:	6128      	str	r0, [r5, #16]
 8007116:	b920      	cbnz	r0, 8007122 <_svfiprintf_r+0x2e>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e0d0      	b.n	80072c4 <_svfiprintf_r+0x1d0>
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	616b      	str	r3, [r5, #20]
 8007126:	2300      	movs	r3, #0
 8007128:	9309      	str	r3, [sp, #36]	; 0x24
 800712a:	2320      	movs	r3, #32
 800712c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007130:	f8cd 800c 	str.w	r8, [sp, #12]
 8007134:	2330      	movs	r3, #48	; 0x30
 8007136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072dc <_svfiprintf_r+0x1e8>
 800713a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713e:	f04f 0901 	mov.w	r9, #1
 8007142:	4623      	mov	r3, r4
 8007144:	469a      	mov	sl, r3
 8007146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800714a:	b10a      	cbz	r2, 8007150 <_svfiprintf_r+0x5c>
 800714c:	2a25      	cmp	r2, #37	; 0x25
 800714e:	d1f9      	bne.n	8007144 <_svfiprintf_r+0x50>
 8007150:	ebba 0b04 	subs.w	fp, sl, r4
 8007154:	d00b      	beq.n	800716e <_svfiprintf_r+0x7a>
 8007156:	465b      	mov	r3, fp
 8007158:	4622      	mov	r2, r4
 800715a:	4629      	mov	r1, r5
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff ff6f 	bl	8007040 <__ssputs_r>
 8007162:	3001      	adds	r0, #1
 8007164:	f000 80a9 	beq.w	80072ba <_svfiprintf_r+0x1c6>
 8007168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716a:	445a      	add	r2, fp
 800716c:	9209      	str	r2, [sp, #36]	; 0x24
 800716e:	f89a 3000 	ldrb.w	r3, [sl]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a1 	beq.w	80072ba <_svfiprintf_r+0x1c6>
 8007178:	2300      	movs	r3, #0
 800717a:	f04f 32ff 	mov.w	r2, #4294967295
 800717e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007182:	f10a 0a01 	add.w	sl, sl, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	9307      	str	r3, [sp, #28]
 800718a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718e:	931a      	str	r3, [sp, #104]	; 0x68
 8007190:	4654      	mov	r4, sl
 8007192:	2205      	movs	r2, #5
 8007194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007198:	4850      	ldr	r0, [pc, #320]	; (80072dc <_svfiprintf_r+0x1e8>)
 800719a:	f7f9 f831 	bl	8000200 <memchr>
 800719e:	9a04      	ldr	r2, [sp, #16]
 80071a0:	b9d8      	cbnz	r0, 80071da <_svfiprintf_r+0xe6>
 80071a2:	06d0      	lsls	r0, r2, #27
 80071a4:	bf44      	itt	mi
 80071a6:	2320      	movmi	r3, #32
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ac:	0711      	lsls	r1, r2, #28
 80071ae:	bf44      	itt	mi
 80071b0:	232b      	movmi	r3, #43	; 0x2b
 80071b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ba:	2b2a      	cmp	r3, #42	; 0x2a
 80071bc:	d015      	beq.n	80071ea <_svfiprintf_r+0xf6>
 80071be:	9a07      	ldr	r2, [sp, #28]
 80071c0:	4654      	mov	r4, sl
 80071c2:	2000      	movs	r0, #0
 80071c4:	f04f 0c0a 	mov.w	ip, #10
 80071c8:	4621      	mov	r1, r4
 80071ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ce:	3b30      	subs	r3, #48	; 0x30
 80071d0:	2b09      	cmp	r3, #9
 80071d2:	d94d      	bls.n	8007270 <_svfiprintf_r+0x17c>
 80071d4:	b1b0      	cbz	r0, 8007204 <_svfiprintf_r+0x110>
 80071d6:	9207      	str	r2, [sp, #28]
 80071d8:	e014      	b.n	8007204 <_svfiprintf_r+0x110>
 80071da:	eba0 0308 	sub.w	r3, r0, r8
 80071de:	fa09 f303 	lsl.w	r3, r9, r3
 80071e2:	4313      	orrs	r3, r2
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	46a2      	mov	sl, r4
 80071e8:	e7d2      	b.n	8007190 <_svfiprintf_r+0x9c>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	1d19      	adds	r1, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9103      	str	r1, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfbb      	ittet	lt
 80071f6:	425b      	neglt	r3, r3
 80071f8:	f042 0202 	orrlt.w	r2, r2, #2
 80071fc:	9307      	strge	r3, [sp, #28]
 80071fe:	9307      	strlt	r3, [sp, #28]
 8007200:	bfb8      	it	lt
 8007202:	9204      	strlt	r2, [sp, #16]
 8007204:	7823      	ldrb	r3, [r4, #0]
 8007206:	2b2e      	cmp	r3, #46	; 0x2e
 8007208:	d10c      	bne.n	8007224 <_svfiprintf_r+0x130>
 800720a:	7863      	ldrb	r3, [r4, #1]
 800720c:	2b2a      	cmp	r3, #42	; 0x2a
 800720e:	d134      	bne.n	800727a <_svfiprintf_r+0x186>
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	9203      	str	r2, [sp, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfb8      	it	lt
 800721c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007220:	3402      	adds	r4, #2
 8007222:	9305      	str	r3, [sp, #20]
 8007224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072ec <_svfiprintf_r+0x1f8>
 8007228:	7821      	ldrb	r1, [r4, #0]
 800722a:	2203      	movs	r2, #3
 800722c:	4650      	mov	r0, sl
 800722e:	f7f8 ffe7 	bl	8000200 <memchr>
 8007232:	b138      	cbz	r0, 8007244 <_svfiprintf_r+0x150>
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	eba0 000a 	sub.w	r0, r0, sl
 800723a:	2240      	movs	r2, #64	; 0x40
 800723c:	4082      	lsls	r2, r0
 800723e:	4313      	orrs	r3, r2
 8007240:	3401      	adds	r4, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	4825      	ldr	r0, [pc, #148]	; (80072e0 <_svfiprintf_r+0x1ec>)
 800724a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724e:	2206      	movs	r2, #6
 8007250:	f7f8 ffd6 	bl	8000200 <memchr>
 8007254:	2800      	cmp	r0, #0
 8007256:	d038      	beq.n	80072ca <_svfiprintf_r+0x1d6>
 8007258:	4b22      	ldr	r3, [pc, #136]	; (80072e4 <_svfiprintf_r+0x1f0>)
 800725a:	bb1b      	cbnz	r3, 80072a4 <_svfiprintf_r+0x1b0>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	3307      	adds	r3, #7
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	4433      	add	r3, r6
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	e768      	b.n	8007142 <_svfiprintf_r+0x4e>
 8007270:	fb0c 3202 	mla	r2, ip, r2, r3
 8007274:	460c      	mov	r4, r1
 8007276:	2001      	movs	r0, #1
 8007278:	e7a6      	b.n	80071c8 <_svfiprintf_r+0xd4>
 800727a:	2300      	movs	r3, #0
 800727c:	3401      	adds	r4, #1
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	4619      	mov	r1, r3
 8007282:	f04f 0c0a 	mov.w	ip, #10
 8007286:	4620      	mov	r0, r4
 8007288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728c:	3a30      	subs	r2, #48	; 0x30
 800728e:	2a09      	cmp	r2, #9
 8007290:	d903      	bls.n	800729a <_svfiprintf_r+0x1a6>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c6      	beq.n	8007224 <_svfiprintf_r+0x130>
 8007296:	9105      	str	r1, [sp, #20]
 8007298:	e7c4      	b.n	8007224 <_svfiprintf_r+0x130>
 800729a:	fb0c 2101 	mla	r1, ip, r1, r2
 800729e:	4604      	mov	r4, r0
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7f0      	b.n	8007286 <_svfiprintf_r+0x192>
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <_svfiprintf_r+0x1f4>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4638      	mov	r0, r7
 80072b0:	f3af 8000 	nop.w
 80072b4:	1c42      	adds	r2, r0, #1
 80072b6:	4606      	mov	r6, r0
 80072b8:	d1d6      	bne.n	8007268 <_svfiprintf_r+0x174>
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	065b      	lsls	r3, r3, #25
 80072be:	f53f af2d 	bmi.w	800711c <_svfiprintf_r+0x28>
 80072c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c4:	b01d      	add	sp, #116	; 0x74
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	462a      	mov	r2, r5
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <_svfiprintf_r+0x1f4>)
 80072d2:	a904      	add	r1, sp, #16
 80072d4:	4638      	mov	r0, r7
 80072d6:	f000 f9bd 	bl	8007654 <_printf_i>
 80072da:	e7eb      	b.n	80072b4 <_svfiprintf_r+0x1c0>
 80072dc:	080097ea 	.word	0x080097ea
 80072e0:	080097f4 	.word	0x080097f4
 80072e4:	00000000 	.word	0x00000000
 80072e8:	08007041 	.word	0x08007041
 80072ec:	080097f0 	.word	0x080097f0

080072f0 <__sfputc_r>:
 80072f0:	6893      	ldr	r3, [r2, #8]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	b410      	push	{r4}
 80072f8:	6093      	str	r3, [r2, #8]
 80072fa:	da08      	bge.n	800730e <__sfputc_r+0x1e>
 80072fc:	6994      	ldr	r4, [r2, #24]
 80072fe:	42a3      	cmp	r3, r4
 8007300:	db01      	blt.n	8007306 <__sfputc_r+0x16>
 8007302:	290a      	cmp	r1, #10
 8007304:	d103      	bne.n	800730e <__sfputc_r+0x1e>
 8007306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800730a:	f7ff bc90 	b.w	8006c2e <__swbuf_r>
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	1c58      	adds	r0, r3, #1
 8007312:	6010      	str	r0, [r2, #0]
 8007314:	7019      	strb	r1, [r3, #0]
 8007316:	4608      	mov	r0, r1
 8007318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800731c:	4770      	bx	lr

0800731e <__sfputs_r>:
 800731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	4614      	mov	r4, r2
 8007326:	18d5      	adds	r5, r2, r3
 8007328:	42ac      	cmp	r4, r5
 800732a:	d101      	bne.n	8007330 <__sfputs_r+0x12>
 800732c:	2000      	movs	r0, #0
 800732e:	e007      	b.n	8007340 <__sfputs_r+0x22>
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	463a      	mov	r2, r7
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ffda 	bl	80072f0 <__sfputc_r>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d1f3      	bne.n	8007328 <__sfputs_r+0xa>
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007344 <_vfiprintf_r>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	460d      	mov	r5, r1
 800734a:	b09d      	sub	sp, #116	; 0x74
 800734c:	4614      	mov	r4, r2
 800734e:	4698      	mov	r8, r3
 8007350:	4606      	mov	r6, r0
 8007352:	b118      	cbz	r0, 800735c <_vfiprintf_r+0x18>
 8007354:	6a03      	ldr	r3, [r0, #32]
 8007356:	b90b      	cbnz	r3, 800735c <_vfiprintf_r+0x18>
 8007358:	f7ff fb62 	bl	8006a20 <__sinit>
 800735c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735e:	07d9      	lsls	r1, r3, #31
 8007360:	d405      	bmi.n	800736e <_vfiprintf_r+0x2a>
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	059a      	lsls	r2, r3, #22
 8007366:	d402      	bmi.n	800736e <_vfiprintf_r+0x2a>
 8007368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800736a:	f7ff fd6e 	bl	8006e4a <__retarget_lock_acquire_recursive>
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	071b      	lsls	r3, r3, #28
 8007372:	d501      	bpl.n	8007378 <_vfiprintf_r+0x34>
 8007374:	692b      	ldr	r3, [r5, #16]
 8007376:	b99b      	cbnz	r3, 80073a0 <_vfiprintf_r+0x5c>
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff fc94 	bl	8006ca8 <__swsetup_r>
 8007380:	b170      	cbz	r0, 80073a0 <_vfiprintf_r+0x5c>
 8007382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007384:	07dc      	lsls	r4, r3, #31
 8007386:	d504      	bpl.n	8007392 <_vfiprintf_r+0x4e>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b01d      	add	sp, #116	; 0x74
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	0598      	lsls	r0, r3, #22
 8007396:	d4f7      	bmi.n	8007388 <_vfiprintf_r+0x44>
 8007398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800739a:	f7ff fd57 	bl	8006e4c <__retarget_lock_release_recursive>
 800739e:	e7f3      	b.n	8007388 <_vfiprintf_r+0x44>
 80073a0:	2300      	movs	r3, #0
 80073a2:	9309      	str	r3, [sp, #36]	; 0x24
 80073a4:	2320      	movs	r3, #32
 80073a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ae:	2330      	movs	r3, #48	; 0x30
 80073b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007564 <_vfiprintf_r+0x220>
 80073b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073b8:	f04f 0901 	mov.w	r9, #1
 80073bc:	4623      	mov	r3, r4
 80073be:	469a      	mov	sl, r3
 80073c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c4:	b10a      	cbz	r2, 80073ca <_vfiprintf_r+0x86>
 80073c6:	2a25      	cmp	r2, #37	; 0x25
 80073c8:	d1f9      	bne.n	80073be <_vfiprintf_r+0x7a>
 80073ca:	ebba 0b04 	subs.w	fp, sl, r4
 80073ce:	d00b      	beq.n	80073e8 <_vfiprintf_r+0xa4>
 80073d0:	465b      	mov	r3, fp
 80073d2:	4622      	mov	r2, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff ffa1 	bl	800731e <__sfputs_r>
 80073dc:	3001      	adds	r0, #1
 80073de:	f000 80a9 	beq.w	8007534 <_vfiprintf_r+0x1f0>
 80073e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e4:	445a      	add	r2, fp
 80073e6:	9209      	str	r2, [sp, #36]	; 0x24
 80073e8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80a1 	beq.w	8007534 <_vfiprintf_r+0x1f0>
 80073f2:	2300      	movs	r3, #0
 80073f4:	f04f 32ff 	mov.w	r2, #4294967295
 80073f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073fc:	f10a 0a01 	add.w	sl, sl, #1
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	9307      	str	r3, [sp, #28]
 8007404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007408:	931a      	str	r3, [sp, #104]	; 0x68
 800740a:	4654      	mov	r4, sl
 800740c:	2205      	movs	r2, #5
 800740e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007412:	4854      	ldr	r0, [pc, #336]	; (8007564 <_vfiprintf_r+0x220>)
 8007414:	f7f8 fef4 	bl	8000200 <memchr>
 8007418:	9a04      	ldr	r2, [sp, #16]
 800741a:	b9d8      	cbnz	r0, 8007454 <_vfiprintf_r+0x110>
 800741c:	06d1      	lsls	r1, r2, #27
 800741e:	bf44      	itt	mi
 8007420:	2320      	movmi	r3, #32
 8007422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007426:	0713      	lsls	r3, r2, #28
 8007428:	bf44      	itt	mi
 800742a:	232b      	movmi	r3, #43	; 0x2b
 800742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007430:	f89a 3000 	ldrb.w	r3, [sl]
 8007434:	2b2a      	cmp	r3, #42	; 0x2a
 8007436:	d015      	beq.n	8007464 <_vfiprintf_r+0x120>
 8007438:	9a07      	ldr	r2, [sp, #28]
 800743a:	4654      	mov	r4, sl
 800743c:	2000      	movs	r0, #0
 800743e:	f04f 0c0a 	mov.w	ip, #10
 8007442:	4621      	mov	r1, r4
 8007444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007448:	3b30      	subs	r3, #48	; 0x30
 800744a:	2b09      	cmp	r3, #9
 800744c:	d94d      	bls.n	80074ea <_vfiprintf_r+0x1a6>
 800744e:	b1b0      	cbz	r0, 800747e <_vfiprintf_r+0x13a>
 8007450:	9207      	str	r2, [sp, #28]
 8007452:	e014      	b.n	800747e <_vfiprintf_r+0x13a>
 8007454:	eba0 0308 	sub.w	r3, r0, r8
 8007458:	fa09 f303 	lsl.w	r3, r9, r3
 800745c:	4313      	orrs	r3, r2
 800745e:	9304      	str	r3, [sp, #16]
 8007460:	46a2      	mov	sl, r4
 8007462:	e7d2      	b.n	800740a <_vfiprintf_r+0xc6>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	1d19      	adds	r1, r3, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	9103      	str	r1, [sp, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	bfbb      	ittet	lt
 8007470:	425b      	neglt	r3, r3
 8007472:	f042 0202 	orrlt.w	r2, r2, #2
 8007476:	9307      	strge	r3, [sp, #28]
 8007478:	9307      	strlt	r3, [sp, #28]
 800747a:	bfb8      	it	lt
 800747c:	9204      	strlt	r2, [sp, #16]
 800747e:	7823      	ldrb	r3, [r4, #0]
 8007480:	2b2e      	cmp	r3, #46	; 0x2e
 8007482:	d10c      	bne.n	800749e <_vfiprintf_r+0x15a>
 8007484:	7863      	ldrb	r3, [r4, #1]
 8007486:	2b2a      	cmp	r3, #42	; 0x2a
 8007488:	d134      	bne.n	80074f4 <_vfiprintf_r+0x1b0>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	1d1a      	adds	r2, r3, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	9203      	str	r2, [sp, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfb8      	it	lt
 8007496:	f04f 33ff 	movlt.w	r3, #4294967295
 800749a:	3402      	adds	r4, #2
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007574 <_vfiprintf_r+0x230>
 80074a2:	7821      	ldrb	r1, [r4, #0]
 80074a4:	2203      	movs	r2, #3
 80074a6:	4650      	mov	r0, sl
 80074a8:	f7f8 feaa 	bl	8000200 <memchr>
 80074ac:	b138      	cbz	r0, 80074be <_vfiprintf_r+0x17a>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	eba0 000a 	sub.w	r0, r0, sl
 80074b4:	2240      	movs	r2, #64	; 0x40
 80074b6:	4082      	lsls	r2, r0
 80074b8:	4313      	orrs	r3, r2
 80074ba:	3401      	adds	r4, #1
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	4829      	ldr	r0, [pc, #164]	; (8007568 <_vfiprintf_r+0x224>)
 80074c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c8:	2206      	movs	r2, #6
 80074ca:	f7f8 fe99 	bl	8000200 <memchr>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d03f      	beq.n	8007552 <_vfiprintf_r+0x20e>
 80074d2:	4b26      	ldr	r3, [pc, #152]	; (800756c <_vfiprintf_r+0x228>)
 80074d4:	bb1b      	cbnz	r3, 800751e <_vfiprintf_r+0x1da>
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	3307      	adds	r3, #7
 80074da:	f023 0307 	bic.w	r3, r3, #7
 80074de:	3308      	adds	r3, #8
 80074e0:	9303      	str	r3, [sp, #12]
 80074e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e4:	443b      	add	r3, r7
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	e768      	b.n	80073bc <_vfiprintf_r+0x78>
 80074ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ee:	460c      	mov	r4, r1
 80074f0:	2001      	movs	r0, #1
 80074f2:	e7a6      	b.n	8007442 <_vfiprintf_r+0xfe>
 80074f4:	2300      	movs	r3, #0
 80074f6:	3401      	adds	r4, #1
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	4619      	mov	r1, r3
 80074fc:	f04f 0c0a 	mov.w	ip, #10
 8007500:	4620      	mov	r0, r4
 8007502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007506:	3a30      	subs	r2, #48	; 0x30
 8007508:	2a09      	cmp	r2, #9
 800750a:	d903      	bls.n	8007514 <_vfiprintf_r+0x1d0>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0c6      	beq.n	800749e <_vfiprintf_r+0x15a>
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	e7c4      	b.n	800749e <_vfiprintf_r+0x15a>
 8007514:	fb0c 2101 	mla	r1, ip, r1, r2
 8007518:	4604      	mov	r4, r0
 800751a:	2301      	movs	r3, #1
 800751c:	e7f0      	b.n	8007500 <_vfiprintf_r+0x1bc>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <_vfiprintf_r+0x22c>)
 8007526:	a904      	add	r1, sp, #16
 8007528:	4630      	mov	r0, r6
 800752a:	f3af 8000 	nop.w
 800752e:	4607      	mov	r7, r0
 8007530:	1c78      	adds	r0, r7, #1
 8007532:	d1d6      	bne.n	80074e2 <_vfiprintf_r+0x19e>
 8007534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x202>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x202>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f7ff fc83 	bl	8006e4c <__retarget_lock_release_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	065b      	lsls	r3, r3, #25
 800754a:	f53f af1d 	bmi.w	8007388 <_vfiprintf_r+0x44>
 800754e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007550:	e71c      	b.n	800738c <_vfiprintf_r+0x48>
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	462a      	mov	r2, r5
 8007558:	4b05      	ldr	r3, [pc, #20]	; (8007570 <_vfiprintf_r+0x22c>)
 800755a:	a904      	add	r1, sp, #16
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f879 	bl	8007654 <_printf_i>
 8007562:	e7e4      	b.n	800752e <_vfiprintf_r+0x1ea>
 8007564:	080097ea 	.word	0x080097ea
 8007568:	080097f4 	.word	0x080097f4
 800756c:	00000000 	.word	0x00000000
 8007570:	0800731f 	.word	0x0800731f
 8007574:	080097f0 	.word	0x080097f0

08007578 <_printf_common>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	4616      	mov	r6, r2
 800757e:	4699      	mov	r9, r3
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007588:	4293      	cmp	r3, r2
 800758a:	bfb8      	it	lt
 800758c:	4613      	movlt	r3, r2
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007594:	4607      	mov	r7, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b10a      	cbz	r2, 800759e <_printf_common+0x26>
 800759a:	3301      	adds	r3, #1
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0699      	lsls	r1, r3, #26
 80075a2:	bf42      	ittt	mi
 80075a4:	6833      	ldrmi	r3, [r6, #0]
 80075a6:	3302      	addmi	r3, #2
 80075a8:	6033      	strmi	r3, [r6, #0]
 80075aa:	6825      	ldr	r5, [r4, #0]
 80075ac:	f015 0506 	ands.w	r5, r5, #6
 80075b0:	d106      	bne.n	80075c0 <_printf_common+0x48>
 80075b2:	f104 0a19 	add.w	sl, r4, #25
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc26      	bgt.n	800760e <_printf_common+0x96>
 80075c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075c4:	1e13      	subs	r3, r2, #0
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	bf18      	it	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	0692      	lsls	r2, r2, #26
 80075ce:	d42b      	bmi.n	8007628 <_printf_common+0xb0>
 80075d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d4:	4649      	mov	r1, r9
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c0      	blx	r8
 80075da:	3001      	adds	r0, #1
 80075dc:	d01e      	beq.n	800761c <_printf_common+0xa4>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	f003 0306 	and.w	r3, r3, #6
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	bf02      	ittt	eq
 80075ea:	68e5      	ldreq	r5, [r4, #12]
 80075ec:	6833      	ldreq	r3, [r6, #0]
 80075ee:	1aed      	subeq	r5, r5, r3
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	bf0c      	ite	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	2500      	movne	r5, #0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	bfc4      	itt	gt
 80075fe:	1a9b      	subgt	r3, r3, r2
 8007600:	18ed      	addgt	r5, r5, r3
 8007602:	2600      	movs	r6, #0
 8007604:	341a      	adds	r4, #26
 8007606:	42b5      	cmp	r5, r6
 8007608:	d11a      	bne.n	8007640 <_printf_common+0xc8>
 800760a:	2000      	movs	r0, #0
 800760c:	e008      	b.n	8007620 <_printf_common+0xa8>
 800760e:	2301      	movs	r3, #1
 8007610:	4652      	mov	r2, sl
 8007612:	4649      	mov	r1, r9
 8007614:	4638      	mov	r0, r7
 8007616:	47c0      	blx	r8
 8007618:	3001      	adds	r0, #1
 800761a:	d103      	bne.n	8007624 <_printf_common+0xac>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	e7c6      	b.n	80075b6 <_printf_common+0x3e>
 8007628:	18e1      	adds	r1, r4, r3
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	2030      	movs	r0, #48	; 0x30
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007632:	4422      	add	r2, r4
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800763c:	3302      	adds	r3, #2
 800763e:	e7c7      	b.n	80075d0 <_printf_common+0x58>
 8007640:	2301      	movs	r3, #1
 8007642:	4622      	mov	r2, r4
 8007644:	4649      	mov	r1, r9
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	3001      	adds	r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3601      	adds	r6, #1
 8007650:	e7d9      	b.n	8007606 <_printf_common+0x8e>
	...

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800765c:	2f78      	cmp	r7, #120	; 0x78
 800765e:	4691      	mov	r9, r2
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	469a      	mov	sl, r3
 8007666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	; 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d4 	beq.w	800781e <_printf_i+0x1ca>
 8007676:	2f58      	cmp	r7, #88	; 0x58
 8007678:	f000 80c0 	beq.w	80077fc <_printf_i+0x1a8>
 800767c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	; (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	08007805 	.word	0x08007805
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	080077bf 	.word	0x080077bf
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	08007827 	.word	0x08007827
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077c7 	.word	0x080077c7
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	602a      	str	r2, [r5, #0]
 80076f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e09f      	b.n	8007840 <_printf_i+0x1ec>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	682b      	ldr	r3, [r5, #0]
 8007704:	0607      	lsls	r7, r0, #24
 8007706:	f103 0104 	add.w	r1, r3, #4
 800770a:	6029      	str	r1, [r5, #0]
 800770c:	d501      	bpl.n	8007712 <_printf_i+0xbe>
 800770e:	681e      	ldr	r6, [r3, #0]
 8007710:	e003      	b.n	800771a <_printf_i+0xc6>
 8007712:	0646      	lsls	r6, r0, #25
 8007714:	d5fb      	bpl.n	800770e <_printf_i+0xba>
 8007716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800771a:	2e00      	cmp	r6, #0
 800771c:	da03      	bge.n	8007726 <_printf_i+0xd2>
 800771e:	232d      	movs	r3, #45	; 0x2d
 8007720:	4276      	negs	r6, r6
 8007722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007726:	485a      	ldr	r0, [pc, #360]	; (8007890 <_printf_i+0x23c>)
 8007728:	230a      	movs	r3, #10
 800772a:	e012      	b.n	8007752 <_printf_i+0xfe>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	6820      	ldr	r0, [r4, #0]
 8007730:	1d19      	adds	r1, r3, #4
 8007732:	6029      	str	r1, [r5, #0]
 8007734:	0605      	lsls	r5, r0, #24
 8007736:	d501      	bpl.n	800773c <_printf_i+0xe8>
 8007738:	681e      	ldr	r6, [r3, #0]
 800773a:	e002      	b.n	8007742 <_printf_i+0xee>
 800773c:	0641      	lsls	r1, r0, #25
 800773e:	d5fb      	bpl.n	8007738 <_printf_i+0xe4>
 8007740:	881e      	ldrh	r6, [r3, #0]
 8007742:	4853      	ldr	r0, [pc, #332]	; (8007890 <_printf_i+0x23c>)
 8007744:	2f6f      	cmp	r7, #111	; 0x6f
 8007746:	bf0c      	ite	eq
 8007748:	2308      	moveq	r3, #8
 800774a:	230a      	movne	r3, #10
 800774c:	2100      	movs	r1, #0
 800774e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007752:	6865      	ldr	r5, [r4, #4]
 8007754:	60a5      	str	r5, [r4, #8]
 8007756:	2d00      	cmp	r5, #0
 8007758:	bfa2      	ittt	ge
 800775a:	6821      	ldrge	r1, [r4, #0]
 800775c:	f021 0104 	bicge.w	r1, r1, #4
 8007760:	6021      	strge	r1, [r4, #0]
 8007762:	b90e      	cbnz	r6, 8007768 <_printf_i+0x114>
 8007764:	2d00      	cmp	r5, #0
 8007766:	d04b      	beq.n	8007800 <_printf_i+0x1ac>
 8007768:	4615      	mov	r5, r2
 800776a:	fbb6 f1f3 	udiv	r1, r6, r3
 800776e:	fb03 6711 	mls	r7, r3, r1, r6
 8007772:	5dc7      	ldrb	r7, [r0, r7]
 8007774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007778:	4637      	mov	r7, r6
 800777a:	42bb      	cmp	r3, r7
 800777c:	460e      	mov	r6, r1
 800777e:	d9f4      	bls.n	800776a <_printf_i+0x116>
 8007780:	2b08      	cmp	r3, #8
 8007782:	d10b      	bne.n	800779c <_printf_i+0x148>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	07de      	lsls	r6, r3, #31
 8007788:	d508      	bpl.n	800779c <_printf_i+0x148>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	6861      	ldr	r1, [r4, #4]
 800778e:	4299      	cmp	r1, r3
 8007790:	bfde      	ittt	le
 8007792:	2330      	movle	r3, #48	; 0x30
 8007794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800779c:	1b52      	subs	r2, r2, r5
 800779e:	6122      	str	r2, [r4, #16]
 80077a0:	f8cd a000 	str.w	sl, [sp]
 80077a4:	464b      	mov	r3, r9
 80077a6:	aa03      	add	r2, sp, #12
 80077a8:	4621      	mov	r1, r4
 80077aa:	4640      	mov	r0, r8
 80077ac:	f7ff fee4 	bl	8007578 <_printf_common>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d14a      	bne.n	800784a <_printf_i+0x1f6>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	b004      	add	sp, #16
 80077ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	f043 0320 	orr.w	r3, r3, #32
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	4833      	ldr	r0, [pc, #204]	; (8007894 <_printf_i+0x240>)
 80077c8:	2778      	movs	r7, #120	; 0x78
 80077ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	6829      	ldr	r1, [r5, #0]
 80077d2:	061f      	lsls	r7, r3, #24
 80077d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80077d8:	d402      	bmi.n	80077e0 <_printf_i+0x18c>
 80077da:	065f      	lsls	r7, r3, #25
 80077dc:	bf48      	it	mi
 80077de:	b2b6      	uxthmi	r6, r6
 80077e0:	07df      	lsls	r7, r3, #31
 80077e2:	bf48      	it	mi
 80077e4:	f043 0320 	orrmi.w	r3, r3, #32
 80077e8:	6029      	str	r1, [r5, #0]
 80077ea:	bf48      	it	mi
 80077ec:	6023      	strmi	r3, [r4, #0]
 80077ee:	b91e      	cbnz	r6, 80077f8 <_printf_i+0x1a4>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	f023 0320 	bic.w	r3, r3, #32
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	2310      	movs	r3, #16
 80077fa:	e7a7      	b.n	800774c <_printf_i+0xf8>
 80077fc:	4824      	ldr	r0, [pc, #144]	; (8007890 <_printf_i+0x23c>)
 80077fe:	e7e4      	b.n	80077ca <_printf_i+0x176>
 8007800:	4615      	mov	r5, r2
 8007802:	e7bd      	b.n	8007780 <_printf_i+0x12c>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	6826      	ldr	r6, [r4, #0]
 8007808:	6961      	ldr	r1, [r4, #20]
 800780a:	1d18      	adds	r0, r3, #4
 800780c:	6028      	str	r0, [r5, #0]
 800780e:	0635      	lsls	r5, r6, #24
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	d501      	bpl.n	8007818 <_printf_i+0x1c4>
 8007814:	6019      	str	r1, [r3, #0]
 8007816:	e002      	b.n	800781e <_printf_i+0x1ca>
 8007818:	0670      	lsls	r0, r6, #25
 800781a:	d5fb      	bpl.n	8007814 <_printf_i+0x1c0>
 800781c:	8019      	strh	r1, [r3, #0]
 800781e:	2300      	movs	r3, #0
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	4615      	mov	r5, r2
 8007824:	e7bc      	b.n	80077a0 <_printf_i+0x14c>
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	1d1a      	adds	r2, r3, #4
 800782a:	602a      	str	r2, [r5, #0]
 800782c:	681d      	ldr	r5, [r3, #0]
 800782e:	6862      	ldr	r2, [r4, #4]
 8007830:	2100      	movs	r1, #0
 8007832:	4628      	mov	r0, r5
 8007834:	f7f8 fce4 	bl	8000200 <memchr>
 8007838:	b108      	cbz	r0, 800783e <_printf_i+0x1ea>
 800783a:	1b40      	subs	r0, r0, r5
 800783c:	6060      	str	r0, [r4, #4]
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	2300      	movs	r3, #0
 8007844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007848:	e7aa      	b.n	80077a0 <_printf_i+0x14c>
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	462a      	mov	r2, r5
 800784e:	4649      	mov	r1, r9
 8007850:	4640      	mov	r0, r8
 8007852:	47d0      	blx	sl
 8007854:	3001      	adds	r0, #1
 8007856:	d0ad      	beq.n	80077b4 <_printf_i+0x160>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	079b      	lsls	r3, r3, #30
 800785c:	d413      	bmi.n	8007886 <_printf_i+0x232>
 800785e:	68e0      	ldr	r0, [r4, #12]
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	4298      	cmp	r0, r3
 8007864:	bfb8      	it	lt
 8007866:	4618      	movlt	r0, r3
 8007868:	e7a6      	b.n	80077b8 <_printf_i+0x164>
 800786a:	2301      	movs	r3, #1
 800786c:	4632      	mov	r2, r6
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	47d0      	blx	sl
 8007874:	3001      	adds	r0, #1
 8007876:	d09d      	beq.n	80077b4 <_printf_i+0x160>
 8007878:	3501      	adds	r5, #1
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	9903      	ldr	r1, [sp, #12]
 800787e:	1a5b      	subs	r3, r3, r1
 8007880:	42ab      	cmp	r3, r5
 8007882:	dcf2      	bgt.n	800786a <_printf_i+0x216>
 8007884:	e7eb      	b.n	800785e <_printf_i+0x20a>
 8007886:	2500      	movs	r5, #0
 8007888:	f104 0619 	add.w	r6, r4, #25
 800788c:	e7f5      	b.n	800787a <_printf_i+0x226>
 800788e:	bf00      	nop
 8007890:	080097fb 	.word	0x080097fb
 8007894:	0800980c 	.word	0x0800980c

08007898 <__sflush_r>:
 8007898:	898a      	ldrh	r2, [r1, #12]
 800789a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789e:	4605      	mov	r5, r0
 80078a0:	0710      	lsls	r0, r2, #28
 80078a2:	460c      	mov	r4, r1
 80078a4:	d458      	bmi.n	8007958 <__sflush_r+0xc0>
 80078a6:	684b      	ldr	r3, [r1, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc05      	bgt.n	80078b8 <__sflush_r+0x20>
 80078ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dc02      	bgt.n	80078b8 <__sflush_r+0x20>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	d0f9      	beq.n	80078b2 <__sflush_r+0x1a>
 80078be:	2300      	movs	r3, #0
 80078c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078c4:	682f      	ldr	r7, [r5, #0]
 80078c6:	6a21      	ldr	r1, [r4, #32]
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	d032      	beq.n	8007932 <__sflush_r+0x9a>
 80078cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	075a      	lsls	r2, r3, #29
 80078d2:	d505      	bpl.n	80078e0 <__sflush_r+0x48>
 80078d4:	6863      	ldr	r3, [r4, #4]
 80078d6:	1ac0      	subs	r0, r0, r3
 80078d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078da:	b10b      	cbz	r3, 80078e0 <__sflush_r+0x48>
 80078dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078de:	1ac0      	subs	r0, r0, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	4602      	mov	r2, r0
 80078e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b0      	blx	r6
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	d106      	bne.n	8007900 <__sflush_r+0x68>
 80078f2:	6829      	ldr	r1, [r5, #0]
 80078f4:	291d      	cmp	r1, #29
 80078f6:	d82b      	bhi.n	8007950 <__sflush_r+0xb8>
 80078f8:	4a29      	ldr	r2, [pc, #164]	; (80079a0 <__sflush_r+0x108>)
 80078fa:	410a      	asrs	r2, r1
 80078fc:	07d6      	lsls	r6, r2, #31
 80078fe:	d427      	bmi.n	8007950 <__sflush_r+0xb8>
 8007900:	2200      	movs	r2, #0
 8007902:	6062      	str	r2, [r4, #4]
 8007904:	04d9      	lsls	r1, r3, #19
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	6022      	str	r2, [r4, #0]
 800790a:	d504      	bpl.n	8007916 <__sflush_r+0x7e>
 800790c:	1c42      	adds	r2, r0, #1
 800790e:	d101      	bne.n	8007914 <__sflush_r+0x7c>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b903      	cbnz	r3, 8007916 <__sflush_r+0x7e>
 8007914:	6560      	str	r0, [r4, #84]	; 0x54
 8007916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007918:	602f      	str	r7, [r5, #0]
 800791a:	2900      	cmp	r1, #0
 800791c:	d0c9      	beq.n	80078b2 <__sflush_r+0x1a>
 800791e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007922:	4299      	cmp	r1, r3
 8007924:	d002      	beq.n	800792c <__sflush_r+0x94>
 8007926:	4628      	mov	r0, r5
 8007928:	f7ff fa92 	bl	8006e50 <_free_r>
 800792c:	2000      	movs	r0, #0
 800792e:	6360      	str	r0, [r4, #52]	; 0x34
 8007930:	e7c0      	b.n	80078b4 <__sflush_r+0x1c>
 8007932:	2301      	movs	r3, #1
 8007934:	4628      	mov	r0, r5
 8007936:	47b0      	blx	r6
 8007938:	1c41      	adds	r1, r0, #1
 800793a:	d1c8      	bne.n	80078ce <__sflush_r+0x36>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0c5      	beq.n	80078ce <__sflush_r+0x36>
 8007942:	2b1d      	cmp	r3, #29
 8007944:	d001      	beq.n	800794a <__sflush_r+0xb2>
 8007946:	2b16      	cmp	r3, #22
 8007948:	d101      	bne.n	800794e <__sflush_r+0xb6>
 800794a:	602f      	str	r7, [r5, #0]
 800794c:	e7b1      	b.n	80078b2 <__sflush_r+0x1a>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	e7ad      	b.n	80078b4 <__sflush_r+0x1c>
 8007958:	690f      	ldr	r7, [r1, #16]
 800795a:	2f00      	cmp	r7, #0
 800795c:	d0a9      	beq.n	80078b2 <__sflush_r+0x1a>
 800795e:	0793      	lsls	r3, r2, #30
 8007960:	680e      	ldr	r6, [r1, #0]
 8007962:	bf08      	it	eq
 8007964:	694b      	ldreq	r3, [r1, #20]
 8007966:	600f      	str	r7, [r1, #0]
 8007968:	bf18      	it	ne
 800796a:	2300      	movne	r3, #0
 800796c:	eba6 0807 	sub.w	r8, r6, r7
 8007970:	608b      	str	r3, [r1, #8]
 8007972:	f1b8 0f00 	cmp.w	r8, #0
 8007976:	dd9c      	ble.n	80078b2 <__sflush_r+0x1a>
 8007978:	6a21      	ldr	r1, [r4, #32]
 800797a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800797c:	4643      	mov	r3, r8
 800797e:	463a      	mov	r2, r7
 8007980:	4628      	mov	r0, r5
 8007982:	47b0      	blx	r6
 8007984:	2800      	cmp	r0, #0
 8007986:	dc06      	bgt.n	8007996 <__sflush_r+0xfe>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	e78e      	b.n	80078b4 <__sflush_r+0x1c>
 8007996:	4407      	add	r7, r0
 8007998:	eba8 0800 	sub.w	r8, r8, r0
 800799c:	e7e9      	b.n	8007972 <__sflush_r+0xda>
 800799e:	bf00      	nop
 80079a0:	dfbffffe 	.word	0xdfbffffe

080079a4 <_fflush_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	4605      	mov	r5, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	b913      	cbnz	r3, 80079b4 <_fflush_r+0x10>
 80079ae:	2500      	movs	r5, #0
 80079b0:	4628      	mov	r0, r5
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	b118      	cbz	r0, 80079be <_fflush_r+0x1a>
 80079b6:	6a03      	ldr	r3, [r0, #32]
 80079b8:	b90b      	cbnz	r3, 80079be <_fflush_r+0x1a>
 80079ba:	f7ff f831 	bl	8006a20 <__sinit>
 80079be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f3      	beq.n	80079ae <_fflush_r+0xa>
 80079c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079c8:	07d0      	lsls	r0, r2, #31
 80079ca:	d404      	bmi.n	80079d6 <_fflush_r+0x32>
 80079cc:	0599      	lsls	r1, r3, #22
 80079ce:	d402      	bmi.n	80079d6 <_fflush_r+0x32>
 80079d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079d2:	f7ff fa3a 	bl	8006e4a <__retarget_lock_acquire_recursive>
 80079d6:	4628      	mov	r0, r5
 80079d8:	4621      	mov	r1, r4
 80079da:	f7ff ff5d 	bl	8007898 <__sflush_r>
 80079de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079e0:	07da      	lsls	r2, r3, #31
 80079e2:	4605      	mov	r5, r0
 80079e4:	d4e4      	bmi.n	80079b0 <_fflush_r+0xc>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	059b      	lsls	r3, r3, #22
 80079ea:	d4e1      	bmi.n	80079b0 <_fflush_r+0xc>
 80079ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ee:	f7ff fa2d 	bl	8006e4c <__retarget_lock_release_recursive>
 80079f2:	e7dd      	b.n	80079b0 <_fflush_r+0xc>

080079f4 <__swhatbuf_r>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	460c      	mov	r4, r1
 80079f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	b096      	sub	sp, #88	; 0x58
 8007a00:	4615      	mov	r5, r2
 8007a02:	461e      	mov	r6, r3
 8007a04:	da0d      	bge.n	8007a22 <__swhatbuf_r+0x2e>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a0c:	f04f 0100 	mov.w	r1, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a16:	2340      	movne	r3, #64	; 0x40
 8007a18:	2000      	movs	r0, #0
 8007a1a:	6031      	str	r1, [r6, #0]
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	b016      	add	sp, #88	; 0x58
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	466a      	mov	r2, sp
 8007a24:	f000 f862 	bl	8007aec <_fstat_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	dbec      	blt.n	8007a06 <__swhatbuf_r+0x12>
 8007a2c:	9901      	ldr	r1, [sp, #4]
 8007a2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a36:	4259      	negs	r1, r3
 8007a38:	4159      	adcs	r1, r3
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	e7eb      	b.n	8007a18 <__swhatbuf_r+0x24>

08007a40 <__smakebuf_r>:
 8007a40:	898b      	ldrh	r3, [r1, #12]
 8007a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a44:	079d      	lsls	r5, r3, #30
 8007a46:	4606      	mov	r6, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	d507      	bpl.n	8007a5c <__smakebuf_r+0x1c>
 8007a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	2301      	movs	r3, #1
 8007a56:	6163      	str	r3, [r4, #20]
 8007a58:	b002      	add	sp, #8
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	ab01      	add	r3, sp, #4
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f7ff ffc8 	bl	80079f4 <__swhatbuf_r>
 8007a64:	9900      	ldr	r1, [sp, #0]
 8007a66:	4605      	mov	r5, r0
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7ff fa5d 	bl	8006f28 <_malloc_r>
 8007a6e:	b948      	cbnz	r0, 8007a84 <__smakebuf_r+0x44>
 8007a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a74:	059a      	lsls	r2, r3, #22
 8007a76:	d4ef      	bmi.n	8007a58 <__smakebuf_r+0x18>
 8007a78:	f023 0303 	bic.w	r3, r3, #3
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e7e3      	b.n	8007a4c <__smakebuf_r+0xc>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	6163      	str	r3, [r4, #20]
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	6120      	str	r0, [r4, #16]
 8007a96:	b15b      	cbz	r3, 8007ab0 <__smakebuf_r+0x70>
 8007a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f837 	bl	8007b10 <_isatty_r>
 8007aa2:	b128      	cbz	r0, 8007ab0 <__smakebuf_r+0x70>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	431d      	orrs	r5, r3
 8007ab4:	81a5      	strh	r5, [r4, #12]
 8007ab6:	e7cf      	b.n	8007a58 <__smakebuf_r+0x18>

08007ab8 <memmove>:
 8007ab8:	4288      	cmp	r0, r1
 8007aba:	b510      	push	{r4, lr}
 8007abc:	eb01 0402 	add.w	r4, r1, r2
 8007ac0:	d902      	bls.n	8007ac8 <memmove+0x10>
 8007ac2:	4284      	cmp	r4, r0
 8007ac4:	4623      	mov	r3, r4
 8007ac6:	d807      	bhi.n	8007ad8 <memmove+0x20>
 8007ac8:	1e43      	subs	r3, r0, #1
 8007aca:	42a1      	cmp	r1, r4
 8007acc:	d008      	beq.n	8007ae0 <memmove+0x28>
 8007ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ad6:	e7f8      	b.n	8007aca <memmove+0x12>
 8007ad8:	4402      	add	r2, r0
 8007ada:	4601      	mov	r1, r0
 8007adc:	428a      	cmp	r2, r1
 8007ade:	d100      	bne.n	8007ae2 <memmove+0x2a>
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007aea:	e7f7      	b.n	8007adc <memmove+0x24>

08007aec <_fstat_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	; (8007b0c <_fstat_r+0x20>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f7fe fd82 	bl	8006602 <_fstat>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d102      	bne.n	8007b08 <_fstat_r+0x1c>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	b103      	cbz	r3, 8007b08 <_fstat_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20025c44 	.word	0x20025c44

08007b10 <_isatty_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d06      	ldr	r5, [pc, #24]	; (8007b2c <_isatty_r+0x1c>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fe fed8 	bl	80068d0 <_isatty>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_isatty_r+0x1a>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_isatty_r+0x1a>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20025c44 	.word	0x20025c44

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fb faca 	bl	80030d4 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20025c44 	.word	0x20025c44

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <_realloc_r>:
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b70:	4680      	mov	r8, r0
 8007b72:	4614      	mov	r4, r2
 8007b74:	460e      	mov	r6, r1
 8007b76:	b921      	cbnz	r1, 8007b82 <_realloc_r+0x16>
 8007b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	f7ff b9d3 	b.w	8006f28 <_malloc_r>
 8007b82:	b92a      	cbnz	r2, 8007b90 <_realloc_r+0x24>
 8007b84:	f7ff f964 	bl	8006e50 <_free_r>
 8007b88:	4625      	mov	r5, r4
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	f000 f81b 	bl	8007bca <_malloc_usable_size_r>
 8007b94:	4284      	cmp	r4, r0
 8007b96:	4607      	mov	r7, r0
 8007b98:	d802      	bhi.n	8007ba0 <_realloc_r+0x34>
 8007b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b9e:	d812      	bhi.n	8007bc6 <_realloc_r+0x5a>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7ff f9c0 	bl	8006f28 <_malloc_r>
 8007ba8:	4605      	mov	r5, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d0ed      	beq.n	8007b8a <_realloc_r+0x1e>
 8007bae:	42bc      	cmp	r4, r7
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	bf28      	it	cs
 8007bb6:	463a      	movcs	r2, r7
 8007bb8:	f7ff ffca 	bl	8007b50 <memcpy>
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f7ff f946 	bl	8006e50 <_free_r>
 8007bc4:	e7e1      	b.n	8007b8a <_realloc_r+0x1e>
 8007bc6:	4635      	mov	r5, r6
 8007bc8:	e7df      	b.n	8007b8a <_realloc_r+0x1e>

08007bca <_malloc_usable_size_r>:
 8007bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bce:	1f18      	subs	r0, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbc      	itt	lt
 8007bd4:	580b      	ldrlt	r3, [r1, r0]
 8007bd6:	18c0      	addlt	r0, r0, r3
 8007bd8:	4770      	bx	lr
	...

08007bdc <_init>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

08007be8 <_fini>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr
